using System;
using System.Diagnostics;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
    /// </summary>
    public static class EuropeanLanguageTest
    {
        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
        /// </summary>
        public static void RunAllTests()
        {
            Console.WriteLine("üá™üá∫ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–í–†–û–ü–ï–ô–°–ö–ò–• –Ø–ó–´–ö–û–í ===");
            Console.WriteLine();

            TestRussianSentences();
            TestEnglishSentences();
            TestGermanSentences();
            TestFrenchSentences();
            TestSpanishSentences();
            TestItalianSentences();
            TestGreekSentences();
            TestIncompleteExamples();

            Console.WriteLine("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
            Console.WriteLine($"üìä {EuropeanLanguageFilter.GetSupportedLanguages()}");
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static void TestRussianSentences()
        {
            Console.WriteLine("üá∑üá∫ === –†–£–°–°–ö–ò–ô –Ø–ó–´–ö ===");

            var testCases = new (string text, bool shouldAccept, string reason)[]
            {
                // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", true, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                ("–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞!", true, "–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                ("–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å...", true, "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"),
                ("¬´–ß—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª?¬ª ‚Äî —Å–ø—Ä–æ—Å–∏–ª –æ–Ω.", true, "–ø—Ä—è–º–∞—è —Ä–µ—á—å —Å –∫–∞–≤—ã—á–∫–∞–º–∏"),
                ("iPhone —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.", true, "–±—Ä–µ–Ω–¥ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã"),
                ("5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ —è –≤–∏–¥–µ–ª –µ–≥–æ.", true, "–Ω–∞—á–∞–ª–æ —Å —Ü–∏—Ñ—Ä—ã"),
                ("$100 ‚Äî —ç—Ç–æ –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥.", true, "–Ω–∞—á–∞–ª–æ —Å —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã"),

                // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ (–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
                ("–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞", false, "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã"),
                ("–≠—Ç–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞", false, "–Ω–µ—Ç –∑–Ω–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"),
                ("—á—Ç–æ –º—ã –¥–µ–ª–∞–µ–º", false, "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –∏ –∑–Ω–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"),
                ("–∏ —ç—Ç–æ –Ω–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ä–µ—á—å", false, "–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏–∑ –ª–æ–≥–æ–≤"),
                ("–Ø –∑–∞–±—ã–ª–∏ –∂", false, "–æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                ("...choppers from a church", false, "—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º –≤ –Ω–∞—á–∞–ª–µ"),
                ("what we do", false, "–∞–Ω–≥–ª–∏–π—Å–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞")
            };

            RunLanguageTest("–†—É—Å—Å–∫–∏–π", testCases);
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static void TestEnglishSentences()
        {
            Console.WriteLine("üá¨üáß === –ê–ù–ì–õ–ò–ô–°–ö–ò–ô –Ø–ó–´–ö ===");

            var testCases = new (string text, bool shouldAccept, string reason)[]
            {
                // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ("Hello, how are you?", true, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"),
                ("This is a great book!", true, "–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                ("I need to think about it...", true, "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"),
                ("eBay is a popular marketplace.", true, "–±—Ä–µ–Ω–¥ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã"),
                ("10 years ago, everything was different.", true, "–Ω–∞—á–∞–ª–æ —Å —Ü–∏—Ñ—Ä—ã"),

                // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                ("hello how are you", false, "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã"),
                ("This is incomplete", false, "–Ω–µ—Ç –∑–Ω–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"),
                ("what we do", false, "–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                ("and this is not human speech", false, "–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞")
            };

            RunLanguageTest("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", testCases);
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–º–µ—Ü–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static void TestGermanSentences()
        {
            Console.WriteLine("üá©üá™ === –ù–ï–ú–ï–¶–ö–ò–ô –Ø–ó–´–ö ===");

            var testCases = new (string text, bool shouldAccept, string reason)[]
            {
                // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ("Hallo, wie geht es dir?", true, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"),
                ("Das ist ein sehr interessantes Buch!", true, "—Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏"),
                ("Ich m√∂chte dar√ºber nachdenken...", true, "—Å —É–º–ª–∞—É—Ç–∞–º–∏"),
                ("Der Hund ist sehr gro√ü.", true, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),

                // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                ("hallo wie geht es", false, "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã"),
                ("Das ist unvollst√§ndig", false, "–Ω–µ—Ç –∑–Ω–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            };

            RunLanguageTest("–ù–µ–º–µ—Ü–∫–∏–π", testCases);
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static void TestFrenchSentences()
        {
            Console.WriteLine("üá´üá∑ === –§–†–ê–ù–¶–£–ó–°–ö–ò–ô –Ø–ó–´–ö ===");

            var testCases = new (string text, bool shouldAccept, string reason)[]
            {
                // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ("Bonjour, comment allez-vous ?", true, "—Å –ø—Ä–æ–±–µ–ª–æ–º –ø–µ—Ä–µ–¥ ?"),
                ("C'est un livre tr√®s int√©ressant !", true, "—Å –ø—Ä–æ–±–µ–ª–æ–º –ø–µ—Ä–µ–¥ !"),
                ("Je dois r√©fl√©chir √† cela...", true, "—Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"),
                ("¬´ Qu'est-ce que tu dis ? ¬ª demanda-t-il.", true, "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏"),

                // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                ("bonjour comment allez vous", false, "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã"),
                ("C'est incomplet", false, "–Ω–µ—Ç –∑–Ω–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            };

            RunLanguageTest("–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", testCases);
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static void TestSpanishSentences()
        {
            Console.WriteLine("üá™üá∏ === –ò–°–ü–ê–ù–°–ö–ò–ô –Ø–ó–´–ö ===");

            var testCases = new (string text, bool shouldAccept, string reason)[]
            {
                // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ("¬øC√≥mo est√°s?", true, "–ø–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"),
                ("¬°Qu√© libro tan interesante!", true, "–ø–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è"),
                ("Hola, ¬øc√≥mo te llamas?", true, "—Å–º–µ—à–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏"),
                ("Necesito pensarlo...", true, "–æ–±—ã—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),

                // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                ("¬øc√≥mo est√°s", false, "–Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –∑–Ω–∞–∫–∞"),
                ("¬°qu√© interesante", false, "–Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –∑–Ω–∞–∫–∞"),
                ("hola c√≥mo est√°s", false, "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
            };

            RunLanguageTest("–ò—Å–ø–∞–Ω—Å–∫–∏–π", testCases);
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static void TestItalianSentences()
        {
            Console.WriteLine("üáÆüáπ === –ò–¢–ê–õ–¨–Ø–ù–°–ö–ò–ô –Ø–ó–´–ö ===");

            var testCases = new (string text, bool shouldAccept, string reason)[]
            {
                // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ("Ciao, come stai?", true, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"),
                ("Questo √® un libro molto interessante!", true, "–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                ("Devo pensarci...", true, "—Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"),

                // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                ("ciao come stai", false, "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã"),
                ("Questo √® incompleto", false, "–Ω–µ—Ç –∑–Ω–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            };

            RunLanguageTest("–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", testCases);
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–µ—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static void TestGreekSentences()
        {
            Console.WriteLine("üá¨üá∑ === –ì–†–ï–ß–ï–°–ö–ò–ô –Ø–ó–´–ö ===");

            var testCases = new (string text, bool shouldAccept, string reason)[]
            {
                // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ("ŒìŒµŒπŒ± œÉŒ±œÇ, œÄœéœÇ ŒµŒØœÉœÑŒµ;", true, "—Å –≥—Ä–µ—á–µ—Å–∫–∏–º –∑–Ω–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–∞ ;"),
                ("ŒëœÖœÑœå ŒµŒØŒΩŒ±Œπ Œ≠ŒΩŒ± œÄŒøŒªœç ŒµŒΩŒ¥ŒπŒ±œÜŒ≠œÅŒøŒΩ Œ≤ŒπŒ≤ŒªŒØŒø!", true, "–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                ("Œ†œÅŒ≠œÄŒµŒπ ŒΩŒ± œÑŒø œÉŒ∫ŒµœÜœÑœé...", true, "—Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"),

                // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                ("Œ≥ŒµŒπŒ± œÉŒ±œÇ œÄœéœÇ ŒµŒØœÉœÑŒµ", false, "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã"),
                ("ŒëœÖœÑœå ŒµŒØŒΩŒ±Œπ Œ±œÑŒµŒªŒ≠œÇ", false, "–Ω–µ—Ç –∑–Ω–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            };

            RunLanguageTest("–ì—Ä–µ—á–µ—Å–∫–∏–π", testCases);
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
        /// </summary>
        private static void TestIncompleteExamples()
        {
            Console.WriteLine("üö´ === –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –§–†–ê–ó–´ (–¥–æ–ª–∂–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è) ===");

            var incompleteCases = new (string text, string reason)[]
            {
                ("what we do", "–∞–Ω–≥–ª–∏–π—Å–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                ("–∏ —ç—Ç–æ –Ω–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ä–µ—á—å", "—Ä—É—Å—Å–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                ("–Ø –∑–∞–±—ã–ª–∏ –∂", "–æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è —Ä—É—Å—Å–∫–∞—è —Ñ—Ä–∞–∑–∞"),
                ("...choppers from a church", "—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º –≤ –Ω–∞—á–∞–ª–µ"),
                ("que hacemos", "–∏—Å–ø–∞–Ω—Å–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                ("was machen wir", "–Ω–µ–º–µ—Ü–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                ("qu'est-ce que nous faisons", "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                ("œÑŒπ Œ∫Œ¨ŒΩŒøœÖŒºŒµ", "–≥—Ä–µ—á–µ—Å–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                ("cosa facciamo", "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞")
            };

            foreach (var (text, reason) in incompleteCases)
            {
                bool result = EuropeanLanguageFilter.IsValidEuropeanSpeech(text);
                string status = result ? "‚ùå –ù–ï –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û" : "‚úÖ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û";
                Console.WriteLine($"  {status}: '{text}' ({reason})");
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
        /// </summary>
        private static void RunLanguageTest(string language, (string text, bool shouldAccept, string reason)[] testCases)
        {
            int passed = 0;
            int total = testCases.Length;

            foreach (var (text, shouldAccept, reason) in testCases)
            {
                bool result = EuropeanLanguageFilter.IsValidEuropeanSpeech(text);
                bool testPassed = result == shouldAccept;
                
                if (testPassed) passed++;

                string status = testPassed ? "‚úÖ" : "‚ùå";
                string expectedStr = shouldAccept ? "–ü–†–ò–ù–Ø–¢–¨" : "–û–¢–ö–õ–û–ù–ò–¢–¨";
                string actualStr = result ? "–ü–†–ò–ù–Ø–¢–û" : "–û–¢–ö–õ–û–ù–ï–ù–û";
                
                Console.WriteLine($"  {status} '{text}' -> {actualStr} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expectedStr}) - {reason}");
                
                if (!testPassed)
                {
                    Debug.WriteLine($"[EUROPEAN_TEST_FAIL] {language}: '{text}' -> –æ–∂–∏–¥–∞–ª–æ—Å—å {expectedStr}, –ø–æ–ª—É—á–µ–Ω–æ {actualStr}");
                }
            }

            Console.WriteLine($"üìä {language}: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ");
            Console.WriteLine();
        }

        /// <summary>
        /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        /// </summary>
        public static void CompareFilters()
        {
            Console.WriteLine("üîÑ === –°–†–ê–í–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í ===");

            var testPhrases = new string[]
            {
                "¬øC√≥mo est√°s?",           // –ò—Å–ø–∞–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
                "ŒìŒµŒπŒ± œÉŒ±œÇ;",              // –ì—Ä–µ—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
                "Bonjour, comment √ßa va ?", // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —Å –ø—Ä–æ–±–µ–ª–æ–º
                "—á—Ç–æ –º—ã –¥–µ–ª–∞–µ–º",          // –†—É—Å—Å–∫–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
                "iPhone —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.", // –ë—Ä–µ–Ω–¥ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
                "...fragment of text",    // –§—Ä–∞–≥–º–µ–Ω—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
                "5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥."          // –ù–∞—á–∞–ª–æ —Å —Ü–∏—Ñ—Ä—ã
            };

            foreach (var phrase in testPhrases)
            {
                bool standardResult = AdvancedSpeechFilter.IsValidSpeechQuick(phrase);
                bool europeanResult = EuropeanLanguageFilter.IsValidEuropeanSpeech(phrase);

                string comparison;
                if (standardResult == europeanResult)
                {
                    comparison = standardResult ? "‚úÖ –û–±–∞ –ü–†–ò–ù–ò–ú–ê–Æ–¢" : "‚ùå –û–±–∞ –û–¢–ö–õ–û–ù–Ø–Æ–¢";
                }
                else
                {
                    comparison = $"üîÑ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {(standardResult ? "–ü–†–ò–ù–ò–ú–ê–ï–¢" : "–û–¢–ö–õ–û–ù–Ø–ï–¢")}, –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π: {(europeanResult ? "–ü–†–ò–ù–ò–ú–ê–ï–¢" : "–û–¢–ö–õ–û–ù–Ø–ï–¢")}";
                }

                Console.WriteLine($"  '{phrase}' -> {comparison}");
            }
        }
    }
}