using System.Collections.Concurrent;
using System.Text;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ç–æ–∫–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ STT —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ TTS
    /// </summary>
    public class StreamingResultManager : IDisposable
    {
        private readonly ConcurrentDictionary<int, StreamingResult> results = new();
        private readonly SemaphoreSlim translationSemaphore = new(2); // –ú–∞–∫—Å–∏–º—É–º 2 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
        private readonly StringBuilder currentText = new();
        private EnhancedTTSEngine? ttsEngine;
        private int lastDisplayedChunk = 0;
        private int maxResultsToKeep = 50; // –°–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç–∏
        
        // –°–æ–±—ã—Ç–∏—è
        public event Func<string, string, string, Task<string>>? TranslationRequested; // text, fromLang, toLang
        public event Action<string>? CurrentTextUpdated; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        public event Action<string, int>? ChunkTranslated; // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —á–∞–Ω–∫
        public event Action<string>? StatusUpdated;
        
        private struct StreamingResult
        {
            public int ChunkNumber;
            public string OriginalText;
            public string TranslatedText;
            public DateTime Timestamp;
            public bool IsTranslated;
            public bool IsSpoken;
        }

        public StreamingResultManager(EnhancedTTSEngine? ttsEngine = null)
        {
            this.ttsEngine = ttsEngine;
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç STT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        public async Task AddStreamingResult(string text, int chunkNumber)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(text)) return;
                
                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                var result = new StreamingResult
                {
                    ChunkNumber = chunkNumber,
                    OriginalText = text.Trim(),
                    TranslatedText = "",
                    Timestamp = DateTime.Now,
                    IsTranslated = false,
                    IsSpoken = false
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                results.TryAdd(chunkNumber, result);
                
                AudioAnalysisUtils.SafeDebugLog($"üìù –î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∞–Ω–∫–∞ #{chunkNumber}: '{text}'");
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                UpdateCurrentText();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                _ = Task.Run(() => ProcessResultAsync(chunkNumber));
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                CleanupOldResults();
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–µ–≤–æ–¥ + TTS)
        /// </summary>
        private async Task ProcessResultAsync(int chunkNumber)
        {
            await translationSemaphore.WaitAsync();
            
            try
            {
                if (!results.TryGetValue(chunkNumber, out var result))
                    return;
                
                AudioAnalysisUtils.SafeDebugLog($"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–∞–Ω–∫–∞ #{chunkNumber}");
                StatusUpdated?.Invoke($"üîÑ –ü–µ—Ä–µ–≤–æ–∂—É —á–∞–Ω–∫ #{chunkNumber}...");
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
                bool isEnglish = AudioAnalysisUtils.IsEnglishText(result.OriginalText);
                string fromLang = isEnglish ? "en" : "ru";
                string toLang = isEnglish ? "ru" : "en";
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                string translatedText = result.OriginalText;
                if (TranslationRequested != null)
                {
                    translatedText = await TranslationRequested(result.OriginalText, fromLang, toLang);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result.TranslatedText = translatedText;
                result.IsTranslated = true;
                results.TryUpdate(chunkNumber, result, results[chunkNumber]);
                
                AudioAnalysisUtils.SafeDebugLog($"‚úÖ –ß–∞–Ω–∫ #{chunkNumber} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω: '{translatedText}'");
                ChunkTranslated?.Invoke(translatedText, chunkNumber);
                
                // –û–∑–≤—É—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await SpeakResultAsync(chunkNumber);
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ #{chunkNumber}: {ex.Message}");
            }
            finally
            {
                translationSemaphore.Release();
            }
        }

        /// <summary>
        /// –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        /// </summary>
        private async Task SpeakResultAsync(int chunkNumber)
        {
            try
            {
                if (ttsEngine == null || !results.TryGetValue(chunkNumber, out var result))
                    return;
                
                if (!result.IsTranslated || result.IsSpoken)
                    return;
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
                if (AudioAnalysisUtils.IsAudioPlaceholder(result.TranslatedText))
                {
                    System.Diagnostics.Debug.WriteLine($"[TTS_DEBUG] üö´ TTS –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞–Ω–∫–∞ #{chunkNumber}: –∑–∞–≥–ª—É—à–∫–∞");
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
                if (result.TranslatedText.Length < 3)
                {
                    AudioAnalysisUtils.SafeDebugLog($"üö´ TTS –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞–Ω–∫–∞ #{chunkNumber}: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
                    return;
                }
                
                AudioAnalysisUtils.SafeDebugLog($"üîä TTS –¥–ª—è —á–∞–Ω–∫–∞ #{chunkNumber}: '{result.TranslatedText}'");
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º TTS
                if (ttsEngine != null)
                {
                    bool success = await ttsEngine.SpeakTextAsync(result.TranslatedText);
                    
                    if (success)
                    {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        result.IsSpoken = true;
                        results.TryUpdate(chunkNumber, result, results[chunkNumber]);
                        AudioAnalysisUtils.SafeDebugLog($"‚úÖ TTS –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —á–∞–Ω–∫–∞ #{chunkNumber}");
                    }
                }
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ TTS –¥–ª—è —á–∞–Ω–∫–∞ #{chunkNumber}: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        /// </summary>
        private void UpdateCurrentText()
        {
            try
            {
                currentText.Clear();
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É —á–∞–Ω–∫–∞
                var sortedResults = results.Values
                    .OrderBy(r => r.ChunkNumber)
                    .ToList();
                
                foreach (var result in sortedResults)
                {
                    if (!string.IsNullOrWhiteSpace(result.OriginalText))
                    {
                        currentText.Append(result.OriginalText).Append(" ");
                    }
                }
                
                string text = currentText.ToString().Trim();
                CurrentTextUpdated?.Invoke(text);
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        /// </summary>
        private void CleanupOldResults()
        {
            try
            {
                if (results.Count <= maxResultsToKeep) return;
                
                // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                var oldResults = results.Values
                    .OrderBy(r => r.Timestamp)
                    .Take(results.Count - maxResultsToKeep)
                    .ToList();
                
                foreach (var oldResult in oldResults)
                {
                    results.TryRemove(oldResult.ChunkNumber, out _);
                }
                
                AudioAnalysisUtils.SafeDebugLog($"üßπ –û—á–∏—â–µ–Ω–æ {oldResults.Count} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        /// </summary>
        public string GetCurrentText()
        {
            return currentText.ToString().Trim();
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        /// </summary>
        public string GetStats()
        {
            int total = results.Count;
            int translated = results.Values.Count(r => r.IsTranslated);
            int spoken = results.Values.Count(r => r.IsSpoken);
            
            return $"–í—Å–µ–≥–æ: {total}, –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {translated}, –û–∑–≤—É—á–µ–Ω–æ: {spoken}";
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        /// </summary>
        public async Task FlushPendingResults()
        {
            var pendingChunks = results.Values
                .Where(r => !r.IsTranslated)
                .Select(r => r.ChunkNumber)
                .ToList();
            
            foreach (int chunkNumber in pendingChunks)
            {
                _ = Task.Run(() => ProcessResultAsync(chunkNumber));
            }
            
            AudioAnalysisUtils.SafeDebugLog($"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {pendingChunks.Count} –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
        }

        /// <summary>
        /// –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        /// </summary>
        public void Reset()
        {
            try
            {
                results.Clear();
                currentText.Clear();
                lastDisplayedChunk = 0;
                CurrentTextUpdated?.Invoke("");
                AudioAnalysisUtils.SafeDebugLog("üîÑ StreamingResultManager —Å–±—Ä–æ—à–µ–Ω");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {ex.Message}");
            }
        }

        public void Dispose()
        {
            try
            {
                Reset();
                translationSemaphore?.Dispose();
                AudioAnalysisUtils.SafeDebugLog("üóëÔ∏è StreamingResultManager —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
            }
        }
    }
}