using NAudio.CoreAudioApi;
using NAudio.Wave;
using Whisper.net;
using System.Speech.Synthesis;
using RestSharp;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Linq;

namespace test_speaker_stt_translate_tts
{
    public partial class Form1 : Form
    {
        #region Private Fields
        
        private WasapiLoopbackCapture? wasapiCapture;
        private WaveInEvent? waveInCapture;
        private List<byte> audioBuffer = new();
        private bool isCapturing = false;
        private bool isCollectingAudio = false;
        private int audioLogCount = 0; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        private volatile bool isTTSActive = false; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö TTS –æ–ø–µ—Ä–∞—Ü–∏–π
        private DateTime lastVoiceActivity = DateTime.Now;
        private DateTime recordingStartTime = DateTime.Now;
        private float voiceThreshold = 0.05f; // –ü–æ–≤—ã—Å–∏–º –ø–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        private int silenceDurationMs = 1000; // –°–æ–∫—Ä–∞—Ç–∏–º –¥–æ 1 —Å–µ–∫
        private int maxRecordingMs = 5000; // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∏ (—Å–æ–∫—Ä–∞—Ç–∏–ª–∏ —Å 10 —Å–µ–∫)
        private System.Windows.Forms.Timer? audioLevelTimer;
        private float currentAudioLevel = 0f;
        
        // Processing mode
        private bool isStreamingMode = false;
        private int currentProcessingMode = 0; // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        
        // Smart Audio Management
        private SmartAudioManager? smartAudioManager;
        
        // –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        private StreamingWhisperProcessor? streamingProcessor;
        private AudioResampler? audioResampler;
        private bool isDisposed = false;
        
        // User Settings
        private UserSettings userSettings = new UserSettings();
        
        // STT & Translation
        private static string WhisperModelPath => Path.Combine(Application.StartupPath, "models", "whisper", "ggml-small.bin");
        private SpeechSynthesizer? speechSynthesizer;
        private TtsVoiceManager? ttsVoiceManager;
        private RestClient? googleTranslateClient;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        private int totalProcessedFrames = 0;
        private DateTime sessionStartTime = DateTime.Now;
        
        // Language mappings
        private readonly Dictionary<string, string> languageCodes = new()
        {
            { "–†—É—Å—Å–∫–∏–π", "ru" },
            { "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "en" },
            { "–ù–µ–º–µ—Ü–∫–∏–π", "de" },
            { "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "fr" },
            { "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "es" },
            { "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "it" },
            { "–Ø–ø–æ–Ω—Å–∫–∏–π", "ja" },
            { "–ö–∏—Ç–∞–π—Å–∫–∏–π", "zh" }
        };

        #endregion

        #region Constructor & Initialization

        public Form1()
        {
            InitializeComponent();
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            this.FormClosing += Form1_OnFormClosing;
            
            InitializeApplication();
        }

        private void InitializeApplication()
        {
            LogMessage("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            LoadUserSettings();
            
            // üß™ –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–• –§–†–ê–ó
            IncompletePhrasesTest.RunTest();
            
            // üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´
            CapitalLetterTest.RunCapitalLetterDemo();
            
            // üá™üá∫ –¢–ï–°–¢ –ï–í–†–û–ü–ï–ô–°–ö–ò–• –Ø–ó–´–ö–û–í
            EuropeanLanguageTest.RunAllTests();
            EuropeanLanguageTest.CompareFilters();
            
            // Check Whisper model first
            if (!CheckWhisperModel())
            {
                MessageBox.Show(
                    $"‚ùå Whisper –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n" +
                    $"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å:\n{WhisperModelPath}\n\n" +
                    $"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª—å ggml-small.bin –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.",
                    "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
            
            // Initialize components
            InitializeAudioDevices();
            InitializeLanguages();
            InitializeSmartAudioManager();
            InitializeTTS();
            InitializeTranslation();
            InitializeTimer();
            InitializeProcessingMode();
            InitializeStreamingComponents();
            
            // Set default threshold
            voiceThreshold = (float)numThreshold.Value;
            numThreshold.ValueChanged += (s, e) => {
                voiceThreshold = (float)numThreshold.Value;
                userSettings.VoiceThreshold = voiceThreshold;
                OnSettingChanged();
            };
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            SubscribeToSettingsEvents();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ApplySettingsAfterInitialization();
            
            LogMessage("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ");
        }

        private bool CheckWhisperModel()
        {
            try
            {
                if (File.Exists(WhisperModelPath))
                {
                    var fileInfo = new FileInfo(WhisperModelPath);
                    LogMessage($"‚úÖ Whisper –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {fileInfo.Length / 1024 / 1024:F1} MB");
                    return true;
                }
                else
                {
                    LogMessage($"‚ùå Whisper –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {WhisperModelPath}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Whisper –º–æ–¥–µ–ª–∏: {ex.Message}");
                return false;
            }
        }

        private void InitializeAudioDevices()
        {
            LogMessage("üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤...");
            
            cbSpeakerDevices.Items.Clear();
            
            var enumerator = new MMDeviceEnumerator();
            var devices = enumerator.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
            
            foreach (var device in devices)
            {
                string deviceInfo = $"{device.FriendlyName}";
                cbSpeakerDevices.Items.Add(new AudioDevice 
                { 
                    Name = deviceInfo, 
                    Device = device 
                });
                LogMessage($"   üìª {deviceInfo}");
            }
            
            if (cbSpeakerDevices.Items.Count > 0)
            {
                cbSpeakerDevices.SelectedIndex = 0;
                LogMessage($"‚úÖ –ù–∞–π–¥–µ–Ω–æ {cbSpeakerDevices.Items.Count} –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤");
            }
            else
            {
                LogMessage("‚ùå –ê—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            }
        }

        private void InitializeLanguages()
        {
            // –î–æ–±–∞–≤–ª—è–µ–º "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" –∫–∞–∫ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
            cbSourceLang.Items.Add("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
            cbSourceLang.Items.AddRange(languageCodes.Keys.ToArray());
            cbTargetLang.Items.AddRange(languageCodes.Keys.ToArray());
            
            cbSourceLang.SelectedItem = "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            cbTargetLang.SelectedItem = "–†—É—Å—Å–∫–∏–π";
        }

        private void InitializeSmartAudioManager()
        {
            try
            {
                smartAudioManager = new SmartAudioManager();
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                smartAudioManager.LogMessage += LogMessage;
                smartAudioManager.ProcessAudioSegment += ProcessAudioSegmentFromQueue;
                smartAudioManager.TTSStateChanged += OnTTSStateChanged;
                smartAudioManager.CaptureStateChanged += OnCaptureStateChanged;
                
                LogMessage("‚úÖ SmartAudioManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SmartAudioManager: {ex.Message}");
            }
        }

        private void OnTTSStateChanged(bool isActive)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS
            Invoke(() => {
                // –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS –≤ –±—É–¥—É—â–µ–º
                LogMessage($"üîä TTS —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {(isActive ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")}");
            });
        }

        private void OnCaptureStateChanged(bool isActive)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞
            Invoke(() => {
                LogMessage($"üé§ –ó–∞—Ö–≤–∞—Ç: {(isActive ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")}");
            });
        }

        private async Task ProcessAudioSegmentFromQueue(AudioSegment segment)
        {
            try
            {
                LogMessage($"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {segment.AudioData.Length} –±–∞–π—Ç (–∏—Å—Ç–æ—á–Ω–∏–∫: {segment.Source})");
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
                await ProcessAudioDataInternal(segment.AudioData);
                
                LogMessage($"‚úÖ –°–µ–≥–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                
                // üìö –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∫–∞–∂–¥—ã–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                totalProcessedFrames++;
                if (totalProcessedFrames % 10 == 0)
                {
                    ShowAudiobookStatistics();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {ex.Message}");
            }
        }

        private void InitializeTTS()
        {
            try
            {
                speechSynthesizer = new SpeechSynthesizer();
                speechSynthesizer.Volume = 100;
                speechSynthesizer.Rate = 0;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ–ª–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
                ttsVoiceManager = new TtsVoiceManager(speechSynthesizer);
                
                LogMessage("‚úÖ TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤");
                LogMessage($"üì¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {ttsVoiceManager.GetVoiceInfo()}");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {ex.Message}");
            }
        }

        private void InitializeTranslation()
        {
            try
            {
                googleTranslateClient = new RestClient("https://translate.googleapis.com");
                LogMessage("‚úÖ Google Translate –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {ex.Message}");
            }
        }

        private void InitializeTimer()
        {
            audioLevelTimer = new System.Windows.Forms.Timer();
            audioLevelTimer.Interval = 100; // Update every 100ms
            audioLevelTimer.Tick += AudioLevelTimer_Tick;
        }

        private void InitializeProcessingMode()
        {
            LogMessage("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏...");
            
            cbProcessingMode.Items.Clear();
            cbProcessingMode.Items.Add("üîÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (–∂–¥–µ—Ç –ø–∞—É–∑—ã)");
            cbProcessingMode.Items.Add("‚ö° –ü–æ—Ç–æ–∫–æ–≤—ã–π (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫)");
            cbProcessingMode.Items.Add("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω (–∫–∞–∫ –≤ MORT)");
            cbProcessingMode.SelectedIndex = 0; // Default to original mode
            currentProcessingMode = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            cbProcessingMode.SelectedIndexChanged += ProcessingMode_Changed;
            
            LogMessage("‚úÖ –†–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        }

        private void ProcessingMode_Changed(object sender, EventArgs e)
        {
            currentProcessingMode = cbProcessingMode.SelectedIndex; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            isStreamingMode = currentProcessingMode == 1;
            var selectedMode = currentProcessingMode switch
            {
                1 => "–ü–æ—Ç–æ–∫–æ–≤—ã–π",
                2 => "–ú–∏–∫—Ä–æ—Ñ–æ–Ω (MORT)",
                _ => "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π"
            };
            LogMessage($"üîß –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selectedMode}");
            
            if (currentProcessingMode == 1)
            {
                LogMessage("‚ö° –í–∫–ª—é—á–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—É–∑");
            }
            else if (currentProcessingMode == 2)
            {
                LogMessage("üé§ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ - –∫–∞–∫ –≤ MORT —Å WaveInEvent");
            }
            else
            {
                LogMessage("üîÑ –í–∫–ª—é—á–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –æ–∂–∏–¥–∞–Ω–∏–µ –ø–∞—É–∑ –≤ —Ä–µ—á–∏");
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            userSettings.ProcessingMode = currentProcessingMode;
            UserSettings.AutoSave(userSettings);
        }

        private async void InitializeStreamingComponents()
        {
            LogMessage("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");
            
            try
            {
                sessionStartTime = DateTime.Now;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Whisper
                streamingProcessor = new StreamingWhisperProcessor();
                streamingProcessor.OnTextRecognized += OnStreamingTextRecognized;
                streamingProcessor.OnError += OnStreamingError;
                streamingProcessor.OnStats += OnStreamingStats;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Whisper –º–æ–¥–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                bool whisperInitialized = await streamingProcessor.InitializeAsync(WhisperModelPath);
                if (!whisperInitialized)
                {
                    LogMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π Whisper");
                    return;
                }
                
                LogMessage("‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {ex.Message}");
            }
        }

        #endregion

        #region Streaming Event Handlers
        
        private void OnStreamingTextRecognized(string text, double confidence)
        {
            // üõ°Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã
            if (isDisposed || string.IsNullOrWhiteSpace(text) || !isCapturing || !isCollectingAudio)
            {
                LogMessage($"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ OnStreamingTextRecognized: isDisposed={isDisposed}, isCapturing={isCapturing}, text='{text?.Substring(0, Math.Min(20, text?.Length ?? 0))}...'");
                return;
            }
                
            try
            {
                LogMessage($"üéØ WHISPER –†–ï–ó–£–õ–¨–¢–ê–¢ (RAW): '{text}' [confidence: {confidence:P1}]");
                
                // üßπ –û—á–∏—â–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                var cleanText = AdvancedSpeechFilter.CleanEmotionalMarkers(text);
                if (string.IsNullOrWhiteSpace(cleanText))
                {
                    LogMessage($"üö´ –ü—Ä–æ–ø—É—â–µ–Ω —Ç–µ–∫—Å—Ç —Å —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏: '{text}' -> '{cleanText}'");
                    return;
                }

                LogMessage($"‚ú® –û–ß–ò–©–ï–ù–ù–´–ô –¢–ï–ö–°–¢: '{cleanText}'");

                BeginInvoke(() =>
                {
                    LogMessage($"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ({confidence:P1}): {cleanText}");
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
                    txtRecognizedText.Text += (txtRecognizedText.Text.Length > 0 ? " " : "") + cleanText;
                    txtRecognizedText.SelectionStart = txtRecognizedText.Text.Length;
                    txtRecognizedText.ScrollToCaret();
                    
                    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
                    LogMessage($"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: '{cleanText}'");
                    _ = Task.Run(async () => {
                        try
                        {
                            await TranslateStreamingText(cleanText);
                            LogMessage($"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è: '{cleanText}'");
                        }
                        catch (Exception ex)
                        {
                            LogMessage($"‚ùå –û—à–∏–±–∫–∞ –≤ TranslateStreamingText: {ex.Message}");
                        }
                    });
                });
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {ex.Message}");
            }
        }
        
        private void OnStreamingError(Exception error)
        {
            if (isDisposed) return;
            
            BeginInvoke(() =>
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {error.Message}");
            });
        }
        
        private void OnStreamingStats(StreamingStats stats)
        {
            if (isDisposed) return;
            
            BeginInvoke(() =>
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ UI
                lblStats.Text = $"–û–∫–æ–Ω: {stats.ProcessedWindows} | " +
                               $"–û—á–µ—Ä–µ–¥—å: {stats.QueueSize} | " +
                               $"–ë—É—Ñ–µ—Ä: {stats.BufferFillLevel:P1} | " +
                               $"–í—Ä–µ–º—è: {stats.AverageProcessingTime:F0}–º—Å";
                
                totalProcessedFrames = stats.ProcessedWindows;
            });
        }
        
        private async Task TranslateStreamingText(string text)
        {
            try
            {
                LogMessage($"üîÑ TranslateStreamingText –ù–ê–ß–ê–õ–û –¥–ª—è: '{text}'");
                
                // –¢–µ–∫—Å—Ç —É–∂–µ –æ—á–∏—â–µ–Ω –≤ OnStreamingTextRecognized
                if (string.IsNullOrWhiteSpace(text))
                {
                    LogMessage($"üö´ –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞");
                    return;
                }

                string sourceLanguage = "";
                string targetLanguage = "";
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –≤ UI –ø–æ—Ç–æ–∫–µ
                if (InvokeRequired)
                {
                    Invoke(() =>
                    {
                        sourceLanguage = GetLanguageCode(cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
                        targetLanguage = GetLanguageCode(cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π");
                    });
                }
                else
                {
                    sourceLanguage = GetLanguageCode(cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
                    targetLanguage = GetLanguageCode(cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π");
                }
                
                LogMessage($"üìù –Ø–∑—ã–∫–∏: {sourceLanguage} -> {targetLanguage}");
                
                if (sourceLanguage == targetLanguage)
                {
                    LogMessage($"‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã ({sourceLanguage}), –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
                    BeginInvoke(() =>
                    {
                        txtTranslatedText.Text += (txtTranslatedText.Text.Length > 0 ? " " : "") + text;
                        txtTranslatedText.SelectionStart = txtTranslatedText.Text.Length;
                        txtTranslatedText.ScrollToCaret();
                    });
                    
                    // –û–∑–≤—É—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                    if (chkAutoTranslate.Checked)
                    {
                        LogMessage($"üîä –û–∑–≤—É—á–∏–≤–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞: '{text}'");
                        await SpeakText(text);
                    }
                    else
                    {
                        LogMessage("üîá AutoTranslate –æ—Ç–∫–ª—é—á–µ–Ω, –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç");
                    }
                    return;
                }
                
                LogMessage($"üåê –í—ã–∑—ã–≤–∞–µ–º TranslateText –¥–ª—è: '{text}'");
                var translatedText = await TranslateText(text, sourceLanguage, targetLanguage);
                
                if (!string.IsNullOrWhiteSpace(translatedText))
                {
                    LogMessage($"‚úÖ –ü–ï–†–ï–í–û–î –ü–û–õ–£–ß–ï–ù: '{text}' -> '{translatedText}'");
                    
                    BeginInvoke(() =>
                    {
                        txtTranslatedText.Text += (txtTranslatedText.Text.Length > 0 ? " " : "") + translatedText;
                        txtTranslatedText.SelectionStart = txtTranslatedText.Text.Length;
                        txtTranslatedText.ScrollToCaret();
                        
                        // TTS –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                        if (chkAutoTranslate.Checked) // –ò—Å–ø–æ–ª—å–∑—É–µ–º chkAutoTranslate –≤–º–µ—Å—Ç–æ chkEnableTTS
                        {
                            LogMessage($"üîä –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥: '{translatedText}'");
                            _ = Task.Run(async () => {
                                try
                                {
                                    await SpeakText(translatedText);
                                    LogMessage($"‚úÖ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è: '{translatedText}'");
                                }
                                catch (Exception ex)
                                {
                                    LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {ex.Message}");
                                }
                            });
                        }
                        else
                        {
                            LogMessage("üîá AutoTranslate –æ—Ç–∫–ª—é—á–µ–Ω, –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç");
                        }
                    });
                }
                else
                {
                    LogMessage($"‚ùå TranslateText –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{text}'");
                }
                
                LogMessage($"üéØ TranslateStreamingText –ó–ê–í–ï–†–®–ï–ù–û –¥–ª—è: '{text}'");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {ex.Message}");
            }
        }

        #endregion

        #region User Settings

        private void LoadUserSettings()
        {
            try
            {
                userSettings = UserSettings.LoadSettings();
                userSettings.ApplySafeDefaults();
                
                LogMessage("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
                ApplySettingsToUI();
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
                userSettings = new UserSettings();
            }
        }

        private void ApplySettingsToUI()
        {
            try
            {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Ñ–æ—Ä–º–µ
                if (userSettings.WindowLocationX >= 0 && userSettings.WindowLocationY >= 0)
                {
                    this.StartPosition = FormStartPosition.Manual;
                    this.Location = new Point(userSettings.WindowLocationX, userSettings.WindowLocationY);
                }
                
                this.Size = new Size(userSettings.WindowWidth, userSettings.WindowHeight);
                
                // üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "—Å–∫—É–∫–æ–∂–∏–≤–∞–Ω–∏—è"
                this.MinimumSize = new Size(800, 570);
                if (this.Width < 800 || this.Height < 570)
                {
                    this.Size = new Size(800, 570);
                    LogMessage("‚ö†Ô∏è –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—ã–ª —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ");
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                numThreshold.Value = (decimal)userSettings.VoiceThreshold;
                voiceThreshold = userSettings.VoiceThreshold;
                
                LogMessage($"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        private void ApplySettingsAfterInitialization()
        {
            try
            {
                // –í—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                if (!string.IsNullOrEmpty(userSettings.SelectedAudioDevice))
                {
                    for (int i = 0; i < cbSpeakerDevices.Items.Count; i++)
                    {
                        if (cbSpeakerDevices.Items[i] is AudioDevice device && 
                            device.Name.Contains(userSettings.SelectedAudioDevice))
                        {
                            cbSpeakerDevices.SelectedIndex = i;
                            break;
                        }
                    }
                }

                // –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫–∏
                if (cbSourceLang.Items.Contains(userSettings.SourceLanguage))
                    cbSourceLang.SelectedItem = userSettings.SourceLanguage;
                
                if (cbTargetLang.Items.Contains(userSettings.TargetLanguage))
                    cbTargetLang.SelectedItem = userSettings.TargetLanguage;

                // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if (userSettings.ProcessingMode >= 0 && userSettings.ProcessingMode < cbProcessingMode.Items.Count)
                {
                    cbProcessingMode.SelectedIndex = userSettings.ProcessingMode;
                    currentProcessingMode = userSettings.ProcessingMode; // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                }

                // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
                chkAutoTranslate.Checked = userSettings.AutoTranslateAndTTS;

                LogMessage($"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º: {ex.Message}");
            }
        }

        private void SaveCurrentSettings()
        {
            try
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI
                userSettings.WindowWidth = this.Width;
                userSettings.WindowHeight = this.Height;
                userSettings.WindowLocationX = this.Location.X;
                userSettings.WindowLocationY = this.Location.Y;

                if (cbSpeakerDevices.SelectedItem is AudioDevice selectedDevice)
                    userSettings.SelectedAudioDevice = selectedDevice.Name;

                userSettings.SourceLanguage = cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";
                userSettings.TargetLanguage = cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π";
                userSettings.VoiceThreshold = voiceThreshold;
                userSettings.ProcessingMode = currentProcessingMode; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                userSettings.AutoTranslateAndTTS = chkAutoTranslate.Checked;

                UserSettings.SaveSettings(userSettings);
                LogMessage("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        private void OnSettingChanged()
        {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            UserSettings.AutoSave(userSettings, 2000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        }

        private void SubscribeToSettingsEvents()
        {
            try
            {
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ComboBox'–æ–≤
                cbSpeakerDevices.SelectedIndexChanged += (s, e) => {
                    if (cbSpeakerDevices.SelectedItem is AudioDevice selectedDevice)
                    {
                        userSettings.SelectedAudioDevice = selectedDevice.Name;
                        OnSettingChanged();
                    }
                };

                cbSourceLang.SelectedIndexChanged += (s, e) => {
                    userSettings.SourceLanguage = cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";
                    OnSettingChanged();
                };

                cbTargetLang.SelectedIndexChanged += (s, e) => {
                    userSettings.TargetLanguage = cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π";
                    OnSettingChanged();
                };

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è CheckBox'–æ–≤
                chkAutoTranslate.CheckedChanged += (s, e) => {
                    userSettings.AutoTranslateAndTTS = chkAutoTranslate.Checked;
                    OnSettingChanged();
                };

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–∫–Ω–∞
                this.LocationChanged += (s, e) => {
                    if (this.WindowState == FormWindowState.Normal)
                    {
                        userSettings.WindowLocationX = this.Location.X;
                        userSettings.WindowLocationY = this.Location.Y;
                        OnSettingChanged();
                    }
                };

                this.SizeChanged += (s, e) => {
                    if (this.WindowState == FormWindowState.Normal)
                    {
                        userSettings.WindowWidth = this.Width;
                        userSettings.WindowHeight = this.Height;
                        OnSettingChanged();
                    }
                };

                LogMessage("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        #endregion

        #region Audio Capture

        private void btnStartCapture_Click(object sender, EventArgs e)
        {
            StartAudioCapture();
        }

        private void btnStopCapture_Click(object sender, EventArgs e)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ–±—ã—á–Ω—ã–π —Å—Ç–æ–ø –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
            if (isCapturing)
            {
                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
                btnStopCapture.Enabled = false;
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
                _ = Task.Run(async () =>
                {
                    try
                    {
                        await StopAudioCapture();
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
                    }
                    finally
                    {
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        if (!IsDisposed && IsHandleCreated)
                        {
                            try
                            {
                                Invoke(() =>
                                {
                                    btnStopCapture.Enabled = true;
                                    btnStartCapture.Enabled = true;
                                });
                            }
                            catch (ObjectDisposedException)
                            {
                                // –§–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                            }
                        }
                    }
                });
            }
            else
            {
                // –ï—Å–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã
                ResetSystemToInitialState();
            }
        }

        private void StartAudioCapture()
        {
            try
            {
                if (cbSpeakerDevices.SelectedItem is not AudioDevice selectedDevice)
                {
                    LogMessage("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!");
                    return;
                }

                if (!File.Exists(WhisperModelPath))
                {
                    LogMessage($"‚ùå Whisper –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {WhisperModelPath}");
                    return;
                }

                LogMessage("üéß –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ...");
                LogMessage($"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: isCapturing={isCapturing}, isCollectingAudio={isCollectingAudio}");
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–æ—Å SmartAudioManager –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                smartAudioManager?.ResetForNewStart();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                int processingMode = currentProcessingMode; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                
                if (processingMode == 2) // –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WaveInEvent –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                    waveInCapture = new WaveInEvent();
                    waveInCapture.WaveFormat = new WaveFormat(44100, 1); // 44.1kHz mono
                    waveInCapture.BufferMilliseconds = 100;
                    waveInCapture.DataAvailable += OnMicrophoneDataAvailable;
                    waveInCapture.RecordingStopped += OnMicrophoneRecordingStopped;
                    waveInCapture.StartRecording();
                    LogMessage("üé§ –†–µ–∂–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: WaveInEvent –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                }
                else
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WASAPI Loopback –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ
                    wasapiCapture = new WasapiLoopbackCapture(selectedDevice.Device);
                    wasapiCapture.DataAvailable += OnAudioDataAvailable;
                    wasapiCapture.RecordingStopped += OnRecordingStopped;
                    wasapiCapture.StartRecording();
                    LogMessage("üîä –†–µ–∂–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ: WASAPI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                }
                
                audioLevelTimer?.Start();
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                isCapturing = true;
                isCollectingAudio = false; // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø–∏—Å–∏
                audioBuffer.Clear();
                audioLogCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏;
                
                LogMessage($"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: isCapturing={isCapturing}, isCollectingAudio={isCollectingAudio}");
                LogMessage($"üìä –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω, —Ä–∞–∑–º–µ—Ä: {audioBuffer.Count}");
                
                // Update UI
                btnStartCapture.Enabled = false;
                btnStopCapture.Enabled = true;
                lblStatus.Text = "üéß –ó–∞—Ö–≤–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω";
                lblStatus.ForeColor = Color.Green;
                txtRecognizedText.Text = "üîá –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—á–∏...";
                txtTranslatedText.Text = "üîá –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞...";
                
                LogMessage($"‚úÖ –ó–∞—Ö–≤–∞—Ç –∑–∞–ø—É—â–µ–Ω: {selectedDevice.Name}");
                LogMessage($"üéöÔ∏è –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {voiceThreshold:F3}");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
            }
        }

        private async Task StopAudioCapture()
        {
            try
            {
                LogMessage("‚èπÔ∏è –ü–û–õ–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´...");
                
                // üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                if (!isCapturing && !isCollectingAudio)
                {
                    LogMessage("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
                    return;
                }
                
                // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
                isCapturing = false;
                isCollectingAudio = false;
                isTTSActive = false; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º TTS —Ñ–ª–∞–≥
                audioLevelTimer?.Stop();
                
                // 2. –û—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
                audioBuffer.Clear();
                LogMessage("üóëÔ∏è –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω");
                
                // 3. –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ SmartAudioManager
                if (smartAudioManager != null)
                {
                    smartAudioManager.ClearQueue();
                    smartAudioManager.PauseCapture("full_stop");
                    LogMessage("üóëÔ∏è SmartAudioManager: –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, –∑–∞—Ö–≤–∞—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
                
                // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö TTS –æ–ø–µ—Ä–∞—Ü–∏–π
                if (speechSynthesizer != null)
                {
                    try
                    {
                        speechSynthesizer.SpeakAsyncCancelAll();
                        
                        // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                        await Task.Delay(200);
                        
                        LogMessage("üõë –í—Å–µ TTS –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã");
                    }
                    catch (OperationCanceledException)
                    {
                        LogMessage("üõë TTS –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω—ã");
                    }
                    catch (Exception ttsEx)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS: {ttsEx.Message}");
                    }
                }
                
                // 5. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
                try
                {
                    if (streamingProcessor != null)
                    {
                        // üîå –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –ü–ï–†–ï–î –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                        try
                        {
                            streamingProcessor.OnTextRecognized -= OnStreamingTextRecognized;
                            streamingProcessor.OnError -= OnStreamingError;
                            streamingProcessor.OnStats -= OnStreamingStats;
                            LogMessage("üîå –°–æ–±—ã—Ç–∏—è StreamingProcessor –æ—Ç–∫–ª—é—á–µ–Ω—ã");
                        }
                        catch (Exception eventEx)
                        {
                            LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π: {eventEx.Message}");
                        }
                        
                        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        using (var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(2)))
                        {
                            await streamingProcessor.DisposeAsync().AsTask().WaitAsync(timeoutCts.Token);
                        }
                        streamingProcessor = null;
                        LogMessage("üîá StreamingWhisperProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                }
                catch (OperationCanceledException)
                {
                    LogMessage("‚ö†Ô∏è StreamingProcessor –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É");
                    streamingProcessor = null; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ StreamingProcessor: {ex.Message}");
                    streamingProcessor = null; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫
                }
                
                try
                {
                    if (audioResampler != null)
                    {
                        audioResampler.Dispose();
                        audioResampler = null;
                        LogMessage("üîá AudioResampler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AudioResampler: {ex.Message}");
                }
                
                // 6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –æ—Ç–ø–∏—Å–∫–æ–π –æ—Ç —Å–æ–±—ã—Ç–∏–π
                try
                {
                    if (wasapiCapture != null)
                    {
                        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
                        try
                        {
                            wasapiCapture.DataAvailable -= OnAudioDataAvailable;
                            LogMessage("üîå WASAPI —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
                        }
                        catch (Exception eventEx)
                        {
                            LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ WASAPI —Å–æ–±—ã—Ç–∏–π: {eventEx.Message}");
                        }
                        
                        wasapiCapture.StopRecording();
                        wasapiCapture.Dispose();
                        wasapiCapture = null;
                        LogMessage("üîá WASAPI –∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WASAPI: {ex.Message}");
                    wasapiCapture = null; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º
                }
                
                try
                {
                    if (waveInCapture != null)
                    {
                        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
                        try
                        {
                            waveInCapture.DataAvailable -= OnAudioDataAvailable;
                            LogMessage("üîå WaveIn —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
                        }
                        catch (Exception eventEx)
                        {
                            LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ WaveIn —Å–æ–±—ã—Ç–∏–π: {eventEx.Message}");
                        }
                        
                        waveInCapture.StopRecording();
                        waveInCapture.Dispose();
                        waveInCapture = null;
                        LogMessage("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {ex.Message}");
                    waveInCapture = null; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º
                }
                
                // 7. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
                GC.Collect();
                GC.WaitForPendingFinalizers();
                
                // 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                Invoke(() => {
                    btnStartCapture.Enabled = true;
                    btnStopCapture.Enabled = false;
                    lblStatus.Text = "üîá –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
                    lblStatus.ForeColor = Color.Red;
                    progressAudioLevel.Value = 0;
                    lblAudioLevel.Text = "üìä –£—Ä–æ–≤–µ–Ω—å: 0%";
                    txtRecognizedText.Text = "‚èπÔ∏è –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
                    txtTranslatedText.Text = "‚èπÔ∏è –û—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã";
                });
                
                LogMessage("‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –û–°–¢–ê–ù–û–í–õ–ï–ù–ê –ò –û–ß–ò–©–ï–ù–ê");
                LogMessage("üîÑ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {ex.Message}");
                
                // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                try
                {
                    isCapturing = false;
                    isCollectingAudio = false;
                    audioBuffer.Clear();
                    wasapiCapture?.Dispose();
                    waveInCapture?.Dispose();
                    wasapiCapture = null;
                    waveInCapture = null;
                    
                    Invoke(() => {
                        btnStartCapture.Enabled = true;
                        btnStopCapture.Enabled = false;
                        lblStatus.Text = "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏";
                        lblStatus.ForeColor = Color.Red;
                    });
                }
                catch
                {
                    // –ï—Å–ª–∏ –¥–∞–∂–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    LogMessage("üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã");
                }
            }
        }

        /// <summary>
        /// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π)
        /// </summary>
        private void EmergencyStop()
        {
            try
            {
                LogMessage("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í!");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
                isCapturing = false;
                isCollectingAudio = false;
                isStreamingMode = false;
                
                // –û—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
                audioBuffer.Clear();
                
                // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SmartAudioManager
                try 
                { 
                    smartAudioManager?.EmergencyStop(); 
                    LogMessage("‚úÖ SmartAudioManager —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                } 
                catch (Exception ex) 
                { 
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SmartAudioManager: {ex.Message}"); 
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                try { wasapiCapture?.StopRecording(); } catch { }
                try { wasapiCapture?.Dispose(); } catch { }
                try { waveInCapture?.StopRecording(); } catch { }
                try { waveInCapture?.Dispose(); } catch { }
                wasapiCapture = null;
                waveInCapture = null;
                
                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö TTS
                try { speechSynthesizer?.SpeakAsyncCancelAll(); } catch { }
                
                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
                try { audioLevelTimer?.Stop(); } catch { }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.Collect();
                
                LogMessage("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                LogMessage($"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        /// </summary>
        private void ResetSystemToInitialState()
        {
            try
            {
                LogMessage("üîÑ –°–ë–†–û–° –°–ò–°–¢–ï–ú–´ –ö –ù–ê–ß–ê–õ–¨–ù–û–ú–£ –°–û–°–¢–û–Ø–ù–ò–Æ...");
                
                // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                EmergencyStop();
                
                // –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
                currentAudioLevel = 0f;
                lastVoiceActivity = DateTime.Now;
                recordingStartTime = DateTime.Now;
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                Invoke(() => {
                    btnStartCapture.Enabled = true;
                    btnStopCapture.Enabled = false;
                    lblStatus.Text = "üîÑ –°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞";
                    lblStatus.ForeColor = Color.Green;
                    progressAudioLevel.Value = 0;
                    lblAudioLevel.Text = "üìä –£—Ä–æ–≤–µ–Ω—å: 0%";
                    txtRecognizedText.Text = "üîÑ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É";
                    txtTranslatedText.Text = "üîÑ –°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞";
                    progressBar.Visible = false;
                });
                
                LogMessage("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {ex.Message}");
            }
        }

        private async void OnAudioDataAvailable(object? sender, WaveInEventArgs e)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –Ω–µ –±—ã–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞
            if (IsDisposed || !IsHandleCreated || isDisposed)
            {
                return; // –§–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
            }
            
            if (!isCapturing) 
            {
                LogMessage("‚ö†Ô∏è OnAudioDataAvailable: isCapturing=false, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ");
                return;
            }

            // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ù–ï –ò–ì–ù–û–†–ò–†–£–ï–ú –†–ï–ß–¨ –°–û–ë–ï–°–ï–î–ù–ò–ö–ê –í–û –í–†–ï–ú–Ø TTS
            // –í–æ –≤—Ä–µ–º—è TTS –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (isTTSActive || (speechSynthesizer?.State == System.Speech.Synthesis.SynthesizerState.Speaking))
            {
                if (smartAudioManager != null)
                {
                    // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
                    byte[] currentAudio = new byte[e.BytesRecorded];
                    Array.Copy(e.Buffer, currentAudio, e.BytesRecorded);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ TTS
                    smartAudioManager.QueueAudioSegment(currentAudio, DateTime.Now, "tts_period");
                    
                    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –µ—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å
                    if (isCollectingAudio && audioBuffer.Count > 0)
                    {
                        byte[] bufferedAudio = audioBuffer.ToArray();
                        smartAudioManager.QueueAudioSegment(bufferedAudio, DateTime.Now, "tts_buffered");
                        audioBuffer.Clear();
                        isCollectingAudio = false;
                    }
                }
                return; // –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            }

            try
            {
                // Calculate audio level (32-bit float for speakers)
                float level = CalculateAudioLevel(e.Buffer, e.BytesRecorded);
                currentAudioLevel = level;

                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 5 —É—Ä–æ–≤–Ω–µ–π –∑–≤—É–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if (audioLogCount < 5)
                {
                    LogMessage($"üîä –ê—É–¥–∏–æ—É—Ä–æ–≤–µ–Ω—å #{audioLogCount + 1}: {level:F3} (–ø–æ—Ä–æ–≥: {voiceThreshold:F3})");
                    audioLogCount++;
                }

                // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê VAD –ö–ê–ö –î–õ–Ø –ú–ò–ö–†–û–§–û–ù–ê
                bool isVoiceDetected = level > voiceThreshold;

                if (isVoiceDetected)
                {
                    if (!isCollectingAudio)
                    {
                        isCollectingAudio = true;
                        audioBuffer.Clear();
                        recordingStartTime = DateTime.Now;
                        LogMessage($"üîä –ù–∞—á–∞—Ç –∑–∞—Ö–≤–∞—Ç —Ä–µ—á–∏ —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤ (—É—Ä–æ–≤–µ–Ω—å: {level:F3})");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üîä –ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–µ—á—å —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤...";
                            progressBar.Visible = true;
                        });
                    }
                    
                    lastVoiceActivity = DateTime.Now;
                }

                if (isCollectingAudio)
                {
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å (32-bit float –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–æ–≤)
                    audioBuffer.AddRange(e.Buffer.Take(e.BytesRecorded));
                    
                    // Check for max recording time
                    var recordingDuration = DateTime.Now - recordingStartTime;
                    if (recordingDuration.TotalMilliseconds > maxRecordingMs)
                    {
                        isCollectingAudio = false;
                        LogMessage($"‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º {maxRecordingMs}–º—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)");
                        
                        if (audioBuffer.Count > 16000)
                        {
                            LogMessage($"‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤ (–¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                            
                            Invoke(() => {
                                txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤...";
                            });
                            
                            await ProcessAudioDataInternal(audioBuffer.ToArray());
                        }
                        else
                        {
                            LogMessage("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤");
                            audioBuffer.Clear();
                            
                            Invoke(() => {
                                txtRecognizedText.Text = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤";
                                progressBar.Visible = false;
                            });
                        }
                        return;
                    }

                    // Check for silence duration
                    var silenceDuration = DateTime.Now - lastVoiceActivity;
                    if (silenceDuration.TotalMilliseconds > silenceDurationMs)
                    {
                        isCollectingAudio = false;
                        LogMessage($"üîá –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞ –≤ —Ä–µ—á–∏ —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤ ({silenceDuration.TotalMilliseconds:F0}–º—Å)");
                        
                        if (audioBuffer.Count > 8000) // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        {
                            LogMessage($"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤ (–¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                            
                            Invoke(() => {
                                txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤...";
                            });
                            
                            await ProcessAudioDataInternal(audioBuffer.ToArray());
                        }
                        else
                        {
                            LogMessage("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤");
                            audioBuffer.Clear();
                            
                            Invoke(() => {
                                txtRecognizedText.Text = "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤";
                                progressBar.Visible = false;
                            });
                        }
                    }
                }

                // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º, —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                if (currentProcessingMode == 1 && streamingProcessor != null && isVoiceDetected)
                {
                    ProcessStreamingAudio(e.Buffer, e.BytesRecorded, level);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {ex.Message}");
            }
        }
        
        private void ProcessStreamingAudio(byte[] buffer, int bytesRecorded, float level)
        {
            try
            {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Å—ç–º–ø–ª–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (audioResampler == null)
                {
                    var currentWaveFormat = wasapiCapture?.WaveFormat ?? new WaveFormat(44100, 16, 2);
                    audioResampler = new AudioResampler(currentWaveFormat.SampleRate, currentWaveFormat.Channels);
                    LogMessage($"üîß –†–µ—Å—ç–º–ø–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {currentWaveFormat.SampleRate}Hz, {currentWaveFormat.Channels}ch");
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º byte array –≤ float array –∏ —Ä–µ—Å—ç–º–ø–ª–∏—Ä—É–µ–º
                var processingWaveFormat = wasapiCapture?.WaveFormat ?? new WaveFormat(44100, 16, 2);
                var resampledAudio = audioResampler.ResampleFromBytes(buffer.Take(bytesRecorded).ToArray(), processingWaveFormat);
                
                if (resampledAudio.Length > 0)
                {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                    streamingProcessor?.AddAudioSamples(resampledAudio);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    totalProcessedFrames++;
                    if (totalProcessedFrames % 10 == 0) // –ö–∞–∂–¥—ã–µ 10 —Ñ—Ä–µ–π–º–æ–≤
                    {
                        Invoke(() => {
                            txtRecognizedText.Text = $"üåä –°—Ç—Ä–∏–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω (—É—Ä–æ–≤–µ–Ω—å: {level:F3})";
                            progressBar.Visible = false;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: {ex.Message}");
            }
        }
        
        private void ProcessOriginalModeAudio(byte[] buffer, int bytesRecorded, float level)
        {
            // Voice activity detection
            bool isVoiceDetected = level > voiceThreshold;

            if (isVoiceDetected)
            {
                if (!isCollectingAudio)
                {
                    isCollectingAudio = true;
                    audioBuffer.Clear();
                    recordingStartTime = DateTime.Now; // –ó–∞–ø–æ–º–Ω–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
                    LogMessage($"üé§ –ù–∞—á–∞—Ç –∑–∞—Ö–≤–∞—Ç —Ä–µ—á–∏ (—É—Ä–æ–≤–µ–Ω—å: {level:F3})");
                    
                    Invoke(() => {
                        txtRecognizedText.Text = "üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–µ—á—å...";
                        progressBar.Visible = true;
                    });
                }

                // Check for max recording time FIRST (–¥–∞–∂–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∑–≤—É–∫–µ)
                var recordingDuration = DateTime.Now - recordingStartTime;
                if (recordingDuration.TotalMilliseconds > maxRecordingMs)
                {
                    isCollectingAudio = false;
                    LogMessage($"‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (–º–∞–∫—Å–∏–º—É–º {maxRecordingMs}–º—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)");
                    
                    if (audioBuffer.Count > 16000)
                    {
                        LogMessage($"‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...";
                        });
                        
                        byte[] recordedAudio = audioBuffer.ToArray();
                        _ = Task.Run(() => ProcessAudioDataInternal(recordedAudio));
                    }
                    
                    Invoke(() => {
                        progressBar.Visible = false;
                    });
                    return;
                }

                // Add audio data to buffer
                byte[] audioData = new byte[bytesRecorded];
                Array.Copy(buffer, audioData, bytesRecorded);
                audioBuffer.AddRange(audioData);
                
                lastVoiceActivity = DateTime.Now;
            }
            else if (isCollectingAudio)
            {
                // Check for max recording time
                var recordingDuration = DateTime.Now - recordingStartTime;
                if (recordingDuration.TotalMilliseconds > maxRecordingMs)
                {
                    isCollectingAudio = false;
                    LogMessage($"‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (–º–∞–∫—Å–∏–º—É–º {maxRecordingMs}–º—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)");
                    
                    if (audioBuffer.Count > 16000)
                    {
                        LogMessage($"‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...";
                        });
                        
                        byte[] timeoutAudio = audioBuffer.ToArray();
                        _ = Task.Run(() => ProcessAudioDataInternal(timeoutAudio));
                    }
                    
                    Invoke(() => {
                        progressBar.Visible = false;
                    });
                    return;
                }
                
                // Check for silence timeout
                var silenceDuration = DateTime.Now - lastVoiceActivity;
                if (silenceDuration.TotalMilliseconds > silenceDurationMs)
                {
                    isCollectingAudio = false;
                    
                    if (audioBuffer.Count > 16000) // Minimum audio data
                    {
                        LogMessage($"‚èπÔ∏è –ö–æ–Ω–µ—Ü —Ä–µ—á–∏ (—Ç–∏—à–∏–Ω–∞: {silenceDuration.TotalMilliseconds:F0}–º—Å, –¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...";
                        });
                        
                        // Process collected audio in background
                        var audioDataCopy = audioBuffer.ToArray();
                        Task.Run(() => ProcessAudioDataInternal(audioDataCopy));
                    }
                    
                    audioBuffer.Clear();
                }
            }
        }

        private void OnRecordingStopped(object? sender, StoppedEventArgs e)
        {
            if (e.Exception != null)
            {
                LogMessage($"‚ùå –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {e.Exception.Message}");
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        private void OnMicrophoneDataAvailable(object? sender, WaveInEventArgs e)
        {
            if (!isCapturing) return;

            // –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ò–ö–†–û–§–û–ù–ê: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å –≤–æ –≤—Ä–µ–º—è TTS
            // (–ú–∏–∫—Ä–æ—Ñ–æ–Ω = –Ω–∞—à–∞ —Ä–µ—á—å, –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –Ω–∞—à–µ–≥–æ –∂–µ TTS)
            if (isTTSActive || (speechSynthesizer?.State == System.Speech.Synthesis.SynthesizerState.Speaking))
            {
                return; // –ü—Ä–æ—Å—Ç–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è TTS
            }

            try
            {
                // Calculate audio level for 16-bit samples from microphone
                float level = CalculateMicrophoneLevel(e.Buffer, e.BytesRecorded);
                currentAudioLevel = level;

                // Voice activity detection
                bool isVoiceDetected = level > voiceThreshold;

                if (isVoiceDetected)
                {
                    if (!isCollectingAudio)
                    {
                        isCollectingAudio = true;
                        audioBuffer.Clear();
                        recordingStartTime = DateTime.Now;
                        LogMessage($"üé§ –ù–∞—á–∞—Ç –∑–∞—Ö–≤–∞—Ç —Ä–µ—á–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (—É—Ä–æ–≤–µ–Ω—å: {level:F3})");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–µ—á—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...";
                            progressBar.Visible = true;
                        });
                    }
                    
                    lastVoiceActivity = DateTime.Now;
                }

                if (isCollectingAudio)
                {
                    // Convert 16-bit to 32-bit float for consistency
                    byte[] convertedBuffer = ConvertMicrophoneData(e.Buffer, e.BytesRecorded);
                    audioBuffer.AddRange(convertedBuffer);
                    
                    // Check for max recording time
                    var recordingDuration = DateTime.Now - recordingStartTime;
                    if (recordingDuration.TotalMilliseconds > maxRecordingMs)
                    {
                        isCollectingAudio = false;
                        LogMessage($"‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º {maxRecordingMs}–º—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)");
                        
                        if (audioBuffer.Count > 16000)
                        {
                            LogMessage($"‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                            
                            Invoke(() => {
                                txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...";
                            });
                            
                            byte[] timeoutAudio = audioBuffer.ToArray();
                            _ = Task.Run(() => ProcessAudioDataInternal(timeoutAudio));
                        }
                        
                        Invoke(() => {
                            progressBar.Visible = false;
                        });
                        return;
                    }
                    
                    // Check for silence timeout
                    var silenceDuration = DateTime.Now - lastVoiceActivity;
                    if (silenceDuration.TotalMilliseconds > silenceDurationMs)
                    {
                        isCollectingAudio = false;
                        
                        if (audioBuffer.Count > 16000)
                        {
                            LogMessage($"‚èπÔ∏è –ö–æ–Ω–µ—Ü —Ä–µ—á–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (—Ç–∏—à–∏–Ω–∞: {silenceDuration.TotalMilliseconds:F0}–º—Å, –¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                            
                            Invoke(() => {
                                txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...";
                            });
                            
                            byte[] silenceAudio = audioBuffer.ToArray();
                            _ = Task.Run(() => ProcessAudioDataInternal(silenceAudio));
                        }
                        
                        Invoke(() => {
                            progressBar.Visible = false;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {ex.Message}");
            }
        }

        private void OnMicrophoneRecordingStopped(object? sender, StoppedEventArgs e)
        {
            if (e.Exception != null)
            {
                LogMessage($"‚ùå –ó–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {e.Exception.Message}");
            }
        }

        private float CalculateMicrophoneLevel(byte[] buffer, int bytesRecorded)
        {
            if (bytesRecorded == 0) return 0f;

            float sum = 0f;
            int sampleCount = 0;

            // Process 16-bit samples from microphone
            for (int i = 0; i < bytesRecorded - 1; i += 2)
            {
                short sample = BitConverter.ToInt16(buffer, i);
                float normalizedSample = sample / 32768.0f; // Normalize to [-1, 1]
                sum += Math.Abs(normalizedSample);
                sampleCount++;
            }

            float avgLevel = sampleCount > 0 ? sum / sampleCount : 0f;
            
            // Amplify the level for better visualization
            return avgLevel * 5f;
        }

        private byte[] ConvertMicrophoneData(byte[] buffer, int bytesRecorded)
        {
            // Convert 16-bit samples to 32-bit float
            List<byte> converted = new List<byte>();
            
            for (int i = 0; i < bytesRecorded - 1; i += 2)
            {
                short sample = BitConverter.ToInt16(buffer, i);
                float floatSample = sample / 32768.0f; // Normalize to [-1, 1]
                byte[] floatBytes = BitConverter.GetBytes(floatSample);
                converted.AddRange(floatBytes);
            }
            
            return converted.ToArray();
        }

        private float CalculateAudioLevel(byte[] buffer, int bytesRecorded)
        {
            if (bytesRecorded == 0) return 0f;

            float sum = 0f;
            int sampleCount = 0;

            // Assuming 32-bit float samples
            for (int i = 0; i < bytesRecorded - 3; i += 4)
            {
                float sample = BitConverter.ToSingle(buffer, i);
                sum += Math.Abs(sample);
                sampleCount++;
            }

            float avgLevel = sampleCount > 0 ? sum / sampleCount : 0f;
            
            // Amplify the level for better visualization (multiply by 10)
            return avgLevel * 10f;
        }

        private void AudioLevelTimer_Tick(object? sender, EventArgs e)
        {
            if (isCapturing)
            {
                int percentage = (int)(currentAudioLevel * 100);
                percentage = Math.Min(100, percentage);
                
                progressAudioLevel.Value = percentage;
                lblAudioLevel.Text = $"üìä –£—Ä–æ–≤–µ–Ω—å: {percentage}%";
                lblAudioLevel.ForeColor = percentage > (voiceThreshold * 100) ? Color.Green : Color.Gray;
            }
        }

        #endregion

        #region STT Processing

        private async Task ProcessAudioDataInternal(byte[] audioData)
        {
            try
            {
                // üîß –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                const int MIN_AUDIO_SIZE = 16000; // 16KB –º–∏–Ω–∏–º—É–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã–ª–æ 64KB)
                
                if (audioData.Length < MIN_AUDIO_SIZE)
                {
                    LogMessage($"‚ö†Ô∏è –ê—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {audioData.Length} –±–∞–π—Ç < {MIN_AUDIO_SIZE} –±–∞–π—Ç");
                    
                    Invoke(() => {
                        txtRecognizedText.Text = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è";
                        progressBar.Visible = false;
                    });
                    
                    return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                }
                
                LogMessage($"üéØ –ù–∞—á–∞–ª–æ STT –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({audioData.Length} –±–∞–π—Ç)");
                
                // Convert to WAV format for Whisper
                var wavData = ConvertToWav(audioData);
                LogMessage($"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV: {wavData.Length} –±–∞–π—Ç");

                // Perform STT with Whisper.NET
                string recognizedText = await PerformWhisperSTT(wavData);
                
                if (!string.IsNullOrEmpty(recognizedText) && IsValidSpeech(recognizedText))
                {
                    LogMessage($"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: '{recognizedText}'");
                    
                    Invoke(() => {
                        txtRecognizedText.Text = recognizedText;
                        progressBar.Visible = false;
                    });

                    // Auto-translate if enabled
                    if (chkAutoTranslate.Checked)
                    {
                        await TranslateAndSpeak(recognizedText);
                    }
                }
                else
                {
                    DebugLogSpeechValidation("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞");
                    Invoke(() => {
                        txtRecognizedText.Text = "‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω";
                        progressBar.Visible = false;
                    });
                }
                
                // Reset capture state for continuous listening
                isCollectingAudio = false;
                audioBuffer.Clear();
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ STT –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex.Message}");
                Invoke(() => {
                    txtRecognizedText.Text = $"‚ùå –û—à–∏–±–∫–∞: {ex.Message}";
                    progressBar.Visible = false;
                });
                
                // Reset capture state even on error
                isCollectingAudio = false;
                audioBuffer.Clear();
            }
        }

        private async Task<string> PerformWhisperSTT(byte[] wavData)
        {
            try
            {
                LogMessage("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper.NET...");
                
                // Create temporary WAV file
                string tempFile = Path.GetTempFileName();
                await File.WriteAllBytesAsync(tempFile, wavData);
                
                try
                {
                    using var whisperFactory = WhisperFactory.FromPath(WhisperModelPath);
                    using var processor = whisperFactory.CreateBuilder()
                        .WithLanguage("auto") // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
                        .WithPrompt("This is human speech") // –§–æ–∫—É—Å –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Ä–µ—á–∏
                        .WithProbabilities() // –í–∫–ª—é—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                        .WithTemperature(0.0f) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        .Build();

                    LogMessage("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper...");
                    
                    using var fileStream = File.OpenRead(tempFile);
                    var result = new StringBuilder();
                    
                    await foreach (var segment in processor.ProcessAsync(fileStream))
                    {
                        LogMessage($"üéØ Whisper —Å–µ–≥–º–µ–Ω—Ç: '{segment.Text}'");
                        
                        if (!string.IsNullOrWhiteSpace(segment.Text))
                        {
                            string cleanText = segment.Text.Trim();
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                            if (!IsPlaceholderToken(cleanText))
                            {
                                result.Append(cleanText + " ");
                            }
                            else
                            {
                                DebugLogSpeechValidation($"üö´ –ü—Ä–æ–ø—É—â–µ–Ω —Å–µ–≥–º–µ–Ω—Ç-–∑–∞–≥–ª—É—à–∫–∞: '{cleanText}'");
                            }
                        }
                    }
                    
                    return result.ToString().Trim();
                }
                finally
                {
                    // Clean up temp file
                    try { File.Delete(tempFile); } catch { }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ Whisper.NET: {ex.Message}");
                return string.Empty;
            }
        }

        private bool IsValidSpeech(string text)
        {
            // üöÄ –ù–û–í–´–ô –ü–†–û–î–í–ò–ù–£–¢–´–ô –§–ò–õ–¨–¢–† –∏–∑ MORT —Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            DebugLogSpeechValidation($"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏: '{text}'");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            bool isEuropeanValid = EuropeanLanguageFilter.IsValidEuropeanSpeech(text);
            bool hasExtremeDuplication = AdvancedSpeechFilter.HasExtremeDuplication(text);
            
            DebugLogSpeechValidation($"üìä –§–∏–ª—å—Ç—Ä: EuropeanValid={isEuropeanValid}, ExtremeDuplication={hasExtremeDuplication}");
            
            bool finalResult = isEuropeanValid && !hasExtremeDuplication;
            DebugLogSpeechValidation($"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {finalResult}");
            
            return finalResult;
        }

        private bool IsPlaceholderToken(string text)
        {
            // üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä —Å debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            DebugLogSpeechValidation($"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫—É: '{text}'");
            
            bool isValid = EuropeanLanguageFilter.IsValidEuropeanSpeech(text);
            bool isPlaceholder = !isValid;
            
            DebugLogSpeechValidation($"üìä –ó–∞–≥–ª—É—à–∫–∞: IsValid={isValid}, IsPlaceholder={isPlaceholder}");
            
            return isPlaceholder;
        }

        private byte[] ConvertToWav(byte[] audioData)
        {
            try
            {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 32-bit float 44100Hz mono
                // Whisper.NET —Ç—Ä–µ–±—É–µ—Ç 16kHz 16-bit mono WAV
                
                const int targetSampleRate = 16000;
                const int sourceSampleRate = 44100; // –ò—Å—Ö–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ WASAPI
                const int channels = 1;
                const int bitsPerSample = 16;
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float32 –≤ int16 —Å —Ä–µ—Å–∞–º–ø–ª–∏–Ω–≥–æ–º
                var samples = new List<short>();
                
                // –ü—Ä–æ—Å—Ç–æ–π downsampling: –±–µ—Ä–µ–º –∫–∞–∂–¥—ã–π (44100/16000) ‚âà 2.75-–π —Å–µ–º–ø–ª
                float ratio = (float)sourceSampleRate / targetSampleRate;
                
                for (int i = 0; i < audioData.Length - 3; i += 4)
                {
                    float floatSample = BitConverter.ToSingle(audioData, i);
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 16-bit
                    floatSample = Math.Max(-1.0f, Math.Min(1.0f, floatSample));
                    short intSample = (short)(floatSample * 32767f);
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π downsampling
                    if (samples.Count < (i / 4) / ratio)
                    {
                        samples.Add(intSample);
                    }
                }
                
                // –°–æ–∑–¥–∞–µ–º WAV —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                var wav = new List<byte>();
                
                // RIFF header
                wav.AddRange(Encoding.ASCII.GetBytes("RIFF"));
                wav.AddRange(BitConverter.GetBytes(36 + samples.Count * 2)); // File size - 8
                wav.AddRange(Encoding.ASCII.GetBytes("WAVE"));
                
                // fmt chunk
                wav.AddRange(Encoding.ASCII.GetBytes("fmt "));
                wav.AddRange(BitConverter.GetBytes(16)); // PCM chunk size
                wav.AddRange(BitConverter.GetBytes((short)1)); // PCM format
                wav.AddRange(BitConverter.GetBytes((short)channels)); // Mono
                wav.AddRange(BitConverter.GetBytes(targetSampleRate)); // 16kHz
                wav.AddRange(BitConverter.GetBytes(targetSampleRate * channels * bitsPerSample / 8)); // Byte rate
                wav.AddRange(BitConverter.GetBytes((short)(channels * bitsPerSample / 8))); // Block align
                wav.AddRange(BitConverter.GetBytes((short)bitsPerSample)); // 16-bit
                
                // data chunk
                wav.AddRange(Encoding.ASCII.GetBytes("data"));
                wav.AddRange(BitConverter.GetBytes(samples.Count * 2)); // Data size
                
                // Audio data
                foreach (var sample in samples)
                {
                    wav.AddRange(BitConverter.GetBytes(sample));
                }
                
                return wav.ToArray();
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WAV: {ex.Message}");
                return audioData; // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
        }

        #endregion

        #region Translation & TTS

        private async Task TranslateAndSpeak(string text)
        {
            try
            {
                string sourceLang = "";
                string targetLang = "";
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ UI –ø–æ—Ç–æ–∫–∞
                Invoke(() => {
                    sourceLang = GetLanguageCode(cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
                    targetLang = GetLanguageCode(cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π");
                });
                
                LogMessage($"üåê –ü–µ—Ä–µ–≤–æ–¥: {sourceLang} ‚Üí {targetLang}");
                
                Invoke(() => {
                    txtTranslatedText.Text = "üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º...";
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                if (SmartTextSplitter.ShouldSplit(text))
                {
                    LogMessage($"üìù –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ({text.Length} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è");
                    await TranslateTextInSentences(text, sourceLang, targetLang);
                }
                else
                {
                    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    string translatedText = await TranslateText(text, sourceLang, targetLang);
                    
                    if (!string.IsNullOrEmpty(translatedText))
                    {
                        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        string qualityInfo = AnalyzeTranslationQuality(text, translatedText);
                        LogMessage($"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ{qualityInfo}: '{translatedText}'");
                        
                        Invoke(() => {
                            txtTranslatedText.Text = translatedText;
                        });
                        
                        // Speak translated text
                        await SpeakText(translatedText);
                    }
                    else
                    {
                        LogMessage("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è");
                        Invoke(() => {
                            txtTranslatedText.Text = "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞";
                        });
                    }
                }
            }
            catch (OperationCanceledException)
            {
                LogMessage("üõë –û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞/–æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                Invoke(() => {
                    txtTranslatedText.Text = "üõë –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞";
                });
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
                Invoke(() => {
                    txtTranslatedText.Text = $"‚ùå –û—à–∏–±–∫–∞: {ex.Message}";
                });
            }
        }

        /// <summary>
        /// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        /// </summary>
        private async Task TranslateTextInSentences(string text, string sourceLang, string targetLang)
        {
            try
            {
                // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                var sentences = SmartTextSplitter.SplitIntoSentences(text);
                SmartTextSplitter.SplitStats.LogSplitResults(text, sentences);

                var translatedParts = new List<string>();
                
                Invoke(() => {
                    txtTranslatedText.Text = $"üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º {sentences.Count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...";
                });

                // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                for (int i = 0; i < sentences.Count; i++)
                {
                    string sentence = sentences[i].Trim();
                    
                    if (string.IsNullOrWhiteSpace(sentence))
                        continue;

                    LogMessage($"üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {i + 1}/{sentences.Count}: '{sentence.Substring(0, Math.Min(50, sentence.Length))}{(sentence.Length > 50 ? "..." : "")}'");

                    Invoke(() => {
                        txtTranslatedText.Text = $"üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º {i + 1}/{sentences.Count}: {sentence.Substring(0, Math.Min(30, sentence.Length))}{(sentence.Length > 30 ? "..." : "")}";
                    });

                    try
                    {
                        string partResult = await TranslateText(sentence, sourceLang, targetLang);
                        
                        if (!string.IsNullOrEmpty(partResult) && !partResult.Contains("‚ùå"))
                        {
                            translatedParts.Add(partResult.Trim());
                            LogMessage($"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {i + 1} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: '{partResult.Substring(0, Math.Min(50, partResult.Length))}{(partResult.Length > 50 ? "..." : "")}'");
                        }
                        else
                        {
                            LogMessage($"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {i + 1} –Ω–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª");
                            translatedParts.Add(sentence); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
                        }

                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
                        await Task.Delay(200);
                    }
                    catch (Exception partEx)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {i + 1}: {partEx.Message}");
                        translatedParts.Add(sentence); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    }
                }

                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
                string finalTranslation = string.Join(" ", translatedParts.Where(p => !string.IsNullOrWhiteSpace(p)));

                if (!string.IsNullOrEmpty(finalTranslation))
                {
                    LogMessage($"‚úÖ –°–æ—Å—Ç–∞–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: {finalTranslation.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                    
                    Invoke(() => {
                        txtTranslatedText.Text = finalTranslation;
                    });
                    
                    // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    await SpeakText(finalTranslation);
                }
                else
                {
                    LogMessage("‚ùå –°–æ—Å—Ç–∞–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è");
                    Invoke(() => {
                        txtTranslatedText.Text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞";
                    });
                }
            }
            catch (OperationCanceledException)
            {
                LogMessage("üõë –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞/–æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                Invoke(() => {
                    txtTranslatedText.Text = "üõë –°–æ—Å—Ç–∞–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞";
                });
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º: {ex.Message}");
                Invoke(() => {
                    txtTranslatedText.Text = $"‚ùå –û—à–∏–±–∫–∞: {ex.Message}";
                });
            }
        }

        private async Task<string> TranslateText(string text, string sourceLang, string targetLang)
        {
            try
            {
                if (googleTranslateClient == null) return string.Empty;
                
                // üìö –£–ú–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê –ù–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ MORT)
                // ‚ö†Ô∏è –í–ê–ñ–ù–û: Whisper.NET —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —ç—Ç–æ –Ω–µ–¥–µ–ª–∏–º—ã–µ —Å–º—ã—Å–ª–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã, –∏—Ö –Ω–µ–ª—å–∑—è —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –æ—Ç Whisper
                var sentenceEndings = new char[] { '.', '!', '?' };
                int sentenceCount = text.Split(sentenceEndings, StringSplitOptions.RemoveEmptyEntries).Length;
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è:
                // 1. –î–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ (>500 —Å–∏–º–≤–æ–ª–æ–≤) 
                // 2. –°–æ–¥–µ—Ä–∂–∞—â–∏—Ö 3+ –ø–æ–ª–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                // 3. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                bool shouldUseSplitting = text.Length > 500 && sentenceCount >= 3;
                
                if (shouldUseSplitting)
                {
                    LogMessage($"üìñ –î–ª–∏–Ω–Ω—ã–π –º–Ω–æ–≥–æ–ø—Ä–µ–¥–ª–æ–∂–µ–Ω—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç ({text.Length} —Å–∏–º–≤–æ–ª–æ–≤, {sentenceCount} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã");
                    
                    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä—É–ø–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    Func<string, string, string, Task<string>> translateFunction = async (sentenceGroup, srcLang, tgtLang) =>
                    {
                        return await TranslateSingleTextPart(sentenceGroup, srcLang, tgtLang);
                    };
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartTextSplitter –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    return await SmartTextSplitter.TranslateLongTextInParts(text, translateFunction, sourceLang, targetLang);
                }
                
                // –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                LogMessage($"üìù –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {text.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                return await TranslateSingleTextPart(text, sourceLang, targetLang);
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –≤ TranslateText: {ex.Message}");
                return string.Empty;
            }
        }

        /// <summary>
        /// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (–∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        /// </summary>
        private async Task<string> TranslateSingleTextPart(string text, string sourceLang, string targetLang)
        {
            try
            {
                if (googleTranslateClient == null) return string.Empty;
                
                // Use Google Translate API (public endpoint)
                var request = new RestRequest("translate_a/single", Method.Get);
                request.AddParameter("client", "gtx");
                request.AddParameter("sl", sourceLang);
                request.AddParameter("tl", targetLang);
                request.AddParameter("dt", "t");
                request.AddParameter("q", text);
                request.AddParameter("ie", "UTF-8");
                request.AddParameter("oe", "UTF-8");
                
                var response = await googleTranslateClient.ExecuteAsync(request);
                
                if (response.IsSuccessful && !string.IsNullOrEmpty(response.Content))
                {
                    LogMessage($"üîç Google Translate –æ—Ç–≤–µ—Ç: {response.Content.Substring(0, Math.Min(200, response.Content.Length))}...");
                    
                    // Parse Google Translate response - —Å–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–µ–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
                    try
                    {
                        // Google –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤, –≥–¥–µ [0] —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
                        var jsonArray = JsonConvert.DeserializeObject<dynamic>(response.Content);
                        
                        if (jsonArray is Newtonsoft.Json.Linq.JArray outerArray && outerArray.Count > 0)
                        {
                            var firstGroup = outerArray[0];
                            if (firstGroup is Newtonsoft.Json.Linq.JArray firstArray && firstArray.Count > 0)
                            {
                                var translatedSegments = new List<string>();
                                
                                // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–µ–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
                                foreach (var segment in firstArray)
                                {
                                    if (segment is Newtonsoft.Json.Linq.JArray segmentArray && segmentArray.Count > 0)
                                    {
                                        string segmentText = segmentArray[0]?.ToString() ?? "";
                                        if (!string.IsNullOrEmpty(segmentText) && segmentText.Trim() != "")
                                        {
                                            translatedSegments.Add(segmentText);
                                            LogMessage($"üß© –°–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞: '{segmentText}'");
                                        }
                                    }
                                }
                                
                                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                                if (translatedSegments.Count > 0)
                                {
                                    string fullTranslation = string.Join("", translatedSegments);
                                    LogMessage($"‚úÖ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ {translatedSegments.Count} —Å–µ–≥–º–µ–Ω—Ç–æ–≤: '{fullTranslation}'");
                                    return fullTranslation;
                                }
                            }
                        }
                        
                        LogMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞");
                        return string.Empty;
                    }
                    catch (JsonException jsonEx)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {jsonEx.Message}");
                        
                        // Fallback: —É–ª—É—á—à–µ–Ω–Ω—ã–π regex –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                        var matches = System.Text.RegularExpressions.Regex.Matches(response.Content, @"""([^""]+)"",""[^""]*""");
                        if (matches.Count > 0)
                        {
                            var allSegments = new List<string>();
                            foreach (System.Text.RegularExpressions.Match regexMatch in matches)
                            {
                                if (regexMatch.Groups.Count > 1)
                                {
                                    string segment = regexMatch.Groups[1].Value;
                                    if (!string.IsNullOrEmpty(segment) && segment.Trim() != "")
                                    {
                                        allSegments.Add(segment);
                                        LogMessage($"üß© Regex —Å–µ–≥–º–µ–Ω—Ç: '{segment}'");
                                    }
                                }
                            }
                            
                            if (allSegments.Count > 0)
                            {
                                string combinedResult = string.Join("", allSegments);
                                LogMessage($"‚úÖ Fallback –ø–∞—Ä—Å–∏–Ω–≥ {allSegments.Count} —Å–µ–≥–º–µ–Ω—Ç–æ–≤: '{combinedResult}'");
                                return combinedResult;
                            }
                        }
                        
                        // –ü—Ä–æ—Å—Ç–æ–π fallback –µ—Å–ª–∏ —Å–ª–æ–∂–Ω—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                        var simpleMatch = System.Text.RegularExpressions.Regex.Match(response.Content, @"\[\[\[""([^""]+)""");
                        if (simpleMatch.Success && simpleMatch.Groups.Count > 1)
                        {
                            string simpleResult = simpleMatch.Groups[1].Value;
                            LogMessage($"‚úÖ –ü—Ä–æ—Å—Ç–æ–π fallback –ø–∞—Ä—Å–∏–Ω–≥: '{simpleResult}'");
                            return simpleResult;
                        }
                        
                        return string.Empty;
                    }
                }
                
                LogMessage($"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {response.ErrorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}, StatusCode: {response.StatusCode}");
                return string.Empty;
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
                return string.Empty;
            }
        } // –ö–æ–Ω–µ—Ü TranslateSingleTextPart

        private async Task SpeakText(string text)
        {
            try
            {
                if (speechSynthesizer == null || ttsVoiceManager == null) return;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ TTS –æ–ø–µ—Ä–∞—Ü–∏—è
                if (isTTSActive || speechSynthesizer.State == System.Speech.Synthesis.SynthesizerState.Speaking)
                {
                    LogMessage("‚ö†Ô∏è TTS —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é...");
                    speechSynthesizer.SpeakAsyncCancelAll();
                    await Task.Delay(300); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                await Task.Delay(50);
                
                isTTSActive = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                LogMessage($"üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: '{text}'");
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º SmartAudioManager –æ –Ω–∞—á–∞–ª–µ TTS
                smartAudioManager?.NotifyTTSStarted();
                
                // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–† –ì–û–õ–û–°–ê –ù–ê –û–°–ù–û–í–ï –Ø–ó–´–ö–ê –¢–ï–ö–°–¢–ê
                ttsVoiceManager.SelectVoiceForText(text);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–º–µ–Ω—ã
                var completionSource = new TaskCompletionSource<bool>();
                System.Speech.Synthesis.Prompt prompt = null;
                
                try
                {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º Speak
                    if (speechSynthesizer?.State != System.Speech.Synthesis.SynthesizerState.Ready)
                    {
                        LogMessage("‚ö†Ô∏è –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ");
                        return;
                    }
                    
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ TTS
                    EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs> onCompleted = null;
                    EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs> onProgress = null;
                    
                    onCompleted = (s, e) => {
                        speechSynthesizer.SpeakCompleted -= onCompleted;
                        speechSynthesizer.SpeakProgress -= onProgress;
                        isTTSActive = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        
                        if (e.Cancelled)
                        {
                            LogMessage("üõë TTS –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ");
                            completionSource.SetCanceled();
                        }
                        else if (e.Error != null)
                        {
                            LogMessage($"‚ùå –û—à–∏–±–∫–∞ TTS: {e.Error.Message}");
                            completionSource.SetException(e.Error);
                        }
                        else
                        {
                            completionSource.SetResult(true);
                        }
                    };
                    
                    onProgress = (s, e) => {
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        if (speechSynthesizer?.State == System.Speech.Synthesis.SynthesizerState.Ready)
                        {
                            speechSynthesizer.SpeakAsyncCancelAll();
                        }
                    };
                    
                    speechSynthesizer.SpeakCompleted += onCompleted;
                    speechSynthesizer.SpeakProgress += onProgress;
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
                    prompt = speechSynthesizer.SpeakAsync(text);
                    
                    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
                    await completionSource.Task;
                }
                catch (OperationCanceledException)
                {
                    isTTSActive = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                    LogMessage("üõë TTS –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                    if (prompt != null)
                    {
                        speechSynthesizer?.SpeakAsyncCancel(prompt);
                    }
                    throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ –≤–Ω–µ—à–Ω–µ–º catch
                }
                catch (Exception ex)
                {
                    isTTSActive = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    LogMessage($"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ TTS: {ex.Message}");
                    if (prompt != null)
                    {
                        speechSynthesizer?.SpeakAsyncCancel(prompt);
                    }
                    throw;
                }
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º SmartAudioManager –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ TTS
                smartAudioManager?.NotifyTTSCompleted();
                
                LogMessage("‚úÖ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            }
            catch (OperationCanceledException)
            {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã TTS
                isTTSActive = false; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                smartAudioManager?.NotifyTTSCompleted();
                LogMessage("üõë TTS –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            }
            catch (Exception ex)
            {
                // –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ TTS
                isTTSActive = false; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                smartAudioManager?.NotifyTTSCompleted();
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }

        private string GetLanguageCode(string languageName)
        {
            // –î–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "auto"
            if (languageName == "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                return "auto";
                
            return languageCodes.TryGetValue(languageName, out string? code) ? code : "en";
        }

        #endregion

        #region UI Events

        private async void btnTestTTS_Click(object sender, EventArgs e)
        {
            try
            {
                string testText = "";
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ UI –ø–æ—Ç–æ–∫–∞
                Invoke(() => {
                    testText = cbTargetLang.SelectedItem?.ToString() == "–†—É—Å—Å–∫–∏–π" 
                        ? "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞" 
                        : "Text to speech system test";
                });
                    
                await SpeakText(testText);
            }
            catch (OperationCanceledException)
            {
                LogMessage("üõë –¢–µ—Å—Ç TTS –æ—Ç–º–µ–Ω–µ–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ TTS: {ex.Message}");
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                LogMessage("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                SaveCurrentSettings();
                
                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞
                try
                {
                    StopAudioCapture().Wait(3000); // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
                }
                catch (Exception stopEx)
                {
                    LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {stopEx.Message}");
                }
                
                // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
                speechSynthesizer?.Dispose();
                audioLevelTimer?.Dispose();
                smartAudioManager?.Dispose();
                googleTranslateClient?.Dispose();
                
                LogMessage("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {ex.Message}");
            }
        }

        #endregion

        #region Logging

        private void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
            string logEntry = $"[{timestamp}] {message}";
            
            Debug.WriteLine(logEntry);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –Ω–µ –±—ã–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –∏ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (IsDisposed || !IsHandleCreated)
            {
                return; // –§–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å UI
            }
            
            try
            {
                if (InvokeRequired)
                {
                    Invoke(() => AddLogEntry(logEntry));
                }
                else
                {
                    AddLogEntry(logEntry);
                }
            }
            catch (ObjectDisposedException)
            {
                // –§–æ—Ä–º–∞ –±—ã–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –≤—ã–∑–æ–≤–æ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                Debug.WriteLine($"[{timestamp}] ‚ö†Ô∏è –§–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥: {message}");
            }
            catch (InvalidOperationException)
            {
                // Handle —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                Debug.WriteLine($"[{timestamp}] ‚ö†Ô∏è Handle –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥: {message}");
            }
        }

        private void AddLogEntry(string logEntry)
        {
            txtLogs.AppendText(logEntry + Environment.NewLine);
            txtLogs.SelectionStart = txtLogs.Text.Length;
            txtLogs.ScrollToCaret();
        }

        /// <summary>
        /// üìö –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏
        /// </summary>
        private void ShowAudiobookStatistics()
        {
            try
            {
                if (smartAudioManager != null)
                {
                    string stats = smartAudioManager.GetAudiobookStatistics();
                    LogMessage("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–£–î–ò–û–ö–ù–ò–ì–ò:");
                    
                    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    var lines = stats.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                    foreach (var line in lines)
                    {
                        if (!string.IsNullOrWhiteSpace(line) && !line.Contains("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ñ–ò–ú–ê –ê–£–î–ò–û–ö–ù–ò–ì–ò"))
                        {
                            LogMessage($"   {line.Trim()}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏: {ex.Message}");
            }
        }

        #endregion

        #region Helper Classes

        #region Form Cleanup

        private void Form1_OnFormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                Debug.WriteLine("üîÑ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã...");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
                isCapturing = false;
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º WASAPI –∑–∞—Ö–≤–∞—Ç
                if (wasapiCapture != null)
                {
                    try
                    {
                        wasapiCapture.DataAvailable -= OnAudioDataAvailable;
                        wasapiCapture.StopRecording();
                        wasapiCapture.Dispose();
                        wasapiCapture = null;
                        Debug.WriteLine("‚úÖ WASAPI –∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WASAPI: {ex.Message}");
                    }
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º WaveIn –∑–∞—Ö–≤–∞—Ç
                if (waveInCapture != null)
                {
                    try
                    {
                        waveInCapture.DataAvailable -= OnAudioDataAvailable;
                        waveInCapture.StopRecording();
                        waveInCapture.Dispose();
                        waveInCapture = null;
                        Debug.WriteLine("‚úÖ WaveIn –∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WaveIn: {ex.Message}");
                    }
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if (audioLevelTimer != null)
                {
                    try
                    {
                        audioLevelTimer.Stop();
                        audioLevelTimer.Dispose();
                        audioLevelTimer = null;
                        Debug.WriteLine("‚úÖ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {ex.Message}");
                    }
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS
                if (speechSynthesizer != null)
                {
                    try
                    {
                        speechSynthesizer.SpeakAsyncCancelAll();
                        speechSynthesizer.Dispose();
                        speechSynthesizer = null;
                        Debug.WriteLine("‚úÖ TTS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS: {ex.Message}");
                    }
                }
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º TTS Voice Manager
                if (ttsVoiceManager != null)
                {
                    try
                    {
                        ttsVoiceManager.Dispose();
                        ttsVoiceManager = null;
                        Debug.WriteLine("‚úÖ TTS Voice Manager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è TTS Voice Manager: {ex.Message}");
                    }
                }
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                if (streamingProcessor != null)
                {
                    try
                    {
                        streamingProcessor.DisposeAsync().AsTask().Wait(TimeSpan.FromSeconds(3));
                        streamingProcessor = null;
                        Debug.WriteLine("‚úÖ StreamingWhisperProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ StreamingProcessor: {ex.Message}");
                    }
                }
                
                if (audioResampler != null)
                {
                    try
                    {
                        audioResampler.Dispose();
                        audioResampler = null;
                        Debug.WriteLine("‚úÖ AudioResampler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AudioResampler: {ex.Message}");
                    }
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
                isDisposed = true;
                
                Debug.WriteLine("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {ex.Message}");
            }
        }

        #endregion

        /// <summary>
        /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—á–∏ (—Ç–æ–ª—å–∫–æ –≤ Debug —Ä–µ–∂–∏–º–µ)
        /// </summary>
        private void DebugLogSpeechValidation(string message)
        {
            System.Diagnostics.Debug.WriteLine($"[SPEECH_DEBUG] {message}");
        }

        private class AudioDevice
        {
            public string Name { get; set; } = string.Empty;
            public MMDevice Device { get; set; } = null!;
            
            public override string ToString() => Name;
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        /// </summary>
        private string AnalyzeTranslationQuality(string original, string translated)
        {
            try
            {
                var indicators = new List<string>();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª–∏–Ω—ã
                double lengthRatio = (double)translated.Length / original.Length;
                if (lengthRatio > 1.5) indicators.Add("üìè+");  // –ó–∞–º–µ—Ç–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ
                else if (lengthRatio < 0.5) indicators.Add("üìè-");  // –ó–∞–º–µ—Ç–Ω–æ –∫–æ—Ä–æ—á–µ
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                int originalPunct = original.Count(c => char.IsPunctuation(c));
                int translatedPunct = translated.Count(c => char.IsPunctuation(c));
                if (Math.Abs(originalPunct - translatedPunct) > 2) indicators.Add("‚ùì");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–µ—Ä–µ–≤–æ–¥–µ
                if (translated.Contains("...") && !original.Contains("...")) indicators.Add("üîç");
                if (translated.Contains("[") || translated.Contains("]")) indicators.Add("‚ö†Ô∏è");
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —è–∑—ã–∫—É
                bool isRussianSource = System.Text.RegularExpressions.Regex.IsMatch(original, @"[–∞-—è—ë]", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                bool isEnglishSource = System.Text.RegularExpressions.Regex.IsMatch(original, @"[a-z]", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                
                if (isRussianSource && original == translated) indicators.Add("üîÑRU‚ÜíRU");
                else if (isEnglishSource) indicators.Add("üîÑEN‚ÜíRU");
                else if (isRussianSource) indicators.Add("üîÑRU‚Üí?");
                
                return indicators.Count > 0 ? $" ({string.Join("", indicators)})" : "";
            }
            catch
            {
                return "";
            }
        }

        #endregion
    }
}
