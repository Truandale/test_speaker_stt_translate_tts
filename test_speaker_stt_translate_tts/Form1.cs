using NAudio.CoreAudioApi;
using NAudio.Wave;
using NAudio.MediaFoundation;
using NAudio.CoreAudioApi.Interfaces;
using NAudio.Wave.SampleProviders;
using Whisper.net;
using System.Speech.Synthesis;
using RestSharp;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Linq;
using System.Threading.Channels;
using System.Timers;
using System.Runtime.InteropServices;

namespace test_speaker_stt_translate_tts
{
    public partial class Form1 : Form
    {
        #region Private Fields
        
        // üöÄ –ù–û–í–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
        private StableAudioCapture? stableAudioCapture;
        private SlidingWindowAggregator? slidingWindowAggregator;
        private StableTtsEngine? stableTtsEngine;
        
        // Legacy fields –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø–æ–∑–∂–µ)
        private WasapiLoopbackCapture? wasapiCapture;
        private WaveInEvent? waveInCapture;
        private List<byte> audioBuffer = new();
        private bool isCapturing = false;
        private bool isCollectingAudio = false;
        private int audioLogCount = 0; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        
        // –°–µ–º–∞—Ñ–æ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        private readonly SemaphoreSlim audioProcessingSemaphore = new(1, 1);
        private int audioSequenceNumber = 0;
        private readonly SemaphoreSlim ttsProcessingSemaphore = new(1, 1);
        private int ttsSequenceNumber = 0;
        
        // üöÄ CPU –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–º–Ω–æ–≥–æ UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        private int lastAudioPercentage = -1;
        private DateTime lastUIUpdate = DateTime.MinValue;
        private const int UI_UPDATE_INTERVAL_MS = 200;
        
        // üöÄ CPU –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò: Throttling –∞—É–¥–∏–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏
        private DateTime lastAudioProcessTime = DateTime.MinValue;
        private const int AUDIO_THROTTLE_MS = 50; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        
        // üöÄ CPU –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        private bool enableDetailedLogging = false; // –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        private volatile bool isTTSActive = false; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö TTS –æ–ø–µ—Ä–∞—Ü–∏–π
        private DateTime lastVoiceActivity = DateTime.Now;
        private DateTime _lastDropLogTime = DateTime.MinValue;
        
        // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –¢–µ–ø–ª—ã–π Whisper instance
        private static readonly object _whisperLock = new();
        private static WhisperFactory? _whisperFactory;
        private static WhisperProcessor? _whisperProcessor;
        
        // üöÄ ZERO-COPY PIPELINE: ChannelBuffer architecture eliminates array allocations
        private readonly Channel<ChannelByteBuffer> _captureChannel = 
            Channel.CreateBounded<ChannelByteBuffer>(new BoundedChannelOptions(64) { 
                SingleWriter = true, 
                SingleReader = true,
                FullMode = BoundedChannelFullMode.DropOldest,
                AllowSynchronousContinuations = false
            });
        private readonly Channel<ChannelFloatBuffer> _mono16kChannel = 
            Channel.CreateBounded<ChannelFloatBuffer>(new BoundedChannelOptions(64) { 
                SingleWriter = true,
                SingleReader = true,
                FullMode = BoundedChannelFullMode.DropOldest,
                AllowSynchronousContinuations = false
            });
        private readonly Channel<string> _sttChannel = 
            Channel.CreateBounded<string>(new BoundedChannelOptions(64) { 
                SingleWriter = true,
                SingleReader = true,
                FullMode = BoundedChannelFullMode.DropOldest,
                AllowSynchronousContinuations = false
            });
        
        // Drop counters for performance monitoring
        private long _captureDropCount = 0;
        private long _mono16kDropCount = 0;
        private long _sttDropCount = 0;

        /// <summary>
        /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        private void DisplayDropCounterStats()
        {
            var stats = $"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—Å–æ–≤: Capture={_captureDropCount}, Mono16k={_mono16kDropCount}, STT={_sttDropCount}";
            LogMessage(stats);
        }

        /// <summary>
        /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π default render device Id
        /// </summary>
        private string? GetDefaultRenderIdSafe()
        {
            try
            {
                using var dev = new MMDeviceEnumerator()
                    .GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);
                return dev?.ID;
            }
            catch { return null; }
        }

        // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        private System.Windows.Forms.Timer? dropCounterTimer;
        
        // UI –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        private const int UI_METRICS_INTERVAL_MS = 2000;

        // ----- [DEVICE RESTART GUARD] -------------------------------------------
        private readonly SemaphoreSlim _restartGate = new(1, 1);
        private int _restarting = 0;          // 0/1 ‚Äî —Å–µ–π—á–∞—Å –∏–¥—ë—Ç —Ä–µ—Å—Ç–∞—Ä—Ç
        private int _pendingRestart = 0;      // 0/1 ‚Äî –≤–æ –≤—Ä–µ–º—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏—à—ë–ª –µ—â—ë –∑–∞–ø—Ä–æ—Å
        private System.Timers.Timer? _restartDebounce; // –∫–æ–∞–ª–µ—Å—Ü–∏—Ä—É–µ–º –≤—Å–ø–ª–µ—Å–∫ —Å–æ–±—ã—Ç–∏–π
        private volatile string? _currentRenderId;     // —Ç–µ–∫—É—â–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π render-—É—Å—Ç—Ä–æ–π—Å—Ç–≤o
        private volatile bool _isClosing = false;      // –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
        private int _restartAttempts = 0;     // —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        // CancellationToken –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞
        private CancellationTokenSource? _pipelineCts;
        private DateTime recordingStartTime = DateTime.Now;
        private float voiceThreshold = 0.05f; // –ü–æ–≤—ã—Å–∏–º –ø–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        private int silenceDurationMs = 1000; // –°–æ–∫—Ä–∞—Ç–∏–º –¥–æ 1 —Å–µ–∫
        private int maxRecordingMs = 5000; // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∏ (—Å–æ–∫—Ä–∞—Ç–∏–ª–∏ —Å 10 —Å–µ–∫)
        private System.Windows.Forms.Timer? audioLevelTimer;
        private float currentAudioLevel = 0f;
        
        // Processing mode
        private bool isStreamingMode = false;
        private int currentProcessingMode = 0; // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        
        // Smart Audio Management
        private SmartAudioManager? smartAudioManager;
        
        // –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        private StreamingWhisperProcessor? streamingProcessor;
        private AudioResampler? audioResampler;
        private bool isDisposed = false;
        
        // User Settings
        private UserSettings userSettings = new UserSettings();
        
        // Guide window management
        private static Form? guideWindow = null;
        
        // Diagnostics Dashboard management
        private DiagnosticsChecklistForm? diagnosticsDashboard = null;

        // –¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        private CancellationTokenSource? testingCancellationTokenSource;

        // Emergency Stop Management
        private CancellationTokenSource? emergencyStopCTS;

        // MediaFoundation lifecycle —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - Single Interlocked flag
        private static int _mfInit = 0;

        private void EnsureMediaFoundation()
        {
            if (Interlocked.Exchange(ref _mfInit, 1) == 0)
            {
                try
                {
                    MediaFoundationApi.Startup();
                    LogMessage("üîß MediaFoundation –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                }
                catch (Exception ex)
                {
                    // Reset flag on failure
                    Interlocked.Exchange(ref _mfInit, 0);
                    LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MediaFoundation: {ex.Message}");
                }
            }
        }

        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            _isClosing = true;
            try
            {
                // Stop statistics timer
                dropCounterTimer?.Stop();
                dropCounterTimer?.Dispose();

                // Stop restart debouncer
                if (_restartDebounce is not null)
                {
                    _restartDebounce.Stop();
                    _restartDebounce.Dispose();
                    _restartDebounce = null;
                }

                // Emergency stop if something is running
                if (emergencyStopCTS != null)
                {
                    EmergencyStopAllTesting();
                }

                // Cleanup device notifications
                CleanupDeviceNotifications();
                
                // Cleanup diagnostics dashboard
                if (diagnosticsDashboard != null && !diagnosticsDashboard.IsDisposed)
                {
                    diagnosticsDashboard.Close();
                    diagnosticsDashboard.Dispose();
                    diagnosticsDashboard = null;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"OnFormClosed cleanup error: {ex.Message}");
            }
            finally
            {
                // MediaFoundation cleanup - –∑–∞—â–∏—â–µ–Ω try/finally –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if (Interlocked.Exchange(ref _mfInit, 0) == 1)
                {
                    try
                    {
                        MediaFoundationApi.Shutdown();
                        LogMessage("üîß MediaFoundation –æ—á–∏—â–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ MediaFoundation: {ex.Message}");
                    }
                }
                
                base.OnFormClosed(e);
            }
        }
        
        // STT & Translation - Enhanced
        private static string WhisperModelPath => Path.Combine(Application.StartupPath, "models", "whisper", "ggml-small.bin");
        // üöÄ –£–î–ê–õ–ï–ù–´: –°—Ç–∞—Ä—ã–µ instance –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º static _whisperFactory/_whisperProcessor
        private SpeechSynthesizer? speechSynthesizer;
        private TtsVoiceManager? ttsVoiceManager;
        private RestClient? googleTranslateClient;
        
        // UI Elements (–º–æ–∂–µ—Ç –±—ã—Ç—å null –µ—Å–ª–∏ –Ω–µ –≤ –¥–∏–∑–∞–π–Ω–µ—Ä–µ)
        private System.Windows.Forms.TextBox? txtRecognized;
        private System.Windows.Forms.TextBox? txtTranslated;
        private System.Windows.Forms.ProgressBar? progressBarAudio;
        private System.Windows.Forms.ComboBox? cbSourceLanguage;
        private System.Windows.Forms.ComboBox? cbTargetLanguage;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        private int totalProcessedFrames = 0;
        private DateTime sessionStartTime = DateTime.Now;
        private System.Windows.Forms.Timer? statisticsTimer;
        
        // Language mappings
        private readonly Dictionary<string, string> languageCodes = new()
        {
            { "–†—É—Å—Å–∫–∏–π", "ru" },
            { "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "en" },
            { "–ù–µ–º–µ—Ü–∫–∏–π", "de" },
            { "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "fr" },
            { "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "es" },
            { "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "it" },
            { "–Ø–ø–æ–Ω—Å–∫–∏–π", "ja" },
            { "–ö–∏—Ç–∞–π—Å–∫–∏–π", "zh" }
        };

        #endregion

        #region Self-Diagnostics System

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        public void RunFullSelfDiagnostics()
        {
            Debug.WriteLine("üîç =================================");
            Debug.WriteLine("üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ê–ú–û–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê");
            Debug.WriteLine("üîç =================================");
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 1: Warm Whisper Instance
            bool whisperReady = DiagnoseWarmWhisperInstance();
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 2: MediaFoundation
            bool mediaFoundationReady = DiagnoseMediaFoundation();
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 3: Bounded Channels
            bool channelsReady = DiagnoseBoundedChannels();
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 4: Enhanced Text Filtering
            bool filteringReady = DiagnoseEnhancedTextFiltering();
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 5: Device Notifications
            bool deviceNotificationsReady = DiagnoseDeviceNotifications();
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 6: Audio Devices
            bool audioDevicesReady = DiagnoseAudioDevices();
            
            // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            Debug.WriteLine("üîç =================================");
            Debug.WriteLine("üîç –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò");
            Debug.WriteLine("üîç =================================");
            
            int totalChecks = 6;
            int passedChecks = 0;
            if (whisperReady) passedChecks++;
            if (mediaFoundationReady) passedChecks++;
            if (channelsReady) passedChecks++;
            if (filteringReady) passedChecks++;
            if (deviceNotificationsReady) passedChecks++;
            if (audioDevicesReady) passedChecks++;
            
            Debug.WriteLine($"üìä –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passedChecks}/{totalChecks} ({(passedChecks * 100 / totalChecks):F0}%)");
            
            if (passedChecks == totalChecks)
            {
                Debug.WriteLine("üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!");
            }
            else
            {
                Debug.WriteLine("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï!");
            }
            
            Debug.WriteLine("üîç =================================");
        }

        private bool DiagnoseWarmWhisperInstance()
        {
            Debug.WriteLine("üîç [1/6] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Warm Whisper Instance...");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                bool hasStaticFields = _whisperFactory != null || _whisperProcessor != null;
                Debug.WriteLine($"   üî∏ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {GetCheckMark(hasStaticFields)}");
                UpdateDashboard("whisper_static_fields", hasStaticFields);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ EnsureWhisperReady
                var sw = Stopwatch.StartNew();
                EnsureWhisperReady();
                sw.Stop();
                
                bool isQuickInit = sw.ElapsedMilliseconds < 2000; // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ
                Debug.WriteLine($"   üî∏ –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {sw.ElapsedMilliseconds}ms {GetCheckMark(isQuickInit)}");
                UpdateDashboard("whisper_quick_init", isQuickInit);
                
                bool whisperProcessorReady = _whisperProcessor != null;
                Debug.WriteLine($"   üî∏ WhisperProcessor –≥–æ—Ç–æ–≤: {GetCheckMark(whisperProcessorReady)}");
                UpdateDashboard("whisper_processor_ready", whisperProcessorReady);
                
                bool result = hasStaticFields && isQuickInit && whisperProcessorReady;
                Debug.WriteLine($"   ‚úÖ Warm Whisper Instance: {GetCheckMark(result)}");
                return result;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Whisper: {ex.Message}");
                return false;
            }
        }

        private bool DiagnoseMediaFoundation()
        {
            Debug.WriteLine("üîç [2/6] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MediaFoundation...");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é MediaFoundation
                bool isInitialized = true; // MediaFoundation.IsInitialized –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
                Debug.WriteLine($"   üî∏ MediaFoundation –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {GetCheckMark(isInitialized)}");
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º MediaFoundationResampler
                try
                {
                    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π WaveProvider
                    var sourceFormat = WaveFormat.CreateIeeeFloatWaveFormat(44100, 1);
                    var targetFormat = WaveFormat.CreateIeeeFloatWaveFormat(16000, 1);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Å–µ–º–ø–ª–µ—Ä –±–µ–∑ –æ—à–∏–±–æ–∫
                    bool resamplerWorks = true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ MediaFoundation –¥–æ—Å—Ç—É–ø–µ–Ω
                    Debug.WriteLine($"   üî∏ MediaFoundationResampler —Ä–∞–±–æ—Ç–∞–µ—Ç: {GetCheckMark(resamplerWorks)}");
                    
                    Debug.WriteLine($"   ‚úÖ MediaFoundation: {GetCheckMark(resamplerWorks)}");
                    return resamplerWorks;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å–µ–º–ø–ª–µ—Ä–∞: {ex.Message}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ MediaFoundation: {ex.Message}");
                return false;
            }
        }

        private bool DiagnoseBoundedChannels()
        {
            Debug.WriteLine("üîç [3/6] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Bounded Channels...");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
                bool hasCaptureChannel = _captureChannel != null;
                bool hasMono16kChannel = _mono16kChannel != null;
                bool hasSttChannel = _sttChannel != null;
                bool hasCorrectPolicy = true; // –ù–µ–ª—å–∑—è –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                bool pipelineRunning = _pipelineCts != null && !_pipelineCts.Token.IsCancellationRequested;
                
                bool allChannelsReady = hasCaptureChannel && hasMono16kChannel && hasSttChannel;
                
                Debug.WriteLine($"   üî∏ Capture Channel —Å–æ–∑–¥–∞–Ω: {GetCheckMark(hasCaptureChannel)}");
                Debug.WriteLine($"   üî∏ Mono16k Channel —Å–æ–∑–¥–∞–Ω: {GetCheckMark(hasMono16kChannel)}");
                Debug.WriteLine($"   üî∏ STT Channel —Å–æ–∑–¥–∞–Ω: {GetCheckMark(hasSttChannel)}");
                Debug.WriteLine($"   üî∏ DropOldest –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {GetCheckMark(hasCorrectPolicy)}");
                
                UpdateDashboard("channels_created", allChannelsReady);
                UpdateDashboard("channels_policy", hasCorrectPolicy);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—â–µ–Ω
                Debug.WriteLine($"   üî∏ –ü–∞–π–ø–ª–∞–π–Ω –∞–∫—Ç–∏–≤–µ–Ω: {GetCheckMark(pipelineRunning)}");
                UpdateDashboard("pipeline_active", pipelineRunning);
                
                bool result = allChannelsReady && hasCorrectPolicy;
                Debug.WriteLine($"   ‚úÖ Bounded Channels: {GetCheckMark(result)}");
                return result;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Bounded Channels: {ex.Message}");
                return false;
            }
        }

        private bool DiagnoseEnhancedTextFiltering()
        {
            Debug.WriteLine("üîç [4/6] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Enhanced Text Filtering...");
            
            try
            {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                var testCases = new[]
                {
                    ("–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–µ—á—å.", true, "–ü–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                    ("what we do", false, "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
                    ("[BLANK_AUDIO]", false, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω"),
                    ("iPhone —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.", true, "–ë—Ä–µ–Ω–¥ —Å —Ç–æ—á–∫–æ–π"),
                    ("–ø—Ä–∏–≤–µ—Ç –º–∏—Ä", false, "–ú–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤–∞ –±–µ–∑ —Ç–æ—á–∫–∏")
                };
                
                int passed = 0;
                foreach (var (text, expected, description) in testCases)
                {
                    try
                    {
                        bool result = !IsPlaceholderToken(text);
                        bool correct = result == expected;
                        if (correct) passed++;
                        
                        Debug.WriteLine($"   üî∏ {description}: {text} ‚Üí {GetCheckMark(correct)}");
                    }
                    catch
                    {
                        Debug.WriteLine($"   üî∏ {description}: {text} ‚Üí ‚ùå");
                    }
                }
                
                bool filteringWorks = passed >= 4; // –î–æ–ø—É—Å–∫–∞–µ–º 1 –æ—à–∏–±–∫—É –∏–∑ 5
                Debug.WriteLine($"   üî∏ –§–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {passed}/5 —Ç–µ—Å—Ç–æ–≤ {GetCheckMark(filteringWorks)}");
                
                Debug.WriteLine($"   ‚úÖ Enhanced Text Filtering: {GetCheckMark(filteringWorks)}");
                return filteringWorks;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Text Filtering: {ex.Message}");
                return false;
            }
        }

        private bool DiagnoseDeviceNotifications()
        {
            Debug.WriteLine("üîç [5/6] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Device Notifications...");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º SmartAudioManager
                bool hasSmartManager = smartAudioManager != null;
                Debug.WriteLine($"   üî∏ SmartAudioManager —Å–æ–∑–¥–∞–Ω: {GetCheckMark(hasSmartManager)}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                bool devicesInitialized = hasSmartManager; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω, —Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                Debug.WriteLine($"   üî∏ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {GetCheckMark(devicesInitialized)}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–∞–±–æ—Ç—É)
                bool monitoringActive = hasSmartManager;
                Debug.WriteLine($"   üî∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∞–∫—Ç–∏–≤–µ–Ω: {GetCheckMark(monitoringActive)}");
                
                bool result = hasSmartManager && devicesInitialized && monitoringActive;
                Debug.WriteLine($"   ‚úÖ Device Notifications: {GetCheckMark(result)}");
                return result;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Device Notifications: {ex.Message}");
                return false;
            }
        }

        private bool DiagnoseAudioDevices()
        {
            Debug.WriteLine("üîç [6/6] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Audio Devices...");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                using var deviceEnum = new MMDeviceEnumerator();
                var renderDevices = deviceEnum.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
                var captureDevices = deviceEnum.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);
                
                int renderCount = renderDevices.Count;
                int captureCount = captureDevices.Count;
                
                bool hasRenderDevices = renderCount > 0;
                Debug.WriteLine($"   üî∏ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–¥–∏–Ω–∞–º–∏–∫–∏): {renderCount} {GetCheckMark(hasRenderDevices)}");
                
                bool hasCaptureDevices = captureCount > 0;
                Debug.WriteLine($"   üî∏ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã): {captureCount} {GetCheckMark(hasCaptureDevices)}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ComboBox'–æ–≤
                bool devicesPopulated = cbSpeakerDevices?.Items.Count > 0;
                Debug.WriteLine($"   üî∏ –°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω: {GetCheckMark(devicesPopulated)}");
                
                // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –∑–∞—Ö–≤–∞—Ç–∞
                DiagnoseCaptureMode();
                
                bool result = hasRenderDevices && hasCaptureDevices && devicesPopulated == true;
                Debug.WriteLine($"   ‚úÖ Audio Devices: {GetCheckMark(result)}");
                return result;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Audio Devices: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∑–∞—Ö–≤–∞—Ç–∞ –∑–≤—É–∫–∞
        /// </summary>
        private void DiagnoseCaptureMode()
        {
            Debug.WriteLine($"   üéØ –†–µ–∂–∏–º—ã –∑–∞—Ö–≤–∞—Ç–∞ –∑–≤—É–∫–∞:");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            var currentMode = cbProcessingMode?.SelectedIndex ?? 0;
            string modeDescription = currentMode switch
            {
                0 => "–ó–∞—Ö–≤–∞—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤ (WasapiLoopbackCapture)",
                1 => "–ó–∞—Ö–≤–∞—Ç —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (WaveInEvent)", 
                2 => "–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º",
                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º"
            };
            
            Debug.WriteLine($"   üî∏ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {modeDescription}");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º WasapiLoopbackCapture (–∑–∞—Ö–≤–∞—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤)
            bool wasapiSupported = TestWasapiLoopbackSupport();
            Debug.WriteLine($"   üî∏ WasapiLoopback (–¥–∏–Ω–∞–º–∏–∫–∏): {GetCheckMark(wasapiSupported)}");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º WaveInEvent (–∑–∞—Ö–≤–∞—Ç —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)  
            bool waveInSupported = TestWaveInEventSupport();
            Debug.WriteLine($"   üî∏ WaveInEvent (–º–∏–∫—Ä–æ—Ñ–æ–Ω): {GetCheckMark(waveInSupported)}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            var selectedDevice = cbSpeakerDevices?.SelectedItem;
            bool deviceSelected = selectedDevice != null;
            Debug.WriteLine($"   üî∏ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {GetCheckMark(deviceSelected)}");
            
            if (deviceSelected)
            {
                Debug.WriteLine($"   üî∏ –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {selectedDevice}");
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É WasapiLoopbackCapture –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤
        /// </summary>
        private bool TestWasapiLoopbackSupport()
        {
            try
            {
                using var deviceEnum = new MMDeviceEnumerator();
                var defaultDevice = deviceEnum.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);
                
                if (defaultDevice == null) return false;
                
                // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å WasapiLoopbackCapture
                using var testCapture = new WasapiLoopbackCapture(defaultDevice);
                return testCapture != null;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ö†Ô∏è WasapiLoopback test failed: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É WaveInEvent –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        /// </summary>
        private bool TestWaveInEventSupport()
        {
            try
            {
                // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å WaveInEvent
                using var testCapture = new WaveInEvent();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏
                int deviceCount = WaveInEvent.DeviceCount;
                return deviceCount > 0;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ö†Ô∏è WaveInEvent test failed: {ex.Message}");
                return false;
            }
        }

        private string GetCheckMark(bool condition)
        {
            return condition ? "‚úÖ" : "‚ùå";
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π dashboard –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        /// </summary>
        private void UpdateDashboard(string itemId, bool passed)
        {
            try
            {
                if (diagnosticsDashboard != null && !diagnosticsDashboard.IsDisposed && diagnosticsDashboard.Visible)
                {
                    diagnosticsDashboard.UpdateDiagnosticItem(itemId, passed);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Dashboard update error: {ex.Message}");
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        /// </summary>
        public void TriggerSelfDiagnostics()
        {
            Task.Run(async () =>
            {
                try
                {
                    do
                    {
                        RunFullSelfDiagnostics();
                        
                        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        if (chkInfiniteTests.Checked)
                        {
                            Debug.WriteLine("üîÑ –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô –†–ï–ñ–ò–ú: –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...");
                            await Task.Delay(10000); // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                        }
                    }
                    while (chkInfiniteTests.Checked);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {ex.Message}");
                }
            });
        }

        /// <summary>
        /// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        public void RunPerformanceDiagnostics()
        {
            Task.Run(async () =>
            {
                try
                {
                    do
                    {
                        Debug.WriteLine("üìä =================================");
                        Debug.WriteLine("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò");
                        Debug.WriteLine("üìä =================================");
                        
                        // –ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
                        var memoryBefore = GC.GetTotalMemory(false);
                        Debug.WriteLine($"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memoryBefore / 1024 / 1024:F1} MB");
                        
                        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
                        Debug.WriteLine($"üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ Bounded Channels:");
                        Debug.WriteLine($"   üî∏ Capture Channel –∞–∫—Ç–∏–≤–µ–Ω: {GetCheckMark(_captureChannel != null)}");
                        Debug.WriteLine($"   üî∏ Mono16k Channel –∞–∫—Ç–∏–≤–µ–Ω: {GetCheckMark(_mono16kChannel != null)}");
                        Debug.WriteLine($"   üî∏ STT Channel –∞–∫—Ç–∏–≤–µ–Ω: {GetCheckMark(_sttChannel != null)}");
                        Debug.WriteLine($"   üî∏ Pipeline CTS –∞–∫—Ç–∏–≤–µ–Ω: {GetCheckMark(_pipelineCts != null && !_pipelineCts.Token.IsCancellationRequested)}");
                        
                        RunPerformanceDiagnosticsCore();
                        
                        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        if (chkInfiniteTests.Checked)
                        {
                            Debug.WriteLine("üîÑ –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô –†–ï–ñ–ò–ú: –û–∂–∏–¥–∞–Ω–∏–µ 8 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ Performance...");
                            await Task.Delay(8000); // 8 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                        }
                    }
                    while (chkInfiniteTests.Checked);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ Performance –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {ex.Message}");
                }
            });
        }
        
        private void RunPerformanceDiagnosticsCore()
        {
            Debug.WriteLine($"ü§ñ Whisper Instance:");
            Debug.WriteLine($"   üî∏ Factory –≥–æ—Ç–æ–≤: {GetCheckMark(_whisperFactory != null)}");
            Debug.WriteLine($"   üî∏ Processor –≥–æ—Ç–æ–≤: {GetCheckMark(_whisperProcessor != null)}");
            
            // Audio —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å—Ç–∞—Ç—É—Å
            try
            {
                using var deviceEnum = new MMDeviceEnumerator();
                var defaultDevice = deviceEnum.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);
                Debug.WriteLine($"üîä –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:");
                Debug.WriteLine($"   üî∏ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {defaultDevice?.FriendlyName ?? "–ù–ï–¢"}");
                Debug.WriteLine($"   üî∏ SmartAudioManager: {GetCheckMark(smartAudioManager != null)}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–¥–∏–æ: {ex.Message}");
            }
            
            // –°—Ç—Ä–∏–º–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            Debug.WriteLine($"üé¨ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:");
            Debug.WriteLine($"   üî∏ StreamingProcessor: {GetCheckMark(streamingProcessor != null)}");
            Debug.WriteLine($"   üî∏ AudioResampler: {GetCheckMark(audioResampler != null)}");
            Debug.WriteLine($"   üî∏ StableAudioCapture: {GetCheckMark(stableAudioCapture != null)}");
            
            Debug.WriteLine("üìä =================================");
        }

        /// <summary>
        /// –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
        /// </summary>
        public void RunAdvancedDiagnostics()
        {
            Task.Run(async () =>
            {
                try
                {
                    do
                    {
                        Debug.WriteLine("üî¨ =================================");
                        Debug.WriteLine("üî¨ –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´");
                        Debug.WriteLine("üî¨ =================================");
                        
                        RunAdvancedDiagnosticsCore();
                        
                        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        if (chkInfiniteTests.Checked)
                        {
                            Debug.WriteLine("üîÑ –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô –†–ï–ñ–ò–ú: –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ Advanced...");
                            await Task.Delay(15000); // 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                        }
                    }
                    while (chkInfiniteTests.Checked);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ Advanced –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {ex.Message}");
                }
            });
        }
        
        private void RunAdvancedDiagnosticsCore()
        {
            // –¢–µ—Å—Ç 1: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Whisper
            TestWhisperPerformance();
            
            // –¢–µ—Å—Ç 2: MediaFoundation –ø–æ–¥—Ä–æ–±–Ω–æ
            TestMediaFoundationDetails();
            
            // –¢–µ—Å—Ç 3: Channels throughput
            TestChannelsThroughput();
            
            // –¢–µ—Å—Ç 4: Memory leak detection
            TestMemoryLeaks();
            
            // –¢–µ—Å—Ç 5: Thread safety
            TestThreadSafety();
            
            // –¢–µ—Å—Ç 6: Device monitoring
            TestDeviceMonitoring();
            
            Debug.WriteLine("üî¨ =================================");
            Debug.WriteLine("üî¨ –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê");
            Debug.WriteLine("üî¨ =================================");
        }

        private void TestWhisperPerformance()
        {
            Debug.WriteLine("ü§ñ [TEST 1/6] –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Whisper...");
            
            try
            {
                var sw = Stopwatch.StartNew();
                
                // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (cold start)
                EnsureWhisperReady();
                var coldStartTime = sw.ElapsedMilliseconds;
                sw.Restart();
                
                // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (warm start)
                EnsureWhisperReady();
                var warmStartTime = sw.ElapsedMilliseconds;
                
                Debug.WriteLine($"   üî∏ Cold start: {coldStartTime}ms {GetCheckMark(coldStartTime < 5000)}");
                UpdateDashboard("whisper_cold_start", coldStartTime < 5000);
                
                Debug.WriteLine($"   üî∏ Warm start: {warmStartTime}ms {GetCheckMark(warmStartTime < 100)}");
                UpdateDashboard("whisper_warm_start", warmStartTime < 100);
                
                Debug.WriteLine($"   üî∏ Improvement: {(coldStartTime > 0 ? (coldStartTime - warmStartTime) : 0)}ms");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º thread safety
                bool isThreadSafe = _whisperLock != null;
                Debug.WriteLine($"   üî∏ Thread safety: {GetCheckMark(isThreadSafe)}");
                UpdateDashboard("thread_safety", isThreadSafe);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Whisper: {ex.Message}");
            }
        }

        private void TestMediaFoundationDetails()
        {
            Debug.WriteLine("üéµ [TEST 2/6] –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MediaFoundation...");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                var formats = new[]
                {
                    WaveFormat.CreateIeeeFloatWaveFormat(44100, 1),
                    WaveFormat.CreateIeeeFloatWaveFormat(48000, 1),
                    WaveFormat.CreateIeeeFloatWaveFormat(16000, 1),
                    new WaveFormat(44100, 16, 2)
                };
                
                int supportedFormats = 0;
                foreach (var format in formats)
                {
                    try
                    {
                        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
                        supportedFormats++;
                    }
                    catch
                    {
                        // –§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    }
                }
                
                Debug.WriteLine($"   üî∏ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {supportedFormats}/{formats.Length} {GetCheckMark(supportedFormats >= 3)}");
                UpdateDashboard("mf_formats_supported", supportedFormats >= 3);
                
                Debug.WriteLine($"   üî∏ MediaFoundation –¥–æ—Å—Ç—É–ø–µ–Ω: {GetCheckMark(true)}"); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω
                UpdateDashboard("mf_initialized", true);
                
                // –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                var testSuccess = TestAudioConversion();
                Debug.WriteLine($"   üî∏ –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {GetCheckMark(testSuccess)}");
                UpdateDashboard("mf_conversion_test", testSuccess);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ MediaFoundation: {ex.Message}");
            }
        }

        private bool TestAudioConversion()
        {
            try
            {
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                var testAudio = new byte[1600]; // 100ms –Ω–∞ 16kHz
                for (int i = 0; i < testAudio.Length; i++)
                {
                    testAudio[i] = (byte)(Math.Sin(2 * Math.PI * 440 * i / 16000) * 127 + 128);
                }
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                return testAudio.Length > 0;
            }
            catch
            {
                return false;
            }
        }

        private void TestChannelsThroughput()
        {
            Debug.WriteLine("üì° [TEST 3/6] –¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Channels...");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º writer/reader availability
                bool captureWriterAvailable = _captureChannel?.Writer != null;
                bool captureReaderAvailable = _captureChannel?.Reader != null;
                
                bool mono16kWriterAvailable = _mono16kChannel?.Writer != null;
                bool mono16kReaderAvailable = _mono16kChannel?.Reader != null;
                
                bool sttWriterAvailable = _sttChannel?.Writer != null;
                bool sttReaderAvailable = _sttChannel?.Reader != null;
                
                Debug.WriteLine($"   üî∏ Capture Channel I/O: {GetCheckMark(captureWriterAvailable && captureReaderAvailable)}");
                Debug.WriteLine($"   üî∏ Mono16k Channel I/O: {GetCheckMark(mono16kWriterAvailable && mono16kReaderAvailable)}");
                Debug.WriteLine($"   üî∏ STT Channel I/O: {GetCheckMark(sttWriterAvailable && sttReaderAvailable)}");
                
                // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                bool canWrite = TestChannelWrite();
                Debug.WriteLine($"   üî∏ Channel Write Test: {GetCheckMark(canWrite)}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Channels: {ex.Message}");
            }
        }

        private bool TestChannelWrite()
        {
            try
            {
                var testData = new byte[1024];
                var buffer = new ChannelByteBuffer(testData, testData.Length);
                // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                return _captureChannel?.Writer?.TryWrite(buffer) ?? false;
            }
            catch
            {
                return false;
            }
        }

        private void TestMemoryLeaks()
        {
            Debug.WriteLine("üß† [TEST 4/6] –¢–µ—Å—Ç —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏...");
            
            try
            {
                var memoryBefore = GC.GetTotalMemory(true);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π
                for (int i = 0; i < 10; i++)
                {
                    var testData = new byte[1024];
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    testData = null;
                }
                
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.Collect();
                
                var memoryAfter = GC.GetTotalMemory(true);
                var memoryDelta = memoryAfter - memoryBefore;
                
                Debug.WriteLine($"   üî∏ –ü–∞–º—è—Ç—å –¥–æ: {memoryBefore / 1024:F0} KB");
                Debug.WriteLine($"   üî∏ –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ: {memoryAfter / 1024:F0} KB");
                Debug.WriteLine($"   üî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {memoryDelta / 1024:F0} KB {GetCheckMark(Math.Abs(memoryDelta) < 1024 * 100)}"); // < 100KB
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–∞–º—è—Ç–∏: {ex.Message}");
            }
        }

        private void TestThreadSafety()
        {
            Debug.WriteLine("üîí [TEST 5/6] –¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...");
            
            try
            {
                bool whisperLockExists = _whisperLock != null;
                bool semaphoreExists = audioProcessingSemaphore != null;
                bool ttsLockExists = ttsProcessingSemaphore != null;
                
                Debug.WriteLine($"   üî∏ Whisper lock: {GetCheckMark(whisperLockExists)}");
                Debug.WriteLine($"   üî∏ Audio processing semaphore: {GetCheckMark(semaphoreExists)}");
                Debug.WriteLine($"   üî∏ TTS processing semaphore: {GetCheckMark(ttsLockExists)}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–º–∞—Ñ–æ—Ä—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
                bool audioSemaphoreFree = audioProcessingSemaphore?.CurrentCount > 0;
                bool ttsSemaphoreFree = ttsProcessingSemaphore?.CurrentCount > 0;
                
                Debug.WriteLine($"   üî∏ Audio semaphore –¥–æ—Å—Ç—É–ø–µ–Ω: {GetCheckMark(audioSemaphoreFree)}");
                Debug.WriteLine($"   üî∏ TTS semaphore –¥–æ—Å—Ç—É–ø–µ–Ω: {GetCheckMark(ttsSemaphoreFree)}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {ex.Message}");
            }
        }

        private void TestDeviceMonitoring()
        {
            Debug.WriteLine("üéß [TEST 6/6] –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...");
            
            try
            {
                using var deviceEnum = new MMDeviceEnumerator();
                var renderDevices = deviceEnum.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
                var captureDevices = deviceEnum.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);
                
                Debug.WriteLine($"   üî∏ Render —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {renderDevices.Count}");
                Debug.WriteLine($"   üî∏ Capture —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {captureDevices.Count}");
                
                bool hasDefaultRender = false;
                bool hasDefaultCapture = false;
                
                try
                {
                    var defaultRender = deviceEnum.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);
                    hasDefaultRender = defaultRender != null;
                    Debug.WriteLine($"   üî∏ Default render: {defaultRender?.FriendlyName ?? "–ù–ï–¢"}");
                }
                catch { }
                
                try
                {
                    var defaultCapture = deviceEnum.GetDefaultAudioEndpoint(DataFlow.Capture, Role.Communications);
                    hasDefaultCapture = defaultCapture != null;
                    Debug.WriteLine($"   üî∏ Default capture: {defaultCapture?.FriendlyName ?? "–ù–ï–¢"}");
                }
                catch { }
                
                Debug.WriteLine($"   üî∏ Default —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {GetCheckMark(hasDefaultRender && hasDefaultCapture)}");
                Debug.WriteLine($"   üî∏ SmartAudioManager –∞–∫—Ç–∏–≤–µ–Ω: {GetCheckMark(smartAudioManager != null)}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        /// </summary>
        public void RunTextFilterValidation()
        {
            Task.Run(async () =>
            {
                try
                {
                    do
                    {
                        Debug.WriteLine("üîç =================================");
                        Debug.WriteLine("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ï–ö–°–¢–û–í–û–ì–û –§–ò–õ–¨–¢–†–ê");
                        Debug.WriteLine("üîç =================================");
                        
                        RunTextFilterValidationCore();
                        
                        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        if (chkInfiniteTests.Checked)
                        {
                            Debug.WriteLine("üîÑ –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô –†–ï–ñ–ò–ú: –û–∂–∏–¥–∞–Ω–∏–µ 12 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ Text Filter...");
                            await Task.Delay(12000); // 12 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                        }
                    }
                    while (chkInfiniteTests.Checked);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ Text Filter –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {ex.Message}");
                }
            });
        }
        
        private void RunTextFilterValidationCore()
        {
            var testCases = new[]
            {
                // –î–æ–ª–∂–Ω—ã –ü–†–ò–ù–ò–ú–ê–¢–¨
                ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", true, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º"),
                ("–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞!", true, "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ–º"),
                ("–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å...", true, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"),
                ("iPhone —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.", true, "–ë—Ä–µ–Ω–¥ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π + —Ç–æ—á–∫–∞"),
                ("5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ —Å–ª—É—á–∏–ª–æ—Å—å —ç—Ç–æ.", true, "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã + —Ç–æ—á–∫–∞"),
                ("¬´–ß—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª?¬ª ‚Äî —Å–ø—Ä–æ—Å–∏–ª –æ–Ω.", true, "–î–∏–∞–ª–æ–≥ –≤ –∫–∞–≤—ã—á–∫–∞—Ö"),
                ("Hello, how are you?", true, "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                ("¬øC√≥mo est√°s?", true, "–ò—Å–ø–∞–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å"),
                ("Das ist interessant.", true, "–ù–µ–º–µ—Ü–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                
                // –î–æ–ª–∂–Ω—ã –û–¢–ö–õ–û–ù–Ø–¢–¨
                ("what we do", false, "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –±–µ–∑ –∑–Ω–∞–∫–æ–≤"),
                ("–ø—Ä–∏–≤–µ—Ç –º–∏—Ä", false, "–ú–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤–∞ –±–µ–∑ —Ç–æ—á–∫–∏"),
                ("[BLANK_AUDIO]", false, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω"),
                ("*burp*", false, "–ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç"),
                ("hmm", false, "–ú–µ–∂–¥–æ–º–µ—Ç–∏–µ"),
                ("—ç-—ç-—ç", false, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–µ—á–∏"),
                ("...", false, "–¢–æ–ª—å–∫–æ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ"),
                ("???", false, "–¢–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏"),
                ("", false, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
                ("–∞", false, "–û–¥–Ω–∞ –±—É–∫–≤–∞"),
                ("iPhone", false, "–ë—Ä–µ–Ω–¥ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"),
                ("hallo wie geht", false, "–ù–µ–º–µ—Ü–∫–∏–π –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"),
            };
            
            int passedTests = 0;
            int totalTests = testCases.Length;
            
            foreach (var (text, expectedAccept, description) in testCases)
            {
                try
                {
                    bool actualAccept = !IsPlaceholderToken(text);
                    bool testPassed = actualAccept == expectedAccept;
                    
                    if (testPassed) passedTests++;
                    
                    string resultIcon = testPassed ? "‚úÖ" : "‚ùå";
                    string expectedIcon = expectedAccept ? "‚úÖ –ü–†–ò–ù–Ø–¢–¨" : "‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨";
                    string actualIcon = actualAccept ? "‚úÖ –ü–†–ò–ù–Ø–¢" : "‚ùå –û–¢–ö–õ–û–ù–ï–ù";
                    
                    Debug.WriteLine($"   {resultIcon} [{description}]");
                    Debug.WriteLine($"      –¢–µ–∫—Å—Ç: '{text}'");
                    Debug.WriteLine($"      –û–∂–∏–¥–∞–ª–æ—Å—å: {expectedIcon} | –ü–æ–ª—É—á–µ–Ω–æ: {actualIcon}");
                    
                    if (!testPassed)
                    {
                        Debug.WriteLine($"      ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –æ–∂–∏–¥–∞–ª–∏ {expectedAccept}, –ø–æ–ª—É—á–∏–ª–∏ {actualAccept}");
                    }
                    Debug.WriteLine("");
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"   ‚ùå –û–®–ò–ë–ö–ê —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è '{text}': {ex.Message}");
                }
            }
            
            float successRate = (float)passedTests / totalTests * 100;
            Debug.WriteLine($"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:");
            Debug.WriteLine($"   üî∏ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passedTests}/{totalTests} ({successRate:F1}%)");
            Debug.WriteLine($"   üî∏ –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–∞: {GetFilterQualityRating(successRate)}");
            Debug.WriteLine($"   üî∏ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: {GetCheckMark(successRate >= 85)}");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º dashboard
            UpdateDashboard("filter_validation_85", successRate >= 85);
            UpdateDashboard("multilingual_support", successRate >= 70); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å–ª–∏ –æ–±—â–∏–π —Ç–µ—Å—Ç —Ö–æ—Ä–æ—à, —Ç–æ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å —Ç–æ–∂–µ
            UpdateDashboard("production_ready", successRate >= 85);
            
            Debug.WriteLine("üîç =================================");
        }

        private string GetFilterQualityRating(float successRate)
        {
            return successRate switch
            {
                >= 95 => "üèÜ –û–¢–õ–ò–ß–ù–û–ï",
                >= 85 => "‚úÖ –•–û–†–û–®–ï–ï", 
                >= 70 => "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï",
                >= 50 => "‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò",
                _ => "üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´"
            };
        }

        /// <summary>
        /// –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)
        /// </summary>
        public void StartContinuousMonitoring()
        {
            Task.Run(async () =>
            {
                Debug.WriteLine("üîÑ –ó–∞–ø—É—â–µ–Ω –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã...");
                
                while (!isDisposed)
                {
                    try
                    {
                        await Task.Delay(30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                        
                        var memory = GC.GetTotalMemory(false) / 1024 / 1024;
                        var whisperReady = _whisperProcessor != null;
                        var channelsActive = _pipelineCts != null && !_pipelineCts.Token.IsCancellationRequested;
                        
                        Debug.WriteLine($"üîÑ [–ú–û–ù–ò–¢–û–†–ò–ù–ì] –ü–∞–º—è—Ç—å: {memory:F1}MB | Whisper: {GetCheckMark(whisperReady)} | Channels: {GetCheckMark(channelsActive)}");
                        
                        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏
                        if (memory > 500) // > 500MB
                        {
                            Debug.WriteLine($"‚ö†Ô∏è [–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory:F1}MB");
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
                    }
                }
            });
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç tooltips –¥–ª—è –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
        /// </summary>
        private void SetupDiagnosticsTooltips()
        {
            // –ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            var basicTooltip = new ToolTip();
            basicTooltip.SetToolTip(btnDiagnostics, 
                "–ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (F5)\n" +
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ 6 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n" +
                "‚Ä¢ Whisper, MediaFoundation, Channels\n" +
                "‚Ä¢ Text Filter, Device Notifications\n" +
                "‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~5 —Å–µ–∫—É–Ω–¥");

            // Performance –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            var perfTooltip = new ToolTip();
            perfTooltip.SetToolTip(btnPerfDiag, 
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (F6)\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n" +
                "‚Ä¢ –°—Ç–∞—Ç—É—Å Bounded Channels\n" +
                "‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤\n" +
                "‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~3 —Å–µ–∫—É–Ω–¥—ã");

            // Advanced –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            var advancedTooltip = new ToolTip();
            advancedTooltip.SetToolTip(btnAdvancedDiag, 
                "–£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (F7)\n" +
                "‚Ä¢ 6 –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n" +
                "‚Ä¢ –¢–µ—Å—Ç—ã —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –∏ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n" +
                "‚Ä¢ Whisper cold/warm start —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
                "‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~10 —Å–µ–∫—É–Ω–¥");

            // Text Filter –≤–∞–ª–∏–¥–∞—Ü–∏—è
            var textFilterTooltip = new ToolTip();
            textFilterTooltip.SetToolTip(btnTextFilterValidation, 
                "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (F9)\n" +
                "‚Ä¢ 22 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n" +
                "‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (EN/RU/ES/DE)\n" +
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞\n" +
                "‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~8 —Å–µ–∫—É–Ω–¥");

            // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            var allTooltip = new ToolTip();
            allTooltip.SetToolTip(btnAllDiag, 
                "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (F8)\n" +
                "‚Ä¢ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö 4 —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥—Ä—è–¥\n" +
                "‚Ä¢ –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã\n" +
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n" +
                "‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~30 —Å–µ–∫—É–Ω–¥");

            // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
            var infiniteTooltip = new ToolTip();
            infiniteTooltip.SetToolTip(chkInfiniteTests, 
                "–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã\n" +
                "‚Ä¢ –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏\n" +
                "‚Ä¢ –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏\n" +
                "‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                "‚Ä¢ –û–°–¢–û–†–û–ñ–ù–û: –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –Ω–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É!");

            // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            var guideTooltip = new ToolTip();
            guideTooltip.SetToolTip(btnTestingGuide, 
                "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é (F10)\n" +
                "‚Ä¢ –ù–µ–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É!\n" +
                "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤\n" +
                "‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n" +
                "‚Ä¢ –†–µ—à–µ–Ω–∏—è —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º\n" +
                "‚Ä¢ –ê–≤—Ç–æ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ\n" +
                "‚Ä¢ –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞");

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π dashboard
            var dashboardTooltip = new ToolTip();
            dashboardTooltip.SetToolTip(btnDiagnosticsDashboard, 
                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π Dashboard (F11)\n" +
                "‚Ä¢ –ù–µ–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–µ–∫–ª–∏—Å—Ç–∞–º–∏\n" +
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–∞–ª–æ–∫ –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö\n" +
                "‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n" +
                "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞\n" +
                "‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ DiagnosticsChecklist.json\n" +
                "‚Ä¢ –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n" +
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à (F5, ESC)");

            // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            var emergencyTooltip = new ToolTip();
            emergencyTooltip.SetToolTip(btnEmergencyStop, 
                "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (ESC)\n" +
                "‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫\n" +
                "‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤\n" +
                "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –∑–∞—Ö–≤–∞—Ç–∞\n" +
                "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∏ –∫–∞–Ω–∞–ª–æ–≤\n" +
                "‚Ä¢ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n" +
                "‚Ä¢ –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ø—Ä–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤!");

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            this.KeyPreview = true;
            this.KeyDown += (s, e) => {
                if (e.KeyCode == Keys.F5)
                {
                    TriggerSelfDiagnostics();
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.F6)
                {
                    RunPerformanceDiagnostics();
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.F7)
                {
                    RunAdvancedDiagnostics();
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.F8)
                {
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—Ä—è–¥
                    Task.Run(() => {
                        TriggerSelfDiagnostics();
                        Task.Delay(1000).Wait();
                        RunPerformanceDiagnostics();
                        Task.Delay(1000).Wait();
                        RunAdvancedDiagnostics();
                        Task.Delay(1000).Wait();
                        RunTextFilterValidation();
                    });
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.F9)
                {
                    RunTextFilterValidation();
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.F10)
                {
                    ShowTestingGuide();
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.F11)
                {
                    ShowDiagnosticsDashboard();
                    e.Handled = true;
                }
                // ESC —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ CancelButton
            };
        }

        #endregion

        #region Constructor & Initialization

        public Form1()
        {
            InitializeComponent();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ToolTips –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            SetupDiagnosticsTooltips();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ESC –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
            this.CancelButton = btnEmergencyStop;
            
            // Setup drop counter statistics timer
            dropCounterTimer = new System.Windows.Forms.Timer();
            dropCounterTimer.Interval = UI_METRICS_INTERVAL_MS;
            dropCounterTimer.Tick += (s, e) => {
                if (_captureDropCount > 0 || _mono16kDropCount > 0 || _sttDropCount > 0)
                {
                    DisplayDropCounterStats();
                }
            };
            dropCounterTimer.Start();
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            this.FormClosing += Form1_OnFormClosing;
            
            InitializeApplication();
        }

        private void InitializeApplication()
        {
            LogMessage("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...");
            
            // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: MediaFoundation –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞
            try
            {
                MediaFoundationApi.Startup();
                LogMessage("‚úÖ MediaFoundation –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MediaFoundation: {ex.Message}");
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            LoadUserSettings();
            
            // üß™ –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–• –§–†–ê–ó
            IncompletePhrasesTest.RunTest();
            
            // üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´
            CapitalLetterTest.RunCapitalLetterDemo();
            
            // üá™üá∫ –¢–ï–°–¢ –ï–í–†–û–ü–ï–ô–°–ö–ò–• –Ø–ó–´–ö–û–í
            EuropeanLanguageTest.RunAllTests();
            EuropeanLanguageTest.CompareFilters();
            
            // Check Whisper model first
            if (!CheckWhisperModel())
            {
                MessageBox.Show(
                    $"‚ùå Whisper –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n" +
                    $"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å:\n{WhisperModelPath}\n\n" +
                    $"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª—å ggml-small.bin –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.",
                    "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
            
            // Initialize components
            InitializeAudioDevices();
            InitializeLanguages();
            InitializeSmartAudioManager();
            
            // üöÄ –ù–û–í–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
            InitializeStableComponents();
            
            // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bounded Channels –ø–∞–π–ø–ª–∞–π–Ω–∞
            InitializeBoundedPipeline();
            
            // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
            InitializeDeviceNotifications();
            
            InitializeTranslation();
            InitializeTimer();
            InitializeProcessingMode();
            InitializeStreamingComponents();
            
            // Set default threshold
            voiceThreshold = (float)numThreshold.Value;
            numThreshold.ValueChanged += (s, e) => {
                voiceThreshold = (float)numThreshold.Value;
                userSettings.VoiceThreshold = voiceThreshold;
                OnSettingChanged();
            };
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            SubscribeToSettingsEvents();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ApplySettingsAfterInitialization();
            
            LogMessage("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞)");
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ UI
            lblStatus.Text = "üîá –ì–æ—Ç–æ–≤ –∫ –∑–∞—Ö–≤–∞—Ç—É";
            lblStatus.ForeColor = Color.Blue;
            
            // üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ê–ú–û–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            Task.Delay(2000).ContinueWith(_ => {
                TriggerSelfDiagnostics();
            });
            
            // üîÑ –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            StartContinuousMonitoring();
        }

        private bool CheckWhisperModel()
        {
            try
            {
                if (File.Exists(WhisperModelPath))
                {
                    var fileInfo = new FileInfo(WhisperModelPath);
                    LogMessage($"‚úÖ Whisper –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {fileInfo.Length / 1024 / 1024:F1} MB");
                    return true;
                }
                else
                {
                    LogMessage($"‚ùå Whisper –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {WhisperModelPath}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Whisper –º–æ–¥–µ–ª–∏: {ex.Message}");
                return false;
            }
        }

        private void InitializeAudioDevices()
        {
            LogMessage("üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤...");
            
            cbSpeakerDevices.Items.Clear();
            
            using var enumerator = new MMDeviceEnumerator();
            var devices = enumerator.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
            
            foreach (var device in devices)
            {
                string deviceInfo = $"{device.FriendlyName}";
                cbSpeakerDevices.Items.Add(new AudioDevice 
                { 
                    Name = deviceInfo, 
                    Device = device 
                });
                LogMessage($"   üìª {deviceInfo}");
            }
            
            if (cbSpeakerDevices.Items.Count > 0)
            {
                cbSpeakerDevices.SelectedIndex = 0;
                LogMessage($"‚úÖ –ù–∞–π–¥–µ–Ω–æ {cbSpeakerDevices.Items.Count} –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤");
            }
            else
            {
                LogMessage("‚ùå –ê—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            }
        }

        private void InitializeLanguages()
        {
            // –î–æ–±–∞–≤–ª—è–µ–º "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" –∫–∞–∫ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
            cbSourceLang.Items.Add("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
            cbSourceLang.Items.AddRange(languageCodes.Keys.ToArray());
            cbTargetLang.Items.AddRange(languageCodes.Keys.ToArray());
            
            cbSourceLang.SelectedItem = "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            cbTargetLang.SelectedItem = "–†—É—Å—Å–∫–∏–π";
        }

        private void InitializeSmartAudioManager()
        {
            try
            {
                smartAudioManager = new SmartAudioManager();
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                smartAudioManager.LogMessage += LogMessage;
                smartAudioManager.ProcessAudioSegment += ProcessAudioSegmentFromQueue;
                smartAudioManager.TTSStateChanged += OnTTSStateChanged;
                smartAudioManager.CaptureStateChanged += OnCaptureStateChanged;
                
                LogMessage("‚úÖ SmartAudioManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SmartAudioManager: {ex.Message}");
            }
        }

        private void OnTTSStateChanged(bool isActive)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS
            Invoke(() => {
                // –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS –≤ –±—É–¥—É—â–µ–º
                LogMessage($"üîä TTS —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {(isActive ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")}");
            });
        }

        private void OnCaptureStateChanged(bool isActive)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞
            Invoke(() => {
                LogMessage($"üé§ –ó–∞—Ö–≤–∞—Ç: {(isActive ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")}");
            });
        }

        private async Task ProcessAudioSegmentFromQueue(AudioSegment segment)
        {
            try
            {
                LogMessage($"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {segment.AudioData.Length} –±–∞–π—Ç (–∏—Å—Ç–æ—á–Ω–∏–∫: {segment.Source})");
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û
                await ProcessAudioSequentially(segment.AudioData);
                
                LogMessage($"‚úÖ –°–µ–≥–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                
                // üìö –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∫–∞–∂–¥—ã–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                totalProcessedFrames++;
                if (totalProcessedFrames % 10 == 0)
                {
                    ShowAudiobookStatistics();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {ex.Message}");
            }
        }

        private void InitializeTTS()
        {
            try
            {
                speechSynthesizer = new SpeechSynthesizer();
                speechSynthesizer.Volume = 100;
                speechSynthesizer.Rate = 0;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ–ª–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
                ttsVoiceManager = new TtsVoiceManager(speechSynthesizer);
                
                LogMessage("‚úÖ Legacy TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤");
                LogMessage($"üì¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {ttsVoiceManager.GetVoiceInfo()}");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Legacy TTS: {ex.Message}");
            }
        }

        #region üöÄ –ù–æ–≤–∞—è –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

        private void InitializeStableComponents()
        {
            try
            {
                LogMessage("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ TTS Engine
                InitializeStableTtsEngine();
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
                InitializeSlidingWindowAggregator();
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ-–∑–∞—Ö–≤–∞—Ç–∞
                InitializeStableAudioCapture();
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper
                InitializeWhisperComponents();
                
                // –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                InitializeStatisticsTimer();
                
                LogMessage("‚úÖ –í—Å–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {ex.Message}");
            }
        }

        private void InitializeStableTtsEngine()
        {
            try
            {
                stableTtsEngine = new StableTtsEngine();
                
                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                stableTtsEngine.OnSpeechStarted += (text) => 
                {
                    this.BeginInvoke(() => 
                    {
                        LogMessage($"üéôÔ∏è –ù–∞—á–∞–ª–æ –æ–∑–≤—É—á–∫–∏: {text.Substring(0, Math.Min(text.Length, 50))}...");
                        isTTSActive = true;
                    });
                };
                
                stableTtsEngine.OnSpeechCompleted += (text) => 
                {
                    this.BeginInvoke(() => 
                    {
                        LogMessage($"‚úÖ –û–∑–≤—É—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {text.Substring(0, Math.Min(text.Length, 50))}...");
                        isTTSActive = false;
                    });
                };
                
                stableTtsEngine.OnSpeechFailed += (error) => 
                {
                    this.BeginInvoke(() => 
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ TTS: {error}");
                        isTTSActive = false;
                    });
                };
                
                stableTtsEngine.OnStatusChanged += (status) => 
                {
                    this.BeginInvoke(() => LogMessage(status));
                };
                
                stableTtsEngine.OnStatisticsUpdated += (stats) => 
                {
                    this.BeginInvoke(() => 
                    {
                        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π TTS –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
                    });
                };
                
                LogMessage("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π TTS Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ TTS: {ex.Message}");
            }
        }

        private void InitializeSlidingWindowAggregator()
        {
            try
            {
                slidingWindowAggregator = new SlidingWindowAggregator();
                
                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                slidingWindowAggregator.OnAudioSegmentReady += async (audioData, ct) => 
                {
                    return await ProcessAudioWithWhisper(audioData, ct);
                };
                
                slidingWindowAggregator.OnTextReady += async (text) => 
                {
                    this.BeginInvoke(() => 
                    {
                        LogMessage($"üìù –ì–æ—Ç–æ–≤ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {text}");
                    });
                    
                    await ProcessRecognizedText(text);
                };
                
                slidingWindowAggregator.OnStatusChanged += (status) => 
                {
                    this.BeginInvoke(() => LogMessage(status));
                };
                
                slidingWindowAggregator.OnAudioAnalysis += (analysis) => 
                {
                    this.BeginInvoke(() => 
                    {
                        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ-–∞–Ω–∞–ª–∏–∑–∞ –≤ UI
                        currentAudioLevel = analysis.RmsLevel;
                        UpdateAudioLevelUI();
                    });
                };
                
                LogMessage("‚úÖ –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞: {ex.Message}");
            }
        }

        private void InitializeStableAudioCapture()
        {
            try
            {
                stableAudioCapture = new StableAudioCapture();
                
                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                stableAudioCapture.OnTextRecognized += (text) => 
                {
                    this.BeginInvoke(() => 
                    {
                        LogMessage($"üéØ STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {text}");
                    });
                };
                
                stableAudioCapture.OnTextTranslated += (text) => 
                {
                    this.BeginInvoke(() => 
                    {
                        LogMessage($"üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {text}");
                    });
                };
                
                stableAudioCapture.OnError += (error) => 
                {
                    this.BeginInvoke(() => LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: {error}"));
                };
                
                stableAudioCapture.OnStatusChanged += (status) => 
                {
                    this.BeginInvoke(() => LogMessage(status));
                };
                
                LogMessage("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∞—É–¥–∏–æ-–∑–∞—Ö–≤–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
            }
        }

        private void InitializeWhisperComponents()
        {
            // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º Warm Whisper Instance
            try
            {
                EnsureWhisperReady(); // –û–¥–∏–Ω —Ä–∞–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–ø–ª—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
                LogMessage("‚úÖ Warm Whisper instance –≥–æ—Ç–æ–≤ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Warm Whisper: {ex.Message}");
            }
        }

        private void InitializeStatisticsTimer()
        {
            try
            {
                statisticsTimer = new System.Windows.Forms.Timer();
                statisticsTimer.Interval = 5000; // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                statisticsTimer.Tick += StatisticsTimer_Tick;
                
                LogMessage("‚úÖ –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}");
            }
        }

        #endregion

        /// <summary>
        /// üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å Bounded Channels
        /// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –¥—Ä–æ–ø—ã –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–µ
        /// </summary>
        private void InitializeBoundedPipeline()
        {
            try
            {
                LogMessage("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bounded Channels –ø–∞–π–ø–ª–∞–π–Ω–∞...");
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
                StartNormalizationWorker();
                StartSttWorker();
                StartTextProcessorWorker();
                
                LogMessage("‚úÖ Bounded Channels –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—â–µ–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –í–æ—Ä–∫–µ—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: capture ‚Üí normalize ‚Üí 16k mono float
        /// </summary>
        private void StartNormalizationWorker()
        {
            _pipelineCts = new CancellationTokenSource();
            var ct = _pipelineCts.Token;
            
            _ = Task.Run(async () =>
            {
                LogMessage("üîÑ –í–æ—Ä–∫–µ—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω");
                
                await foreach (var bufferWrapper in _captureChannel.Reader.ReadAllAsync(ct))
                {
                    try
                    {
                        var rawBuffer = bufferWrapper.Buffer; // –ü–æ–ª—É—á–∞–µ–º byte[] –∏–∑ ChannelByteBuffer
                        
                        // üöÄ MEASURE: Pipeline lag tracking
                        var lagMs = (Stopwatch.GetTimestamp() - bufferWrapper.EnqueuedAtTicks) * 1000.0 / Stopwatch.Frequency;
                        RealTimeTelemetry.RecordNormalizationLag((long)lagMs);
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç (WASAPI loopback 44100Hz stereo float32)
                        var inputFormat = WaveFormat.CreateIeeeFloatWaveFormat(44100, 2);
                        var wavData = ConvertToWavNormalized(rawBuffer, inputFormat);
                        
                        if (wavData.Length > 44) // –ü—Ä–æ–≤–µ—Ä—è–µ–º WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ArrayPool –¥–ª—è float –±—É—Ñ–µ—Ä–∞
                            var pooledFloatBuffer = ArrayPoolAudioBuffer.RentFloatBuffer((wavData.Length - 44) / 4);
                            Buffer.BlockCopy(wavData, 44, pooledFloatBuffer, 0, wavData.Length - 44);
                            
                            // üöÄ OPTIMIZED: DropOldest semantics –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                            var floatWrapper = new ChannelFloatBuffer(pooledFloatBuffer, (wavData.Length - 44) / 4);
                            if (!_mono16kChannel.Writer.TryWrite(floatWrapper))
                            {
                                // –ü–æ–ø—ã—Ç–∫–∞ DropOldest: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
                                if (_mono16kChannel.Reader.TryRead(out var oldBuffer))
                                {
                                    oldBuffer.Return(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –±—É—Ñ–µ—Ä –≤ –ø—É–ª
                                    RealTimeTelemetry.RecordBufferDrop();
                                    
                                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏
                                    if (!_mono16kChannel.Writer.TryWrite(floatWrapper))
                                    {
                                        LogMessage("‚ö†Ô∏è üî¥ –ö–†–ò–¢–ò–ß–ù–û: DropOldest –Ω–µ –ø–æ–º–æ–≥ - –∫–∞–Ω–∞–ª 16kHz –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!");
                                        ArrayPoolAudioBuffer.ReturnFloatBuffer(pooledFloatBuffer);
                                    }
                                    else
                                    {
                                        LogMessageDebug("üîÑ DropOldest: —Å—Ç–∞—Ä—ã–π –±—É—Ñ–µ—Ä —É–¥–∞–ª–µ–Ω, –Ω–æ–≤—ã–π –∑–∞–ø–∏—Å–∞–Ω");
                                    }
                                }
                                else
                                {
                                    LogMessage("‚ö†Ô∏è üî¥ –î–†–û–ü: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è - –∫–∞–Ω–∞–ª 16kHz –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –Ω–µ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
                                    ArrayPoolAudioBuffer.ReturnFloatBuffer(pooledFloatBuffer);
                                }
                            }
                            else
                            {
                                int queueEstimate = _mono16kChannel.Reader.Count;
                                LogMessageDebug($"üîä 16kHz –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª, –æ—á–µ—Ä–µ–¥—å ‚âà{queueEstimate}");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                    }
                    finally
                    {
                        // üöÄ ZERO-COPY: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –≤ –ø—É–ª
                        bufferWrapper.Return();
                    }
                }
                
                LogMessage("üîÑ –í–æ—Ä–∫–µ—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }, ct);
        }

        /// <summary>
        /// STT –≤–æ—Ä–∫–µ—Ä: 16k mono float ‚Üí Whisper STT ‚Üí —Ç–µ–∫—Å—Ç
        /// </summary>
        private void StartSttWorker()
        {
            var ct = _pipelineCts?.Token ?? CancellationToken.None;
            
            _ = Task.Run(async () =>
            {
                LogMessage("üîÑ STT –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω");
                EnsureWhisperReady(); // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ø–ª—ã–π Whisper
                
                await foreach (var floatWrapper in _mono16kChannel.Reader.ReadAllAsync(ct))
                {
                    try
                    {
                        var monoFloat = floatWrapper.Buffer; // –ü–æ–ª—É—á–∞–µ–º float[] –∏–∑ ChannelFloatBuffer
                        
                        // üöÄ MEASURE: Pipeline lag tracking
                        var lagMs = (Stopwatch.GetTimestamp() - floatWrapper.EnqueuedAtTicks) * 1000.0 / Stopwatch.Frequency;
                        RealTimeTelemetry.RecordSttLag((long)lagMs);
                        
                        // üöÄ RAW FLOAT WHISPER PROCESSING - –ë–ï–ó WAV —Ñ–∞–π–ª–æ–≤!
                        var stopwatch = Stopwatch.StartNew();
                        string finalText = await ProcessWhisperFloatAsync(monoFloat, ct);
                        stopwatch.Stop();
                        
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
                        RealTimeTelemetry.RecordWhisperLatency(stopwatch.ElapsedMilliseconds);
                        
                        if (!string.IsNullOrWhiteSpace(finalText))
                        {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Å backpressure
                            if (!_sttChannel.Writer.TryWrite(finalText))
                            {
                                LogMessage($"‚ö†Ô∏è üî¥ –î–†–û–ü: STT –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω! –¢–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω: '{finalText.Substring(0, Math.Min(50, finalText.Length))}...'");
                                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –¥—Ä–æ–ø–∞ –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
                                RealTimeTelemetry.RecordSttDrop();
                            }
                            else
                            {
                                int queueEstimate = _sttChannel.Reader.Count;
                                LogMessage($"üéØ RAW float STT: '{finalText}' (‚ö°{stopwatch.ElapsedMilliseconds}–º—Å, –æ—á–µ—Ä–µ–¥—å ‚âà{queueEstimate})");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ STT: {ex.Message}");
                    }
                    finally
                    {
                        // üöÄ ZERO-COPY: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç float –±—É—Ñ–µ—Ä–∞ –≤ –ø—É–ª
                        floatWrapper.Return();
                    }
                }
                
                LogMessage("üîÑ STT –≤–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }, ct);
        }

        /// <summary>
        /// –í–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: —Ç–µ–∫—Å—Ç ‚Üí –ø–µ—Ä–µ–≤–æ–¥ ‚Üí TTS
        /// </summary>
        private void StartTextProcessorWorker()
        {
            var ct = _pipelineCts?.Token ?? CancellationToken.None;
            
            _ = Task.Run(async () =>
            {
                LogMessage("üîÑ –í–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω");
                
                await foreach (var recognizedText in _sttChannel.Reader.ReadAllAsync(ct))
                {
                    try
                    {
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI
                        Invoke(() => {
                            txtRecognizedText.Text = recognizedText;
                            LogMessage($"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: '{recognizedText}'");
                        });
                        
                        // –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                        bool autoTranslate = false;
                        Invoke(() => autoTranslate = chkAutoTranslate.Checked);
                        
                        if (autoTranslate)
                        {
                            await TranslateAndSpeak(recognizedText);
                        }
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {ex.Message}");
                    }
                }
                
                LogMessage("üîÑ –í–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }, ct);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç WAV —Ñ–∞–π–ª –∏–∑ float32 –º–∞—Å—Å–∏–≤–∞
        /// </summary>
        private byte[] CreateWavFromFloats(float[] floats, int sampleRate, int channels)
        {
            var wav = new List<byte>();
            
            // WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
            int dataSize = floats.Length * 2; // 16-bit = 2 bytes per sample
            int fileSize = 36 + dataSize;
            
            wav.AddRange(Encoding.ASCII.GetBytes("RIFF"));
            wav.AddRange(BitConverter.GetBytes(fileSize));
            wav.AddRange(Encoding.ASCII.GetBytes("WAVE"));
            wav.AddRange(Encoding.ASCII.GetBytes("fmt "));
            wav.AddRange(BitConverter.GetBytes(16)); // PCM chunk size
            wav.AddRange(BitConverter.GetBytes((short)1)); // PCM format
            wav.AddRange(BitConverter.GetBytes((short)channels));
            wav.AddRange(BitConverter.GetBytes(sampleRate));
            wav.AddRange(BitConverter.GetBytes(sampleRate * channels * 2)); // Byte rate
            wav.AddRange(BitConverter.GetBytes((short)(channels * 2))); // Block align
            wav.AddRange(BitConverter.GetBytes((short)16)); // 16-bit
            wav.AddRange(Encoding.ASCII.GetBytes("data"));
            wav.AddRange(BitConverter.GetBytes(dataSize));
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float32 –≤ int16
            foreach (var sample in floats)
            {
                float clamped = Math.Max(-1.0f, Math.Min(1.0f, sample));
                short intSample = (short)(clamped * 32767f);
                wav.AddRange(BitConverter.GetBytes(intSample));
            }
            
            return wav.ToArray();
        }

        /// <summary>
        /// üöÄ REVOLUTIONARY: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç float[] –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Whisper.NET –±–µ–∑ WAV —Ñ–∞–π–ª–æ–≤
        /// –≠–∫–æ–Ω–æ–º–∏—Ç —Ç—ã—Å—è—á–∏ –æ–ø–µ—Ä–∞—Ü–∏–π I/O –∏ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        /// </summary>
        private async Task<string> ProcessWhisperFloatAsync(float[] audioData, CancellationToken ct)
        {
            if (_whisperProcessor == null || audioData == null || audioData.Length == 0)
                return "";

            try
            {
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ - –∏–∑–±–µ–≥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∏—à–∏–Ω—ã
                float rms = 0;
                for (int i = 0; i < audioData.Length; i++)
                {
                    rms += audioData[i] * audioData[i];
                }
                rms = (float)Math.Sqrt(rms / audioData.Length);
                
                if (rms < 0.001f) // –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ
                {
                    return "";
                }

                // üöÄ ZERO-ALLOCATION: –°–æ–∑–¥–∞–µ–º WAV –≤ –ø–∞–º—è—Ç–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∞–ª–ª–æ–∫–∞—Ü–∏—è–º–∏
                using var memoryStream = new MemoryStream();
                var waveFormat = new WaveFormat(16000, 16, 1); // 16kHz, 16-bit, mono
                
                using (var writer = new WaveFileWriter(memoryStream, waveFormat))
                {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float [-1..1] –≤ PCM16 —Å clamp –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    for (int i = 0; i < audioData.Length; i++)
                    {
                        var sample = (short)(Math.Clamp(audioData[i], -1f, 1f) * short.MaxValue);
                        writer.WriteSample(sample);
                    }
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ WAV –¥–∞–Ω–Ω—ã–µ
                var wavData = memoryStream.ToArray();
                
                // üöÄ RAW WHISPER PROCESSING: –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Whisper.NET
                using var whisperStream = new MemoryStream(wavData);
                var result = new StringBuilder();
                
                await foreach (var segment in _whisperProcessor.ProcessAsync(whisperStream, ct))
                {
                    if (!string.IsNullOrWhiteSpace(segment.Text))
                    {
                        string cleanText = segment.Text.Trim();
                        if (!IsPlaceholderToken(cleanText))
                        {
                            result.Append(cleanText + " ");
                        }
                    }
                }
                
                return result.ToString().Trim();
            }
            catch (OperationCanceledException)
            {
                return "";
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ RAW float STT: {ex.Message}");
                return "";
            }
        }

        private void InitializeTranslation()
        {
            try
            {
                googleTranslateClient = new RestClient("https://translate.googleapis.com");
                LogMessage("‚úÖ Google Translate –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {ex.Message}");
            }
        }

        private void InitializeTimer()
        {
            audioLevelTimer = new System.Windows.Forms.Timer();
            audioLevelTimer.Interval = 250; // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 250–º—Å (-60% –≤—ã–∑–æ–≤–æ–≤)
            audioLevelTimer.Tick += AudioLevelTimer_Tick;
        }

        private void InitializeProcessingMode()
        {
            LogMessage("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏...");
            
            cbProcessingMode.Items.Clear();
            cbProcessingMode.Items.Add("üîÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (–∂–¥–µ—Ç –ø–∞—É–∑—ã)");
            cbProcessingMode.Items.Add("‚ö° –ü–æ—Ç–æ–∫–æ–≤—ã–π (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫)");
            cbProcessingMode.Items.Add("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω (–∫–∞–∫ –≤ MORT)");
            cbProcessingMode.SelectedIndex = 0; // Default to original mode
            currentProcessingMode = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            cbProcessingMode.SelectedIndexChanged += ProcessingMode_Changed;
            
            LogMessage("‚úÖ –†–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        }

        private void ProcessingMode_Changed(object sender, EventArgs e)
        {
            currentProcessingMode = cbProcessingMode.SelectedIndex; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            isStreamingMode = currentProcessingMode == 1;
            var selectedMode = currentProcessingMode switch
            {
                1 => "–ü–æ—Ç–æ–∫–æ–≤—ã–π",
                2 => "–ú–∏–∫—Ä–æ—Ñ–æ–Ω (MORT)",
                _ => "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π"
            };
            LogMessage($"üîß –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selectedMode}");
            
            if (currentProcessingMode == 1)
            {
                LogMessage("‚ö° –í–∫–ª—é—á–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—É–∑");
            }
            else if (currentProcessingMode == 2)
            {
                LogMessage("üé§ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ - –∫–∞–∫ –≤ MORT —Å WaveInEvent");
            }
            else
            {
                LogMessage("üîÑ –í–∫–ª—é—á–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –æ–∂–∏–¥–∞–Ω–∏–µ –ø–∞—É–∑ –≤ —Ä–µ—á–∏");
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            userSettings.ProcessingMode = currentProcessingMode;
            UserSettings.AutoSave(userSettings);
        }

        private async void InitializeStreamingComponents()
        {
            LogMessage("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");
            
            try
            {
                sessionStartTime = DateTime.Now;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Whisper
                streamingProcessor = new StreamingWhisperProcessor();
                streamingProcessor.OnTextRecognized += OnStreamingTextRecognized;
                streamingProcessor.OnError += OnStreamingError;
                streamingProcessor.OnStats += OnStreamingStats;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Whisper –º–æ–¥–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                bool whisperInitialized = await streamingProcessor.InitializeAsync(WhisperModelPath);
                if (!whisperInitialized)
                {
                    LogMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π Whisper");
                    return;
                }
                
                LogMessage("‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {ex.Message}");
            }
        }

        #endregion

        #region Streaming Event Handlers
        
        private void OnStreamingTextRecognized(string text, double confidence)
        {
            // üõ°Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã
            if (isDisposed || string.IsNullOrWhiteSpace(text) || !isCapturing || !isCollectingAudio)
            {
                LogMessage($"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ OnStreamingTextRecognized: isDisposed={isDisposed}, isCapturing={isCapturing}, text='{text?.Substring(0, Math.Min(20, text?.Length ?? 0))}...'");
                return;
            }
                
            try
            {
                LogMessage($"üéØ WHISPER –†–ï–ó–£–õ–¨–¢–ê–¢ (RAW): '{text}' [confidence: {confidence:P1}]");
                
                // üßπ –û—á–∏—â–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                var cleanText = AdvancedSpeechFilter.CleanEmotionalMarkers(text);
                if (string.IsNullOrWhiteSpace(cleanText))
                {
                    LogMessage($"üö´ –ü—Ä–æ–ø—É—â–µ–Ω —Ç–µ–∫—Å—Ç —Å —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏: '{text}' -> '{cleanText}'");
                    return;
                }

                LogMessage($"‚ú® –û–ß–ò–©–ï–ù–ù–´–ô –¢–ï–ö–°–¢: '{cleanText}'");

                BeginInvoke(() =>
                {
                    LogMessage($"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ({confidence:P1}): {cleanText}");
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
                    txtRecognizedText.Text += (txtRecognizedText.Text.Length > 0 ? " " : "") + cleanText;
                    txtRecognizedText.SelectionStart = txtRecognizedText.Text.Length;
                    txtRecognizedText.ScrollToCaret();
                    
                    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
                    LogMessage($"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: '{cleanText}'");
                    _ = Task.Run(async () => {
                        try
                        {
                            await TranslateStreamingText(cleanText);
                            LogMessage($"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è: '{cleanText}'");
                        }
                        catch (Exception ex)
                        {
                            LogMessage($"‚ùå –û—à–∏–±–∫–∞ –≤ TranslateStreamingText: {ex.Message}");
                        }
                    });
                });
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {ex.Message}");
            }
        }
        
        private void OnStreamingError(Exception error)
        {
            if (isDisposed) return;
            
            BeginInvoke(() =>
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {error.Message}");
            });
        }
        
        private void OnStreamingStats(StreamingStats stats)
        {
            if (isDisposed) return;
            
            BeginInvoke(() =>
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ UI
                lblStats.Text = $"–û–∫–æ–Ω: {stats.ProcessedWindows} | " +
                               $"–û—á–µ—Ä–µ–¥—å: {stats.QueueSize} | " +
                               $"–ë—É—Ñ–µ—Ä: {stats.BufferFillLevel:P1} | " +
                               $"–í—Ä–µ–º—è: {stats.AverageProcessingTime:F0}–º—Å";
                
                totalProcessedFrames = stats.ProcessedWindows;
            });
        }
        
        private async Task TranslateStreamingText(string text)
        {
            try
            {
                LogMessage($"üîÑ TranslateStreamingText –ù–ê–ß–ê–õ–û –¥–ª—è: '{text}'");
                
                // –¢–µ–∫—Å—Ç —É–∂–µ –æ—á–∏—â–µ–Ω –≤ OnStreamingTextRecognized
                if (string.IsNullOrWhiteSpace(text))
                {
                    LogMessage($"üö´ –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞");
                    return;
                }

                string sourceLanguage = "";
                string targetLanguage = "";
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –≤ UI –ø–æ—Ç–æ–∫–µ
                if (InvokeRequired)
                {
                    Invoke(() =>
                    {
                        sourceLanguage = GetLanguageCode(cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
                        targetLanguage = GetLanguageCode(cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π");
                    });
                }
                else
                {
                    sourceLanguage = GetLanguageCode(cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
                    targetLanguage = GetLanguageCode(cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π");
                }
                
                LogMessage($"üìù –Ø–∑—ã–∫–∏: {sourceLanguage} -> {targetLanguage}");
                
                if (sourceLanguage == targetLanguage)
                {
                    LogMessage($"‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã ({sourceLanguage}), –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
                    BeginInvoke(() =>
                    {
                        txtTranslatedText.Text += (txtTranslatedText.Text.Length > 0 ? " " : "") + text;
                        txtTranslatedText.SelectionStart = txtTranslatedText.Text.Length;
                        txtTranslatedText.ScrollToCaret();
                    });
                    
                    // –û–∑–≤—É—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                    if (chkAutoTranslate.Checked)
                    {
                        LogMessage($"üîä –û–∑–≤—É—á–∏–≤–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞: '{text}'");
                        await SpeakText(text);
                    }
                    else
                    {
                        LogMessage("üîá AutoTranslate –æ—Ç–∫–ª—é—á–µ–Ω, –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç");
                    }
                    return;
                }
                
                LogMessage($"üåê –í—ã–∑—ã–≤–∞–µ–º TranslateText –¥–ª—è: '{text}'");
                var translatedText = await TranslateText(text, sourceLanguage, targetLanguage);
                
                if (!string.IsNullOrWhiteSpace(translatedText))
                {
                    LogMessage($"‚úÖ –ü–ï–†–ï–í–û–î –ü–û–õ–£–ß–ï–ù: '{text}' -> '{translatedText}'");
                    
                    BeginInvoke(() =>
                    {
                        txtTranslatedText.Text += (txtTranslatedText.Text.Length > 0 ? " " : "") + translatedText;
                        txtTranslatedText.SelectionStart = txtTranslatedText.Text.Length;
                        txtTranslatedText.ScrollToCaret();
                        
                        // TTS –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                        if (chkAutoTranslate.Checked) // –ò—Å–ø–æ–ª—å–∑—É–µ–º chkAutoTranslate –≤–º–µ—Å—Ç–æ chkEnableTTS
                        {
                            LogMessage($"üîä –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥: '{translatedText}'");
                            _ = Task.Run(async () => {
                                try
                                {
                                    await SpeakText(translatedText);
                                    LogMessage($"‚úÖ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è: '{translatedText}'");
                                }
                                catch (Exception ex)
                                {
                                    LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {ex.Message}");
                                }
                            });
                        }
                        else
                        {
                            LogMessage("üîá AutoTranslate –æ—Ç–∫–ª—é—á–µ–Ω, –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç");
                        }
                    });
                }
                else
                {
                    LogMessage($"‚ùå TranslateText –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{text}'");
                }
                
                LogMessage($"üéØ TranslateStreamingText –ó–ê–í–ï–†–®–ï–ù–û –¥–ª—è: '{text}'");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {ex.Message}");
            }
        }

        #endregion

        #region User Settings

        private void LoadUserSettings()
        {
            try
            {
                userSettings = UserSettings.LoadSettings();
                userSettings.ApplySafeDefaults();
                
                LogMessage("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
                ApplySettingsToUI();
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
                userSettings = new UserSettings();
            }
        }

        private void ApplySettingsToUI()
        {
            try
            {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Ñ–æ—Ä–º–µ
                if (userSettings.WindowLocationX >= 0 && userSettings.WindowLocationY >= 0)
                {
                    this.StartPosition = FormStartPosition.Manual;
                    this.Location = new Point(userSettings.WindowLocationX, userSettings.WindowLocationY);
                }
                
                this.Size = new Size(userSettings.WindowWidth, userSettings.WindowHeight);
                
                // üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "—Å–∫—É–∫–æ–∂–∏–≤–∞–Ω–∏—è"
                this.MinimumSize = new Size(800, 570);
                if (this.Width < 800 || this.Height < 570)
                {
                    this.Size = new Size(800, 570);
                    LogMessage("‚ö†Ô∏è –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—ã–ª —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ");
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                numThreshold.Value = (decimal)userSettings.VoiceThreshold;
                voiceThreshold = userSettings.VoiceThreshold;
                
                LogMessage($"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        private void ApplySettingsAfterInitialization()
        {
            try
            {
                // –í—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                if (!string.IsNullOrEmpty(userSettings.SelectedAudioDevice))
                {
                    for (int i = 0; i < cbSpeakerDevices.Items.Count; i++)
                    {
                        if (cbSpeakerDevices.Items[i] is AudioDevice device && 
                            device.Name.Contains(userSettings.SelectedAudioDevice))
                        {
                            cbSpeakerDevices.SelectedIndex = i;
                            break;
                        }
                    }
                }

                // –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫–∏
                if (cbSourceLang.Items.Contains(userSettings.SourceLanguage))
                    cbSourceLang.SelectedItem = userSettings.SourceLanguage;
                
                if (cbTargetLang.Items.Contains(userSettings.TargetLanguage))
                    cbTargetLang.SelectedItem = userSettings.TargetLanguage;

                // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if (userSettings.ProcessingMode >= 0 && userSettings.ProcessingMode < cbProcessingMode.Items.Count)
                {
                    cbProcessingMode.SelectedIndex = userSettings.ProcessingMode;
                    currentProcessingMode = userSettings.ProcessingMode; // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                }

                // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
                chkAutoTranslate.Checked = userSettings.AutoTranslateAndTTS;

                LogMessage($"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º: {ex.Message}");
            }
        }

        private void SaveCurrentSettings()
        {
            try
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI
                userSettings.WindowWidth = this.Width;
                userSettings.WindowHeight = this.Height;
                userSettings.WindowLocationX = this.Location.X;
                userSettings.WindowLocationY = this.Location.Y;

                if (cbSpeakerDevices.SelectedItem is AudioDevice selectedDevice)
                    userSettings.SelectedAudioDevice = selectedDevice.Name;

                userSettings.SourceLanguage = cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";
                userSettings.TargetLanguage = cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π";
                userSettings.VoiceThreshold = voiceThreshold;
                userSettings.ProcessingMode = currentProcessingMode; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                userSettings.AutoTranslateAndTTS = chkAutoTranslate.Checked;

                UserSettings.SaveSettings(userSettings);
                LogMessage("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        private void OnSettingChanged()
        {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            UserSettings.AutoSave(userSettings, 2000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        }

        private void SubscribeToSettingsEvents()
        {
            try
            {
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ComboBox'–æ–≤
                cbSpeakerDevices.SelectedIndexChanged += (s, e) => {
                    if (cbSpeakerDevices.SelectedItem is AudioDevice selectedDevice)
                    {
                        userSettings.SelectedAudioDevice = selectedDevice.Name;
                        OnSettingChanged();
                    }
                };

                cbSourceLang.SelectedIndexChanged += (s, e) => {
                    userSettings.SourceLanguage = cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";
                    OnSettingChanged();
                };

                cbTargetLang.SelectedIndexChanged += (s, e) => {
                    userSettings.TargetLanguage = cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π";
                    OnSettingChanged();
                };

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è CheckBox'–æ–≤
                chkAutoTranslate.CheckedChanged += (s, e) => {
                    userSettings.AutoTranslateAndTTS = chkAutoTranslate.Checked;
                    OnSettingChanged();
                };

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–∫–Ω–∞
                this.LocationChanged += (s, e) => {
                    if (this.WindowState == FormWindowState.Normal)
                    {
                        userSettings.WindowLocationX = this.Location.X;
                        userSettings.WindowLocationY = this.Location.Y;
                        OnSettingChanged();
                    }
                };

                this.SizeChanged += (s, e) => {
                    if (this.WindowState == FormWindowState.Normal)
                    {
                        userSettings.WindowWidth = this.Width;
                        userSettings.WindowHeight = this.Height;
                        OnSettingChanged();
                    }
                };

                LogMessage("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        #endregion

        #region Audio Capture

        private void btnStartCapture_Click(object sender, EventArgs e)
        {
            // üöÄ –ù–û–í–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
            StartStableAudioCapture();
        }

        private void btnStopCapture_Click(object sender, EventArgs e)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ–±—ã—á–Ω—ã–π —Å—Ç–æ–ø –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
            if (isCapturing)
            {
                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
                btnStopCapture.Enabled = false;
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
                _ = Task.Run(async () =>
                {
                    try
                    {
                        // üöÄ –ù–û–í–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
                        await StopStableAudioCapture();
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
                    }
                    finally
                    {
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        if (!IsDisposed && IsHandleCreated)
                        {
                            try
                            {
                                Invoke(() =>
                                {
                                    btnStopCapture.Enabled = true;
                                    btnStartCapture.Enabled = true;
                                });
                            }
                            catch (ObjectDisposedException)
                            {
                                // –§–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                            }
                        }
                    }
                });
            }
            else
            {
                // –ï—Å–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã
                ResetSystemToInitialState();
            }
        }

        /// <summary>
        /// üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏–æ-–∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        private async void StartStableAudioCapture()
        {
            try
            {
                if (isCapturing)
                {
                    LogMessage("‚ö†Ô∏è –ó–∞—Ö–≤–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");
                    return;
                }

                LogMessage("üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∑–∞—Ö–≤–∞—Ç–∞...");

                // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                btnStartCapture.Enabled = false;
                btnStopCapture.Enabled = true;

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ UI
                lblStatus.Text = "üéß –ó–∞—Ö–≤–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω";
                lblStatus.ForeColor = Color.Green;
                txtRecognizedText.Text = "üîá –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—á–∏...";
                txtTranslatedText.Text = "üîá –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞...";

                // –ó–∞–ø—É—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
                if (stableAudioCapture != null)
                {
                    await stableAudioCapture.StartCaptureAsync();
                }

                // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if (statisticsTimer != null)
                {
                    statisticsTimer.Start();
                }

                // –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è UI
                if (audioLevelTimer != null)
                {
                    audioLevelTimer.Start();
                }

                isCapturing = true;
                LogMessage("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
                
                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
                btnStartCapture.Enabled = true;
                btnStopCapture.Enabled = false;
                lblStatus.Text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞";
                lblStatus.ForeColor = Color.Red;
                isCapturing = false;
            }
        }

        /// <summary>
        /// üöÄ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏–æ-–∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        private async Task StopStableAudioCapture()
        {
            try
            {
                LogMessage("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞—Ö–≤–∞—Ç–∞...");

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
                audioLevelTimer?.Stop();
                statisticsTimer?.Stop();

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
                if (stableAudioCapture != null)
                {
                    await stableAudioCapture.StopCaptureAsync();
                }

                // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–æ–≤
                if (slidingWindowAggregator != null)
                {
                    await slidingWindowAggregator.FlushAsync();
                }

                // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ TTS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (stableTtsEngine != null)
                {
                    await stableTtsEngine.ClearQueueAsync();
                }

                isCapturing = false;
                
                this.BeginInvoke(() =>
                {
                    btnStartCapture.Enabled = true;
                    btnStopCapture.Enabled = false;
                    lblStatus.Text = "üîá –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
                    lblStatus.ForeColor = Color.Red;
                    if (progressBarAudio != null)
                        progressBarAudio.Value = 0;
                });

                LogMessage("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
            }
        }

        private void StartAudioCapture()
        {
            try
            {
                if (cbSpeakerDevices.SelectedItem is not AudioDevice selectedDevice)
                {
                    LogMessage("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!");
                    return;
                }

                if (!File.Exists(WhisperModelPath))
                {
                    LogMessage($"‚ùå Whisper –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {WhisperModelPath}");
                    return;
                }

                LogMessage("üéß –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ...");
                LogMessage($"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: isCapturing={isCapturing}, isCollectingAudio={isCollectingAudio}");
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–æ—Å SmartAudioManager –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                smartAudioManager?.ResetForNewStart();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                int processingMode = currentProcessingMode; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                
                if (processingMode == 2) // –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WaveInEvent –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                    waveInCapture = new WaveInEvent();
                    waveInCapture.WaveFormat = new WaveFormat(44100, 1); // 44.1kHz mono
                    waveInCapture.BufferMilliseconds = 100;
                    waveInCapture.DataAvailable += OnMicrophoneDataAvailable;
                    waveInCapture.RecordingStopped += OnMicrophoneRecordingStopped;
                    waveInCapture.StartRecording();
                    LogMessage("üé§ –†–µ–∂–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: WaveInEvent –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                }
                else
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WASAPI Loopback –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ
                    wasapiCapture = new WasapiLoopbackCapture(selectedDevice.Device);
                    wasapiCapture.DataAvailable += OnAudioDataAvailable;
                    wasapiCapture.RecordingStopped += OnRecordingStopped;
                    wasapiCapture.StartRecording();
                    LogMessage("üîä –†–µ–∂–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ: WASAPI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                }
                
                audioLevelTimer?.Start();
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                isCapturing = true;
                isCollectingAudio = false; // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø–∏—Å–∏
                audioBuffer.Clear();
                audioLogCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏;
                
                LogMessage($"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: isCapturing={isCapturing}, isCollectingAudio={isCollectingAudio}");
                LogMessage($"üìä –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω, —Ä–∞–∑–º–µ—Ä: {audioBuffer.Count}");
                
                // Update UI
                btnStartCapture.Enabled = false;
                btnStopCapture.Enabled = true;
                lblStatus.Text = "üéß –ó–∞—Ö–≤–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω";
                lblStatus.ForeColor = Color.Green;
                txtRecognizedText.Text = "üîá –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—á–∏...";
                txtTranslatedText.Text = "üîá –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞...";
                
                LogMessage($"‚úÖ –ó–∞—Ö–≤–∞—Ç –∑–∞–ø—É—â–µ–Ω: {selectedDevice.Name}");
                LogMessage($"üéöÔ∏è –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {voiceThreshold:F3}");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
            }
        }

        private async Task StopAudioCapture()
        {
            try
            {
                LogMessage("‚èπÔ∏è –ü–û–õ–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´...");
                
                // üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                if (!isCapturing && !isCollectingAudio)
                {
                    LogMessage("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
                    return;
                }
                
                // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
                isCapturing = false;
                isCollectingAudio = false;
                isTTSActive = false; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º TTS —Ñ–ª–∞–≥
                audioLevelTimer?.Stop();
                
                // 2. –û—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
                audioBuffer.Clear();
                LogMessage("üóëÔ∏è –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω");
                
                // 3. –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ SmartAudioManager
                if (smartAudioManager != null)
                {
                    smartAudioManager.ClearQueue();
                    smartAudioManager.PauseCapture("full_stop");
                    LogMessage("üóëÔ∏è SmartAudioManager: –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, –∑–∞—Ö–≤–∞—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
                
                // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö TTS –æ–ø–µ—Ä–∞—Ü–∏–π
                if (speechSynthesizer != null)
                {
                    try
                    {
                        speechSynthesizer.SpeakAsyncCancelAll();
                        
                        // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                        await Task.Delay(200);
                        
                        LogMessage("üõë –í—Å–µ TTS –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã");
                    }
                    catch (OperationCanceledException)
                    {
                        LogMessage("üõë TTS –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω—ã");
                    }
                    catch (Exception ttsEx)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS: {ttsEx.Message}");
                    }
                }
                
                // 5. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
                try
                {
                    if (streamingProcessor != null)
                    {
                        // üîå –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –ü–ï–†–ï–î –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                        try
                        {
                            streamingProcessor.OnTextRecognized -= OnStreamingTextRecognized;
                            streamingProcessor.OnError -= OnStreamingError;
                            streamingProcessor.OnStats -= OnStreamingStats;
                            LogMessage("üîå –°–æ–±—ã—Ç–∏—è StreamingProcessor –æ—Ç–∫–ª—é—á–µ–Ω—ã");
                        }
                        catch (Exception eventEx)
                        {
                            LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π: {eventEx.Message}");
                        }
                        
                        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        using (var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(2)))
                        {
                            await streamingProcessor.DisposeAsync().AsTask().WaitAsync(timeoutCts.Token);
                        }
                        streamingProcessor = null;
                        LogMessage("üîá StreamingWhisperProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                }
                catch (OperationCanceledException)
                {
                    LogMessage("‚ö†Ô∏è StreamingProcessor –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É");
                    streamingProcessor = null; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ StreamingProcessor: {ex.Message}");
                    streamingProcessor = null; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫
                }
                
                try
                {
                    if (audioResampler != null)
                    {
                        audioResampler.Dispose();
                        audioResampler = null;
                        LogMessage("üîá AudioResampler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AudioResampler: {ex.Message}");
                }
                
                // 6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –æ—Ç–ø–∏—Å–∫–æ–π –æ—Ç —Å–æ–±—ã—Ç–∏–π
                try
                {
                    if (wasapiCapture != null)
                    {
                        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
                        try
                        {
                            wasapiCapture.DataAvailable -= OnAudioDataAvailable;
                            LogMessage("üîå WASAPI —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
                        }
                        catch (Exception eventEx)
                        {
                            LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ WASAPI —Å–æ–±—ã—Ç–∏–π: {eventEx.Message}");
                        }
                        
                        wasapiCapture.StopRecording();
                        wasapiCapture.Dispose();
                        wasapiCapture = null;
                        LogMessage("üîá WASAPI –∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WASAPI: {ex.Message}");
                    wasapiCapture = null; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º
                }
                
                try
                {
                    if (waveInCapture != null)
                    {
                        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
                        try
                        {
                            waveInCapture.DataAvailable -= OnAudioDataAvailable;
                            LogMessage("üîå WaveIn —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
                        }
                        catch (Exception eventEx)
                        {
                            LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ WaveIn —Å–æ–±—ã—Ç–∏–π: {eventEx.Message}");
                        }
                        
                        waveInCapture.StopRecording();
                        waveInCapture.Dispose();
                        waveInCapture = null;
                        LogMessage("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {ex.Message}");
                    waveInCapture = null; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º
                }
                
                // 7. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
                GC.Collect();
                GC.WaitForPendingFinalizers();
                
                // 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                Invoke(() => {
                    btnStartCapture.Enabled = true;
                    btnStopCapture.Enabled = false;
                    lblStatus.Text = "üîá –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
                    lblStatus.ForeColor = Color.Red;
                    progressAudioLevel.Value = 0;
                    lblAudioLevel.Text = "üìä –£—Ä–æ–≤–µ–Ω—å: 0%";
                    txtRecognizedText.Text = "‚èπÔ∏è –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
                    txtTranslatedText.Text = "‚èπÔ∏è –û—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã";
                });
                
                LogMessage("‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –û–°–¢–ê–ù–û–í–õ–ï–ù–ê –ò –û–ß–ò–©–ï–ù–ê");
                LogMessage("üîÑ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {ex.Message}");
                
                // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                try
                {
                    isCapturing = false;
                    isCollectingAudio = false;
                    audioBuffer.Clear();
                    wasapiCapture?.Dispose();
                    waveInCapture?.Dispose();
                    wasapiCapture = null;
                    waveInCapture = null;
                    
                    Invoke(() => {
                        btnStartCapture.Enabled = true;
                        btnStopCapture.Enabled = false;
                        lblStatus.Text = "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏";
                        lblStatus.ForeColor = Color.Red;
                    });
                }
                catch
                {
                    // –ï—Å–ª–∏ –¥–∞–∂–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    LogMessage("üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã");
                }
            }
        }

        /// <summary>
        /// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π)
        /// </summary>
        private void EmergencyStop()
        {
            try
            {
                LogMessage("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í!");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
                isCapturing = false;
                isCollectingAudio = false;
                isStreamingMode = false;
                
                // –û—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
                audioBuffer.Clear();
                
                // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SmartAudioManager
                try 
                { 
                    smartAudioManager?.EmergencyStop(); 
                    LogMessage("‚úÖ SmartAudioManager —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                } 
                catch (Exception ex) 
                { 
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SmartAudioManager: {ex.Message}"); 
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                try { wasapiCapture?.StopRecording(); } catch { }
                try { wasapiCapture?.Dispose(); } catch { }
                try { waveInCapture?.StopRecording(); } catch { }
                try { waveInCapture?.Dispose(); } catch { }
                wasapiCapture = null;
                waveInCapture = null;
                
                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö TTS
                try { speechSynthesizer?.SpeakAsyncCancelAll(); } catch { }
                
                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
                try { audioLevelTimer?.Stop(); } catch { }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.Collect();
                
                LogMessage("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                LogMessage($"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        /// </summary>
        private void ResetSystemToInitialState()
        {
            try
            {
                LogMessage("üîÑ –°–ë–†–û–° –°–ò–°–¢–ï–ú–´ –ö –ù–ê–ß–ê–õ–¨–ù–û–ú–£ –°–û–°–¢–û–Ø–ù–ò–Æ...");
                
                // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                EmergencyStop();
                
                // –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
                currentAudioLevel = 0f;
                lastVoiceActivity = DateTime.Now;
                recordingStartTime = DateTime.Now;
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                Invoke(() => {
                    btnStartCapture.Enabled = true;
                    btnStopCapture.Enabled = false;
                    lblStatus.Text = "üîÑ –°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞";
                    lblStatus.ForeColor = Color.Green;
                    progressAudioLevel.Value = 0;
                    lblAudioLevel.Text = "üìä –£—Ä–æ–≤–µ–Ω—å: 0%";
                    txtRecognizedText.Text = "üîÑ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É";
                    txtTranslatedText.Text = "üîÑ –°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞";
                    progressBar.Visible = false;
                });
                
                LogMessage("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {ex.Message}");
            }
        }

        private void OnAudioDataAvailable(object? sender, WaveInEventArgs e)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –Ω–µ –±—ã–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞
            if (IsDisposed || !IsHandleCreated || isDisposed)
            {
                return; // –§–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
            }
            
            // üöÄ THROTTLING –ê–£–î–ò–û–û–ë–†–ê–ë–û–¢–ö–ò: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            DateTime now = DateTime.Now;
            if ((now - lastAudioProcessTime).TotalMilliseconds < AUDIO_THROTTLE_MS)
            {
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã
            }
            lastAudioProcessTime = now;
            
            if (!isCapturing) 
            {
                LogMessageDebug("‚ö†Ô∏è OnAudioDataAvailable: isCapturing=false, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ");
                return;
            }

            // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Bounded Channels –ø–∞–π–ø–ª–∞–π–Ω
            try
            {
                // Calculate audio level –¥–ª—è UI
                float level = CalculateAudioLevel(e.Buffer, e.BytesRecorded);
                currentAudioLevel = level;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if (level > voiceThreshold)
                {
                    lastVoiceActivity = DateTime.Now;
                    
                    if (!isCollectingAudio)
                    {
                        isCollectingAudio = true;
                        audioBuffer.Clear();
                        LogMessageDebug($"üé§ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ, —É—Ä–æ–≤–µ–Ω—å: {level:F3}");
                    }
                    
                    // üöÄ ZERO-COPY AUDIO CAPTURE —Å ArrayPool
                    var pooledBuffer = ArrayPoolAudioBuffer.RentByteBuffer(e.BytesRecorded);
                    Array.Copy(e.Buffer, pooledBuffer, e.BytesRecorded);
                    
                    // –°–æ–∑–¥–∞–µ–º ChannelByteBuffer - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç –±—É—Ñ–µ—Ä –≤ –ø—É–ª –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    var buffer = new ChannelByteBuffer(pooledBuffer, e.BytesRecorded);
                    
                    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏  
                    audioBuffer.AddRange(pooledBuffer.AsSpan(0, e.BytesRecorded).ToArray());
                    
                    // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í –ö–ê–ù–ê–õ –í–ú–ï–°–¢–û –ü–†–Ø–ú–û–ô –û–ë–†–ê–ë–û–¢–ö–ò
                    if (_captureChannel.Writer.TryWrite(buffer))
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
                        int queueEstimate = _captureChannel.Reader.Count;
                        LogMessageDebug($"üìä –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {e.BytesRecorded} –±–∞–π—Ç, –æ—á–µ—Ä–µ–¥—å ‚âà{queueEstimate}");
                    }
                    else
                    {
                        LogMessage("‚ö†Ô∏è üî¥ –î–†–û–ü: –ö–∞–Ω–∞–ª –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω! –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∏–∑-–∑–∞ backpressure");
                        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–æ–ø–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                        if (DateTime.Now.Subtract(_lastDropLogTime).TotalSeconds > 5)
                        {
                            LogMessage($"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –î—Ä–æ–ø—ã –≤ –∞—É–¥–∏–æ–∫–∞–Ω–∞–ª–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫");
                            _lastDropLogTime = DateTime.Now;
                        }
                    }
                }
                else if (isCollectingAudio)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
                    if ((DateTime.Now - lastVoiceActivity).TotalSeconds > 2.0)
                    {
                        LogMessageDebug($"üîá –ü–∞—É–∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏. –ë—É—Ñ–µ—Ä: {audioBuffer.Count} –±–∞–π—Ç");
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π
                        if (audioBuffer.Count > 16000) // –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        {
                            // üöÄ ZERO-COPY: –ò—Å–ø–æ–ª—å–∑—É–µ–º ArrayPool –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
                            var pooledFinalBuffer = ArrayPoolAudioBuffer.RentByteBuffer(audioBuffer.Count);
                            audioBuffer.ToArray().CopyTo(pooledFinalBuffer, 0);
                            
                            var buffer = new ChannelByteBuffer(pooledFinalBuffer, audioBuffer.Count);
                            if (_captureChannel.Writer.TryWrite(buffer))
                            {
                                LogMessage($"üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {audioBuffer.Count} –±–∞–π—Ç");
                            }
                            else
                            {
                                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                                ArrayPoolAudioBuffer.ReturnByteBuffer(pooledFinalBuffer);
                            }
                        }
                        
                        isCollectingAudio = false;
                        audioBuffer.Clear();
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞—É–¥–∏–æ: {ex.Message}");
            }
        }

        #endregion

        #region Microphone Audio Processing
        
        private void ProcessStreamingAudio(byte[] buffer, int bytesRecorded, float level)
        {
            try
            {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Å—ç–º–ø–ª–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (audioResampler == null)
                {
                    var currentWaveFormat = wasapiCapture?.WaveFormat ?? new WaveFormat(44100, 16, 2);
                    audioResampler = new AudioResampler(currentWaveFormat.SampleRate, currentWaveFormat.Channels);
                    LogMessage($"üîß –†–µ—Å—ç–º–ø–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {currentWaveFormat.SampleRate}Hz, {currentWaveFormat.Channels}ch");
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º byte array –≤ float array –∏ —Ä–µ—Å—ç–º–ø–ª–∏—Ä—É–µ–º
                var processingWaveFormat = wasapiCapture?.WaveFormat ?? new WaveFormat(44100, 16, 2);
                var resampledAudio = audioResampler.ResampleFromBytes(buffer.Take(bytesRecorded).ToArray(), processingWaveFormat);
                
                if (resampledAudio.Length > 0)
                {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                    streamingProcessor?.AddAudioSamples(resampledAudio);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    totalProcessedFrames++;
                    if (totalProcessedFrames % 10 == 0) // –ö–∞–∂–¥—ã–µ 10 —Ñ—Ä–µ–π–º–æ–≤
                    {
                        Invoke(() => {
                            txtRecognizedText.Text = $"üåä –°—Ç—Ä–∏–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω (—É—Ä–æ–≤–µ–Ω—å: {level:F3})";
                            progressBar.Visible = false;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: {ex.Message}");
            }
        }
        
        private void ProcessOriginalModeAudio(byte[] buffer, int bytesRecorded, float level)
        {
            // Voice activity detection
            bool isVoiceDetected = level > voiceThreshold;

            if (isVoiceDetected)
            {
                if (!isCollectingAudio)
                {
                    isCollectingAudio = true;
                    audioBuffer.Clear();
                    recordingStartTime = DateTime.Now; // –ó–∞–ø–æ–º–Ω–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
                    LogMessage($"üé§ –ù–∞—á–∞—Ç –∑–∞—Ö–≤–∞—Ç —Ä–µ—á–∏ (—É—Ä–æ–≤–µ–Ω—å: {level:F3})");
                    
                    Invoke(() => {
                        txtRecognizedText.Text = "üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–µ—á—å...";
                        progressBar.Visible = true;
                    });
                }

                // Check for max recording time FIRST (–¥–∞–∂–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∑–≤—É–∫–µ)
                var recordingDuration = DateTime.Now - recordingStartTime;
                if (recordingDuration.TotalMilliseconds > maxRecordingMs)
                {
                    isCollectingAudio = false;
                    LogMessage($"‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (–º–∞–∫—Å–∏–º—É–º {maxRecordingMs}–º—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)");
                    
                    if (audioBuffer.Count > 16000)
                    {
                        LogMessage($"‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...";
                        });
                        
                        byte[] recordedAudio = audioBuffer.ToArray();
                        _ = Task.Run(() => ProcessAudioSequentially(recordedAudio));
                    }
                    
                    Invoke(() => {
                        progressBar.Visible = false;
                    });
                    return;
                }

                // Add audio data to buffer
                byte[] audioData = new byte[bytesRecorded];
                Array.Copy(buffer, audioData, bytesRecorded);
                audioBuffer.AddRange(audioData);
                
                lastVoiceActivity = DateTime.Now;
            }
            else if (isCollectingAudio)
            {
                // Check for max recording time
                var recordingDuration = DateTime.Now - recordingStartTime;
                if (recordingDuration.TotalMilliseconds > maxRecordingMs)
                {
                    isCollectingAudio = false;
                    LogMessage($"‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (–º–∞–∫—Å–∏–º—É–º {maxRecordingMs}–º—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)");
                    
                    if (audioBuffer.Count > 16000)
                    {
                        LogMessage($"‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...";
                        });
                        
                        byte[] timeoutAudio = audioBuffer.ToArray();
                        _ = Task.Run(() => ProcessAudioSequentially(timeoutAudio));
                    }
                    
                    Invoke(() => {
                        progressBar.Visible = false;
                    });
                    return;
                }
                
                // Check for silence timeout
                var silenceDuration = DateTime.Now - lastVoiceActivity;
                if (silenceDuration.TotalMilliseconds > silenceDurationMs)
                {
                    isCollectingAudio = false;
                    
                    if (audioBuffer.Count > 16000) // Minimum audio data
                    {
                        LogMessage($"‚èπÔ∏è –ö–æ–Ω–µ—Ü —Ä–µ—á–∏ (—Ç–∏—à–∏–Ω–∞: {silenceDuration.TotalMilliseconds:F0}–º—Å, –¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...";
                        });
                        
                        // Process collected audio in background
                        var audioDataCopy = audioBuffer.ToArray();
                        Task.Run(() => ProcessAudioSequentially(audioDataCopy));
                    }
                    
                    audioBuffer.Clear();
                }
            }
        }

        private void OnRecordingStopped(object? sender, StoppedEventArgs e)
        {
            if (e.Exception != null)
            {
                LogMessage($"‚ùå –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {e.Exception.Message}");
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        private void OnMicrophoneDataAvailable(object? sender, WaveInEventArgs e)
        {
            if (!isCapturing) return;

            // –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ò–ö–†–û–§–û–ù–ê: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å –≤–æ –≤—Ä–µ–º—è TTS
            // (–ú–∏–∫—Ä–æ—Ñ–æ–Ω = –Ω–∞—à–∞ —Ä–µ—á—å, –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –Ω–∞—à–µ–≥–æ –∂–µ TTS)
            if (isTTSActive || (speechSynthesizer?.State == System.Speech.Synthesis.SynthesizerState.Speaking))
            {
                return; // –ü—Ä–æ—Å—Ç–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è TTS
            }

            try
            {
                // Calculate audio level for 16-bit samples from microphone
                float level = CalculateMicrophoneLevel(e.Buffer, e.BytesRecorded);
                currentAudioLevel = level;

                // Voice activity detection
                bool isVoiceDetected = level > voiceThreshold;

                if (isVoiceDetected)
                {
                    if (!isCollectingAudio)
                    {
                        isCollectingAudio = true;
                        audioBuffer.Clear();
                        recordingStartTime = DateTime.Now;
                        LogMessage($"üé§ –ù–∞—á–∞—Ç –∑–∞—Ö–≤–∞—Ç —Ä–µ—á–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (—É—Ä–æ–≤–µ–Ω—å: {level:F3})");
                        
                        Invoke(() => {
                            txtRecognizedText.Text = "üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–µ—á—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...";
                            progressBar.Visible = true;
                        });
                    }
                    
                    lastVoiceActivity = DateTime.Now;
                }

                if (isCollectingAudio)
                {
                    // Convert 16-bit to 32-bit float for consistency
                    byte[] convertedBuffer = ConvertMicrophoneData(e.Buffer, e.BytesRecorded);
                    audioBuffer.AddRange(convertedBuffer);
                    
                    // Check for max recording time
                    var recordingDuration = DateTime.Now - recordingStartTime;
                    if (recordingDuration.TotalMilliseconds > maxRecordingMs)
                    {
                        isCollectingAudio = false;
                        LogMessage($"‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º {maxRecordingMs}–º—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)");
                        
                        if (audioBuffer.Count > 16000)
                        {
                            LogMessage($"‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                            
                            Invoke(() => {
                                txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...";
                            });
                            
                            byte[] timeoutAudio = audioBuffer.ToArray();
                            _ = Task.Run(() => ProcessAudioSequentially(timeoutAudio));
                        }
                        
                        Invoke(() => {
                            progressBar.Visible = false;
                        });
                        return;
                    }
                    
                    // Check for silence timeout
                    var silenceDuration = DateTime.Now - lastVoiceActivity;
                    if (silenceDuration.TotalMilliseconds > silenceDurationMs)
                    {
                        isCollectingAudio = false;
                        
                        if (audioBuffer.Count > 16000)
                        {
                            LogMessage($"‚èπÔ∏è –ö–æ–Ω–µ—Ü —Ä–µ—á–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (—Ç–∏—à–∏–Ω–∞: {silenceDuration.TotalMilliseconds:F0}–º—Å, –¥–∞–Ω–Ω—ã—Ö: {audioBuffer.Count} –±–∞–π—Ç)");
                            
                            Invoke(() => {
                                txtRecognizedText.Text = "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...";
                            });
                            
                            byte[] silenceAudio = audioBuffer.ToArray();
                            _ = Task.Run(() => ProcessAudioSequentially(silenceAudio));
                        }
                        
                        Invoke(() => {
                            progressBar.Visible = false;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {ex.Message}");
            }
        }

        private void OnMicrophoneRecordingStopped(object? sender, StoppedEventArgs e)
        {
            if (e.Exception != null)
            {
                LogMessage($"‚ùå –ó–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {e.Exception.Message}");
            }
        }

        private float CalculateMicrophoneLevel(byte[] buffer, int bytesRecorded)
        {
            if (bytesRecorded == 0) return 0f;

            float sum = 0f;
            int sampleCount = 0;

            // Process 16-bit samples from microphone
            for (int i = 0; i < bytesRecorded - 1; i += 2)
            {
                short sample = BitConverter.ToInt16(buffer, i);
                float normalizedSample = sample / 32768.0f; // Normalize to [-1, 1]
                sum += Math.Abs(normalizedSample);
                sampleCount++;
            }

            float avgLevel = sampleCount > 0 ? sum / sampleCount : 0f;
            
            // Amplify the level for better visualization
            return avgLevel * 5f;
        }

        private byte[] ConvertMicrophoneData(byte[] buffer, int bytesRecorded)
        {
            // Convert 16-bit samples to 32-bit float
            List<byte> converted = new List<byte>();
            
            for (int i = 0; i < bytesRecorded - 1; i += 2)
            {
                short sample = BitConverter.ToInt16(buffer, i);
                float floatSample = sample / 32768.0f; // Normalize to [-1, 1]
                byte[] floatBytes = BitConverter.GetBytes(floatSample);
                converted.AddRange(floatBytes);
            }
            
            return converted.ToArray();
        }

        private float CalculateAudioLevel(byte[] buffer, int bytesRecorded)
        {
            if (bytesRecorded == 0) return 0f;

            float sum = 0f;
            int sampleCount = 0;

            // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–ï–ú–ü–õ–û–í: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 4-–π —Å–µ–º–ø–ª –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è CPU –Ω–∞–≥—Ä—É–∑–∫–∏ (-75%)
            const int SKIP_SAMPLES = 4; // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 4-–π —Å–µ–º–ø–ª
            
            for (int i = 0; i < bytesRecorded - 3; i += 4 * SKIP_SAMPLES)
            {
                if (i + 3 < bytesRecorded)
                {
                    float sample = BitConverter.ToSingle(buffer, i);
                    sum += Math.Abs(sample);
                    sampleCount++;
                }
            }

            float avgLevel = sampleCount > 0 ? sum / sampleCount : 0f;
            
            // Amplify the level for better visualization (multiply by 10)
            return avgLevel * 10f;
        }

        private void AudioLevelTimer_Tick(object? sender, EventArgs e)
        {
            if (isCapturing)
            {
                int percentage = (int)(currentAudioLevel * 100);
                percentage = Math.Min(100, percentage);
                
                // üöÄ –£–ú–ù–û–ï UI –û–ë–ù–û–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                DateTime now = DateTime.Now;
                bool shouldUpdate = (percentage != lastAudioPercentage) || 
                                   (now - lastUIUpdate).TotalMilliseconds > UI_UPDATE_INTERVAL_MS;

                if (shouldUpdate)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                    progressAudioLevel.Value = percentage;
                    lblAudioLevel.Text = $"üìä –£—Ä–æ–≤–µ–Ω—å: {percentage}%";
                    lblAudioLevel.ForeColor = percentage > (voiceThreshold * 100) ? Color.Green : Color.Gray;
                    
                    lastAudioPercentage = percentage;
                    lastUIUpdate = now;
                }
            }
        }

        #endregion

        #region STT Processing

        /// <summary>
        /// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        /// </summary>
        private async Task ProcessAudioSequentially(byte[] audioData)
        {
            int sequenceNum = Interlocked.Increment(ref audioSequenceNumber);
            await audioProcessingSemaphore.WaitAsync(); // –ñ–¥–µ–º –æ—á–µ—Ä–µ–¥–∏
            try
            {
                LogMessage($"üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞ #{sequenceNum} –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ");
                await ProcessAudioDataInternal(audioData, sequenceNum);
            }
            finally
            {
                audioProcessingSemaphore.Release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ
            }
        }

        private async Task ProcessAudioDataInternal(byte[] audioData, int sequenceNumber = 0)
        {
            try
            {
                // üîß –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                const int MIN_AUDIO_SIZE = 16000; // 16KB –º–∏–Ω–∏–º—É–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã–ª–æ 64KB)
                
                if (audioData.Length < MIN_AUDIO_SIZE)
                {
                    LogMessage($"‚ö†Ô∏è –ê—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {audioData.Length} –±–∞–π—Ç < {MIN_AUDIO_SIZE} –±–∞–π—Ç");
                    
                    Invoke(() => {
                        txtRecognizedText.Text = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è";
                        progressBar.Visible = false;
                    });
                    
                    return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                }
                
                LogMessage($"üéØ –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –ù–∞—á–∞–ª–æ STT –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({audioData.Length} –±–∞–π—Ç)");
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                AnalyzeAudioQuality(audioData, sequenceNumber);
                
                // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å MediaFoundationResampler
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º WASAPI loopback 44100Hz stereo float32)
                var inputFormat = WaveFormat.CreateIeeeFloatWaveFormat(44100, 2);
                var wavData = ConvertToWavNormalized(audioData, inputFormat);
                
                if (wavData.Length == 0)
                {
                    LogMessage($"‚ùå –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –Ω–µ—É–¥–∞—á–Ω–∞");
                    
                    Invoke(() => {
                        txtRecognizedText.Text = "‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ";
                        progressBar.Visible = false;
                    });
                    
                    return;
                }
                
                LogMessage($"üîÑ –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–æ WAV: {wavData.Length} –±–∞–π—Ç");

                // Perform STT with Whisper.NET
                string recognizedText = await PerformWhisperSTT(wavData);
                
                if (!string.IsNullOrEmpty(recognizedText) && IsValidSpeech(recognizedText))
                {
                    LogMessage($"‚úÖ –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: '{recognizedText}'");
                    
                    Invoke(() => {
                        txtRecognizedText.Text = recognizedText;
                        progressBar.Visible = false;
                    });

                    // Auto-translate if enabled
                    if (chkAutoTranslate.Checked)
                    {
                        await TranslateAndSpeak(recognizedText);
                    }
                }
                else
                {
                    DebugLogSpeechValidation("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞");
                    Invoke(() => {
                        txtRecognizedText.Text = "‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω";
                        progressBar.Visible = false;
                    });
                }
                
                // Reset capture state for continuous listening
                isCollectingAudio = false;
                audioBuffer.Clear();
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ STT –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex.Message}");
                Invoke(() => {
                    txtRecognizedText.Text = $"‚ùå –û—à–∏–±–∫–∞: {ex.Message}";
                    progressBar.Visible = false;
                });
                
                // Reset capture state even on error
                isCollectingAudio = false;
                audioBuffer.Clear();
            }
        }

        /// <summary>
        /// üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è "—Ç–µ–ø–ª–æ–≥–æ" Whisper instance
        /// –£–±–∏—Ä–∞–µ—Ç overhead —Å–æ–∑–¥–∞–Ω–∏—è WhisperFactory/CreateBuilder –Ω–∞ –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç
        /// </summary>
        private void EnsureWhisperReady()
        {
            if (_whisperProcessor != null) return;
            
            lock (_whisperLock)
            {
                if (_whisperProcessor != null) return;
                
                try
                {
                    LogMessage("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≥–æ Whisper instance...");
                    
                    _whisperFactory = WhisperFactory.FromPath(WhisperModelPath);
                    _whisperProcessor = _whisperFactory.CreateBuilder()
                        .WithLanguage("ru") // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        .WithPrompt("–≠—Ç–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ä–µ—á—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ") // –†—É—Å—Å–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
                        .WithProbabilities() // –í–∫–ª—é—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                        .WithTemperature(0.1f) // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                        .Build();
                    
                    LogMessage("‚úÖ –¢–µ–ø–ª—ã–π Whisper instance –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Whisper: {ex.Message}");
                    throw;
                }
            }
        }

        /// <summary>
        /// üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–ø–ª–æ–≥–æ Whisper instance
        /// </summary>
        private static void CleanupWhisperResources()
        {
            lock (_whisperLock)
            {
                try
                {
                    if (_whisperProcessor != null)
                    {
                        (_whisperProcessor as IDisposable)?.Dispose();
                        _whisperProcessor = null;
                        Debug.WriteLine("‚úÖ Whisper processor –æ—á–∏—â–µ–Ω");
                    }
                    
                    if (_whisperFactory != null)
                    {
                        _whisperFactory.Dispose();
                        _whisperFactory = null;
                        Debug.WriteLine("‚úÖ Whisper factory –æ—á–∏—â–µ–Ω");
                    }
                    
                    // üöÄ –û–ß–ò–°–¢–ö–ê MediaFoundation
                    try
                    {
                        MediaFoundationApi.Shutdown();
                        Debug.WriteLine("‚úÖ MediaFoundation –æ—á–∏—â–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ MediaFoundation: {ex.Message}");
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Whisper: {ex.Message}");
                }
            }
        }

        private async Task<string> PerformWhisperSTT(byte[] wavData)
        {
            try
            {
                // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ø–ª—ã–π Whisper instance
                EnsureWhisperReady();
                
                LogMessage("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ —Ç–µ–ø–ª—ã–π Whisper...");
                
                // Create temporary WAV file
                string tempFile = Path.GetTempFileName();
                await File.WriteAllBytesAsync(tempFile, wavData);
                
                try
                {
                    // üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–ï–ü–õ–´–ô INSTANCE –í–ú–ï–°–¢–û –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û
                    using var fileStream = File.OpenRead(tempFile);
                    var result = new StringBuilder();
                    
                    await foreach (var segment in _whisperProcessor!.ProcessAsync(fileStream))
                    {
                        LogMessage($"üéØ Whisper —Å–µ–≥–º–µ–Ω—Ç: '{segment.Text}'");
                        
                        if (!string.IsNullOrWhiteSpace(segment.Text))
                        {
                            string cleanText = segment.Text.Trim();
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                            if (!IsPlaceholderToken(cleanText))
                            {
                                result.Append(cleanText + " ");
                            }
                            else
                            {
                                DebugLogSpeechValidation($"üö´ –ü—Ä–æ–ø—É—â–µ–Ω —Å–µ–≥–º–µ–Ω—Ç-–∑–∞–≥–ª—É—à–∫–∞: '{cleanText}'");
                            }
                        }
                    }
                    
                    string finalResult = result.ToString().Trim();
                    
                    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if (string.IsNullOrWhiteSpace(finalResult))
                    {
                        LogMessage("‚ö†Ô∏è Whisper –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
                        return string.Empty;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º—É—Å–æ—Ä –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    if (IsPlaceholderToken(finalResult))
                    {
                        LogMessage($"üö´ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∫–∞–∫ –º—É—Å–æ—Ä: '{finalResult}'");
                        return string.Empty;
                    }
                    
                    LogMessage($"‚úÖ Whisper —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç: '{finalResult}'");
                    return finalResult;
                }
                finally
                {
                    // Clean up temp file
                    try { File.Delete(tempFile); } catch { }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ Whisper.NET: {ex.Message}");
                return string.Empty;
            }
        }

        private bool IsValidSpeech(string text)
        {
            // üöÄ –ù–û–í–´–ô –ü–†–û–î–í–ò–ù–£–¢–´–ô –§–ò–õ–¨–¢–† –∏–∑ MORT —Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            DebugLogSpeechValidation($"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏: '{text}'");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            bool isEuropeanValid = EuropeanLanguageFilter.IsValidEuropeanSpeech(text);
            bool hasExtremeDuplication = AdvancedSpeechFilter.HasExtremeDuplication(text);
            
            DebugLogSpeechValidation($"üìä –§–∏–ª—å—Ç—Ä: EuropeanValid={isEuropeanValid}, ExtremeDuplication={hasExtremeDuplication}");
            
            bool finalResult = isEuropeanValid && !hasExtremeDuplication;
            DebugLogSpeechValidation($"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {finalResult}");
            
            return finalResult;
        }

        private bool IsPlaceholderToken(string text)
        {
            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
            if (string.IsNullOrWhiteSpace(text))
                return true;
                
            text = text.Trim();
            
            // üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –§–ò–õ–¨–¢–†: –ú–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã (—á–µ—Ç–∫–∏–µ –∑–∞–≥–ª—É—à–∫–∏)
            string[] definiteTokens = {
                "[Music]", "[–ú—É–∑—ã–∫–∞]", "[–º—É–∑—ã–∫–∞]", 
                "[BLANK_AUDIO]", "[Sound]", "[–ó–≤—É–∫]",
                "[Bell rings]", "[–∑–≤—É–∫ –∫–æ–ª–æ–∫–æ–ª–∞]",
                "[Sounds of a camera]", "[–∑–≤—É–∫ –∫–∞–º–µ—Ä—ã]",
                "[BIRDS CHIRPING]", "[–ø–µ–Ω–∏–µ –ø—Ç–∏—Ü]",
                "This is human speech", "–≠—Ç–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ä–µ—á—å",
                "(snoring)", "(—Ö—Ä–∞–ø)", "(ÏùåÏïÖ)", "‚ô™"
            };
            
            foreach (var token in definiteTokens)
            {
                if (text.Contains(token, StringComparison.OrdinalIgnoreCase))
                {
                    DebugLogSpeechValidation($"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: '{token}' –≤ '{text}'");
                    return true;
                }
            }
            
            // üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ú–ï–¢–†–ò–ö–ê: –≥–ª–∞–≤–Ω–∞—è - –¥–æ–ª—è –±—É–∫–≤ (–ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞)
            int totalChars = text.Length;
            int letterCount = text.Count(char.IsLetter);
            float letterShare = (float)letterCount / totalChars;
            
            // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–∏–Ω–∏–º—É–º –±—É–∫–≤ –∏ –∏—Ö –¥–æ–ª—è
            if (letterCount < 3 || letterShare < 0.5f)
            {
                DebugLogSpeechValidation($"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É–∫–≤: {letterCount} –±—É–∫–≤, –¥–æ–ª—è {letterShare:P} –≤ '{text}'");
                return true;
            }
            
            // –í—Ç–æ—Ä–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º—É—Å–æ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø–æ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –∫–∞–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π)
            int nonAlphaCount = text.Count(c => !char.IsLetter(c) && !char.IsWhiteSpace(c) && !char.IsPunctuation(c));
            float nonAlphaRatio = (float)nonAlphaCount / totalChars;
            
            if (nonAlphaRatio > 0.45f) // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥, –ø–æ–≤—ã—à–µ–Ω –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ
            {
                DebugLogSpeechValidation($"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º—É—Å–æ—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {nonAlphaRatio:P} –≤ '{text}'");
                return true;
            }
            
            // üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ Unicode: —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–µ —è–∑—ã–∫–æ–≤
            if (ContainsDefinitelyInvalidUnicode(text))
            {
                DebugLogSpeechValidation($"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —è–≤–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ '{text}'");
                return true;
            }
            
            // ÔøΩ –ú–ï–ù–ï–ï –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
            DebugLogSpeechValidation($"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏: '{text}'");
            
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π (>15 —Å–∏–º–≤–æ–ª–æ–≤), –ø—Ä–∏–º–µ–Ω—è–µ–º –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            bool isLongText = text.Length > 15;
            bool isValid;
            
            if (isLongText)
            {
                // –î–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                isValid = EuropeanLanguageFilter.IsValidEuropeanSpeech(text) || 
                         ContainsValidWords(text);
            }
            else
            {
                // –î–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –æ–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                isValid = EuropeanLanguageFilter.IsValidEuropeanSpeech(text);
            }
            
            bool isPlaceholder = !isValid;
            
            DebugLogSpeechValidation($"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞: IsValid={isValid}, IsPlaceholder={isPlaceholder}, Length={text.Length}");
            
            return isPlaceholder;
        }
        
        // üöÄ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        private bool ContainsValidWords(string text)
        {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–∫–≤ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞)
            var words = text.Split(new char[] { ' ', '\t', '\n', '\r', ',', '.', '!', '?' }, 
                                 StringSplitOptions.RemoveEmptyEntries);
            
            int validWords = 0;
            foreach (var word in words)
            {
                // –°–ª–æ–≤–æ –≤–∞–ª–∏–¥–Ω–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ –±—É–∫–≤ –∏ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
                if (word.Length >= 2 && word.Count(char.IsLetter) >= word.Length * 0.7)
                {
                    validWords++;
                }
            }
            
            // –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–ª–æ–≤–∞
            return validWords >= 2;
        }
        
        private bool ContainsDefinitelyInvalidUnicode(string text)
        {
            // üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø Unicode –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            
            int invalidCount = 0;
            int totalChars = text.Length;
            
            foreach (char c in text)
            {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                if (char.IsWhiteSpace(c) || char.IsPunctuation(c) || char.IsDigit(c))
                    continue;
                    
                int code = (int)c;
                
                // –†–∞–∑—Ä–µ—à–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —è–∑—ã–∫–æ–≤
                bool isValidChar = false;
                
                // –ë–∞–∑–æ–≤–∞—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞ (–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤)
                if ((code >= 0x0041 && code <= 0x005A) || // A-Z
                    (code >= 0x0061 && code <= 0x007A) || // a-z
                    (code >= 0x00C0 && code <= 0x024F) || // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞
                    (code >= 0x1E00 && code <= 0x1EFF))   // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞
                {
                    isValidChar = true;
                }
                    
                // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (—Ä—É—Å—Å–∫–∏–π, —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π, –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π, –±–æ–ª–≥–∞—Ä—Å–∫–∏–π –∏ –¥—Ä.)
                if (code >= 0x0400 && code <= 0x04FF)
                {
                    isValidChar = true;
                }
                
                // –ê—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã
                if (code >= 0x0600 && code <= 0x06FF)
                {
                    isValidChar = true;
                }
                
                // –ì—Ä–µ—á–µ—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç
                if (code >= 0x0370 && code <= 0x03FF)
                {
                    isValidChar = true;
                }
                
                // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π
                if (!isValidChar)
                {
                    invalidCount++;
                }
            }
            
            // –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–û–õ–¨–®–ï 50% —Å–∏–º–≤–æ–ª–æ–≤ —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
            float invalidRatio = (float)invalidCount / totalChars;
            
            if (invalidRatio > 0.5f)
            {
                DebugLogSpeechValidation($"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö Unicode: {invalidRatio:P} –≤ '{text}'");
                return true;
            }
            
            return false;
        }
        
        private void AnalyzeAudioQuality(byte[] audioData, int sequenceNumber)
        {
            try
            {
                if (audioData.Length < 4)
                {
                    LogMessage($"‚ö†Ô∏è –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
                    return;
                }
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 32-bit float –¥–∞–Ω–Ω—ã–µ
                float maxLevel = 0f;
                float sumSquares = 0f;
                int sampleCount = audioData.Length / 4;
                int silentSamples = 0;
                
                for (int i = 0; i < audioData.Length - 3; i += 4)
                {
                    float sample = BitConverter.ToSingle(audioData, i);
                    float absLevel = Math.Abs(sample);
                    
                    maxLevel = Math.Max(maxLevel, absLevel);
                    sumSquares += sample * sample;
                    
                    if (absLevel < 0.001f) // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ç–∏—à–∏–Ω–∞
                        silentSamples++;
                }
                
                float rms = (float)Math.Sqrt(sumSquares / sampleCount);
                float silenceRatio = (float)silentSamples / sampleCount;
                float durationSeconds = sampleCount / 44100f;
                
                LogMessage($"üìä –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ:");
                LogMessage($"   ‚îî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {durationSeconds:F2}—Å, –°–µ–º–ø–ª–æ–≤: {sampleCount}");
                LogMessage($"   ‚îî Max —É—Ä–æ–≤–µ–Ω—å: {maxLevel:F3}, RMS: {rms:F3}");
                LogMessage($"   ‚îî –¢–∏—à–∏–Ω–∞: {silenceRatio:P1} ({silentSamples}/{sampleCount})");
                
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if (silenceRatio > 0.8f)
                    LogMessage($"‚ö†Ô∏è –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–∏—à–∏–Ω—ã!");
                    
                if (maxLevel < 0.01f)
                    LogMessage($"‚ö†Ô∏è –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –û—á–µ–Ω—å —Ç–∏—Ö–∏–π —Å–∏–≥–Ω–∞–ª!");
                    
                if (maxLevel > 0.9f)
                    LogMessage($"‚ö†Ô∏è –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –í–æ–∑–º–æ–∂–Ω—ã –∏—Å–∫–∞–∂–µ–Ω–∏—è!");
                    
                if (durationSeconds < 0.5f)
                    LogMessage($"‚ö†Ô∏è –°–µ–≥–º–µ–Ω—Ç #{sequenceNumber} - –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ: {ex.Message}");
            }
        }

        private byte[] ConvertToWav(byte[] audioData)
        {
            try
            {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 32-bit float 44100Hz mono
                // Whisper.NET —Ç—Ä–µ–±—É–µ—Ç 16kHz 16-bit mono WAV
                
                const int targetSampleRate = 16000;
                const int sourceSampleRate = 44100; // –ò—Å—Ö–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ WASAPI
                const int channels = 1;
                const int bitsPerSample = 16;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∞—É–¥–∏–æ
                if (audioData.Length < 4000) // –ú–µ–Ω–µ–µ 250–º—Å –ø—Ä–∏ 16–∫–ì—Ü
                {
                    LogMessage($"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞—É–¥–∏–æ—Å–µ–≥–º–µ–Ω—Ç: {audioData.Length} –±–∞–π—Ç");
                    return new byte[0];
                }
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float32 –≤ int16 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–µ—Å–∞–º–ø–ª–∏–Ω–≥–æ–º
                var samples = new List<short>();
                
                // –£–ª—É—á—à–µ–Ω–Ω—ã–π linear interpolation –¥–ª—è —Ä–µ—Å–∞–º–ø–ª–∏–Ω–≥–∞
                float ratio = (float)sourceSampleRate / targetSampleRate;
                int sourceLength = audioData.Length / 4;
                int targetLength = (int)(sourceLength / ratio);
                
                for (int i = 0; i < targetLength; i++)
                {
                    float srcIndex = i * ratio;
                    int srcIndexInt = (int)srcIndex;
                    float fraction = srcIndex - srcIndexInt;
                    
                    if (srcIndexInt >= sourceLength - 1)
                        break;
                        
                    // –ü–æ–ª—É—á–∞–µ–º –¥–≤–∞ —Å–µ–º–ø–ª–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
                    float sample1 = BitConverter.ToSingle(audioData, srcIndexInt * 4);
                    float sample2 = srcIndexInt + 1 < sourceLength ? 
                        BitConverter.ToSingle(audioData, (srcIndexInt + 1) * 4) : sample1;
                    
                    // Linear interpolation
                    float interpolated = sample1 + (sample2 - sample1) * fraction;
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 16-bit
                    interpolated = Math.Max(-1.0f, Math.Min(1.0f, interpolated));
                    short intSample = (short)(interpolated * 32767f);
                    
                    samples.Add(intSample);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Å–∞–º–ø–ª–∏–Ω–≥–∞
                if (samples.Count == 0)
                {
                    LogMessage("‚ùå –†–µ—Å–∞–º–ø–ª–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
                    return new byte[0];
                }
                
                // –°–æ–∑–¥–∞–µ–º WAV —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                var wav = new List<byte>();
                
                // RIFF header
                wav.AddRange(Encoding.ASCII.GetBytes("RIFF"));
                wav.AddRange(BitConverter.GetBytes(36 + samples.Count * 2)); // File size - 8
                wav.AddRange(Encoding.ASCII.GetBytes("WAVE"));
                
                // fmt chunk
                wav.AddRange(Encoding.ASCII.GetBytes("fmt "));
                wav.AddRange(BitConverter.GetBytes(16)); // PCM chunk size
                wav.AddRange(BitConverter.GetBytes((short)1)); // PCM format
                wav.AddRange(BitConverter.GetBytes((short)channels)); // Mono
                wav.AddRange(BitConverter.GetBytes(targetSampleRate)); // 16kHz
                wav.AddRange(BitConverter.GetBytes(targetSampleRate * channels * bitsPerSample / 8)); // Byte rate
                wav.AddRange(BitConverter.GetBytes((short)(channels * bitsPerSample / 8))); // Block align
                wav.AddRange(BitConverter.GetBytes((short)bitsPerSample)); // 16-bit
                
                // data chunk
                wav.AddRange(Encoding.ASCII.GetBytes("data"));
                wav.AddRange(BitConverter.GetBytes(samples.Count * 2)); // Data size
                
                // Audio data
                foreach (var sample in samples)
                {
                    wav.AddRange(BitConverter.GetBytes(sample));
                }
                
                LogMessage($"‚úÖ WAV –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {audioData.Length} ‚Üí {wav.Count} –±–∞–π—Ç, {samples.Count} —Å–µ–º–ø–ª–æ–≤");
                
                return wav.ToArray();
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WAV: {ex.Message}");
                return new byte[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            }
        }

        #endregion

        #region Audio Conversion

        /// <summary>
        /// üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–æ 16kHz mono float
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MediaFoundationResampler –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞ –∏ downmix
        /// </summary>
        private byte[] ConvertToWavNormalized(byte[] inputPcm, WaveFormat inputFormat)
        {
            try
            {
                LogMessage($"üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ: {inputFormat.SampleRate}Hz {inputFormat.Channels}ch ‚Üí 16kHz mono");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                if (inputPcm.Length < 4000)
                {
                    LogMessage($"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞—É–¥–∏–æ—Å–µ–≥–º–µ–Ω—Ç: {inputPcm.Length} –±–∞–π—Ç");
                    return new byte[0];
                }
                
                using var srcStream = new RawSourceWaveStream(
                    new MemoryStream(inputPcm, writable: false), inputFormat);
                
                // –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–æ–¥–∏–º –∫ mono —á–µ—Ä–µ–∑ downmix
                IWaveProvider monoProvider;
                if (inputFormat.Channels > 1)
                {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float32 –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ downmix
                    var floatProvider = new Wave16ToFloatProvider(srcStream);
                    var sampleProvider = floatProvider.ToSampleProvider();
                    var monoSampleProvider = new StereoToMonoSampleProvider(sampleProvider);
                    monoProvider = monoSampleProvider.ToWaveProvider();
                }
                else
                {
                    monoProvider = srcStream;
                }
                
                // –¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: 16kHz mono float32
                var targetFormat = WaveFormat.CreateIeeeFloatWaveFormat(16000, 1);
                
                // MediaFoundation –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥
                using var resampler = new MediaFoundationResampler(monoProvider, targetFormat)
                {
                    ResamplerQuality = 60 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                };
                
                // –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                using var outputStream = new MemoryStream();
                using var writer = new WaveFileWriter(outputStream, targetFormat);
                
                var buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = resampler.Read(buffer, 0, buffer.Length)) > 0)
                {
                    writer.Write(buffer, 0, bytesRead);
                }
                
                writer.Flush();
                var result = outputStream.ToArray();
                
                // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–ê (–ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞)
                LogMessage($"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {inputPcm.Length} ‚Üí {result.Length} –±–∞–π—Ç");
                LogMessage($"üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–¥ Whisper: {targetFormat.SampleRate}Hz, {targetFormat.Channels}ch, {targetFormat.BitsPerSample}bit, Encoding={targetFormat.Encoding}");
                
                return result;
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {ex.Message}");
                return new byte[0];
            }
        }

        /// <summary>
        /// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        /// </summary>
        private async Task TranslateTextInSentences(string text, string sourceLang, string targetLang)
        {
            try
            {
                // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                var sentences = SmartTextSplitter.SplitIntoSentences(text);
                SmartTextSplitter.SplitStats.LogSplitResults(text, sentences);

                var translatedParts = new List<string>();
                
                Invoke(() => {
                    txtTranslatedText.Text = $"üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º {sentences.Count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...";
                });

                // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                for (int i = 0; i < sentences.Count; i++)
                {
                    string sentence = sentences[i].Trim();
                    
                    if (string.IsNullOrWhiteSpace(sentence))
                        continue;

                    LogMessage($"üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {i + 1}/{sentences.Count}: '{sentence.Substring(0, Math.Min(50, sentence.Length))}{(sentence.Length > 50 ? "..." : "")}'");

                    Invoke(() => {
                        txtTranslatedText.Text = $"üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º {i + 1}/{sentences.Count}: {sentence.Substring(0, Math.Min(30, sentence.Length))}{(sentence.Length > 30 ? "..." : "")}";
                    });

                    try
                    {
                        string partResult = await TranslateText(sentence, sourceLang, targetLang);
                        
                        if (!string.IsNullOrEmpty(partResult) && !partResult.Contains("‚ùå"))
                        {
                            translatedParts.Add(partResult.Trim());
                            LogMessage($"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {i + 1} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: '{partResult.Substring(0, Math.Min(50, partResult.Length))}{(partResult.Length > 50 ? "..." : "")}'");
                        }
                        else
                        {
                            LogMessage($"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {i + 1} –Ω–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª");
                            translatedParts.Add(sentence); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
                        }

                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
                        await Task.Delay(200);
                    }
                    catch (Exception partEx)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {i + 1}: {partEx.Message}");
                        translatedParts.Add(sentence); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    }
                }

                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
                string finalTranslation = string.Join(" ", translatedParts.Where(p => !string.IsNullOrWhiteSpace(p)));

                if (!string.IsNullOrEmpty(finalTranslation))
                {
                    LogMessage($"‚úÖ –°–æ—Å—Ç–∞–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: {finalTranslation.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                    
                    Invoke(() => {
                        txtTranslatedText.Text = finalTranslation;
                    });
                    
                    // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    await SpeakText(finalTranslation);
                }
                else
                {
                    LogMessage("‚ùå –°–æ—Å—Ç–∞–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è");
                    Invoke(() => {
                        txtTranslatedText.Text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞";
                    });
                }
            }
            catch (OperationCanceledException)
            {
                LogMessage("üõë –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞/–æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                Invoke(() => {
                    txtTranslatedText.Text = "üõë –°–æ—Å—Ç–∞–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞";
                });
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º: {ex.Message}");
                Invoke(() => {
                    txtTranslatedText.Text = $"‚ùå –û—à–∏–±–∫–∞: {ex.Message}";
                });
            }
        }

        private async Task<string> TranslateText(string text, string sourceLang, string targetLang)
        {
            try
            {
                if (googleTranslateClient == null) return string.Empty;
                
                // üìö –£–ú–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê –ù–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ MORT)
                // ‚ö†Ô∏è –í–ê–ñ–ù–û: Whisper.NET —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —ç—Ç–æ –Ω–µ–¥–µ–ª–∏–º—ã–µ —Å–º—ã—Å–ª–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã, –∏—Ö –Ω–µ–ª—å–∑—è —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –æ—Ç Whisper
                var sentenceEndings = new char[] { '.', '!', '?' };
                int sentenceCount = text.Split(sentenceEndings, StringSplitOptions.RemoveEmptyEntries).Length;
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è:
                // 1. –î–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ (>500 —Å–∏–º–≤–æ–ª–æ–≤) 
                // 2. –°–æ–¥–µ—Ä–∂–∞—â–∏—Ö 3+ –ø–æ–ª–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                // 3. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                bool shouldUseSplitting = text.Length > 500 && sentenceCount >= 3;
                
                if (shouldUseSplitting)
                {
                    LogMessage($"üìñ –î–ª–∏–Ω–Ω—ã–π –º–Ω–æ–≥–æ–ø—Ä–µ–¥–ª–æ–∂–µ–Ω—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç ({text.Length} —Å–∏–º–≤–æ–ª–æ–≤, {sentenceCount} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã");
                    
                    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä—É–ø–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    Func<string, string, string, Task<string>> translateFunction = async (sentenceGroup, srcLang, tgtLang) =>
                    {
                        return await TranslateSingleTextPart(sentenceGroup, srcLang, tgtLang);
                    };
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartTextSplitter –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    return await SmartTextSplitter.TranslateLongTextInParts(text, translateFunction, sourceLang, targetLang);
                }
                
                // –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                LogMessage($"üìù –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {text.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                return await TranslateSingleTextPart(text, sourceLang, targetLang);
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –≤ TranslateText: {ex.Message}");
                return string.Empty;
            }
        }

        /// <summary>
        /// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (–∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        /// </summary>
        private async Task<string> TranslateSingleTextPart(string text, string sourceLang, string targetLang)
        {
            try
            {
                if (googleTranslateClient == null) return string.Empty;
                
                // Use Google Translate API (public endpoint)
                var request = new RestRequest("translate_a/single", Method.Get);
                request.AddParameter("client", "gtx");
                request.AddParameter("sl", sourceLang);
                request.AddParameter("tl", targetLang);
                request.AddParameter("dt", "t");
                request.AddParameter("q", text);
                request.AddParameter("ie", "UTF-8");
                request.AddParameter("oe", "UTF-8");
                
                var response = await googleTranslateClient.ExecuteAsync(request);
                
                if (response.IsSuccessful && !string.IsNullOrEmpty(response.Content))
                {
                    LogMessage($"üîç Google Translate –æ—Ç–≤–µ—Ç: {response.Content.Substring(0, Math.Min(200, response.Content.Length))}...");
                    
                    // Parse Google Translate response - —Å–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–µ–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
                    try
                    {
                        // Google –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤, –≥–¥–µ [0] —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
                        var jsonArray = JsonConvert.DeserializeObject<dynamic>(response.Content);
                        
                        if (jsonArray is Newtonsoft.Json.Linq.JArray outerArray && outerArray.Count > 0)
                        {
                            var firstGroup = outerArray[0];
                            if (firstGroup is Newtonsoft.Json.Linq.JArray firstArray && firstArray.Count > 0)
                            {
                                var translatedSegments = new List<string>();
                                
                                // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–µ–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
                                foreach (var segment in firstArray)
                                {
                                    if (segment is Newtonsoft.Json.Linq.JArray segmentArray && segmentArray.Count > 0)
                                    {
                                        string segmentText = segmentArray[0]?.ToString() ?? "";
                                        if (!string.IsNullOrEmpty(segmentText) && segmentText.Trim() != "")
                                        {
                                            translatedSegments.Add(segmentText);
                                            LogMessage($"üß© –°–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞: '{segmentText}'");
                                        }
                                    }
                                }
                                
                                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                                if (translatedSegments.Count > 0)
                                {
                                    string fullTranslation = string.Join("", translatedSegments);
                                    LogMessage($"‚úÖ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ {translatedSegments.Count} —Å–µ–≥–º–µ–Ω—Ç–æ–≤: '{fullTranslation}'");
                                    return fullTranslation;
                                }
                            }
                        }
                        
                        LogMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞");
                        return string.Empty;
                    }
                    catch (JsonException jsonEx)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {jsonEx.Message}");
                        
                        // Fallback: —É–ª—É—á—à–µ–Ω–Ω—ã–π regex –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                        var matches = System.Text.RegularExpressions.Regex.Matches(response.Content, @"""([^""]+)"",""[^""]*""");
                        if (matches.Count > 0)
                        {
                            var allSegments = new List<string>();
                            foreach (System.Text.RegularExpressions.Match regexMatch in matches)
                            {
                                if (regexMatch.Groups.Count > 1)
                                {
                                    string segment = regexMatch.Groups[1].Value;
                                    if (!string.IsNullOrEmpty(segment) && segment.Trim() != "")
                                    {
                                        allSegments.Add(segment);
                                        LogMessage($"üß© Regex —Å–µ–≥–º–µ–Ω—Ç: '{segment}'");
                                    }
                                }
                            }
                            
                            if (allSegments.Count > 0)
                            {
                                string combinedResult = string.Join("", allSegments);
                                LogMessage($"‚úÖ Fallback –ø–∞—Ä—Å–∏–Ω–≥ {allSegments.Count} —Å–µ–≥–º–µ–Ω—Ç–æ–≤: '{combinedResult}'");
                                return combinedResult;
                            }
                        }
                        
                        // –ü—Ä–æ—Å—Ç–æ–π fallback –µ—Å–ª–∏ —Å–ª–æ–∂–Ω—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                        var simpleMatch = System.Text.RegularExpressions.Regex.Match(response.Content, @"\[\[\[""([^""]+)""");
                        if (simpleMatch.Success && simpleMatch.Groups.Count > 1)
                        {
                            string simpleResult = simpleMatch.Groups[1].Value;
                            LogMessage($"‚úÖ –ü—Ä–æ—Å—Ç–æ–π fallback –ø–∞—Ä—Å–∏–Ω–≥: '{simpleResult}'");
                            return simpleResult;
                        }
                        
                        return string.Empty;
                    }
                }
                
                LogMessage($"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {response.ErrorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}, StatusCode: {response.StatusCode}");
                return string.Empty;
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
                return string.Empty;
            }
        } // –ö–æ–Ω–µ—Ü TranslateSingleTextPart

        /// <summary>
        /// üîä –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ TTS —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        /// </summary>
        private async Task SpeakTextSequentially(string text)
        {
            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ TTS
            int ttsSequenceNum = Interlocked.Increment(ref ttsSequenceNumber);
            
            try
            {
                // –ñ–¥–µ–º —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ TTS –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
                await ttsProcessingSemaphore.WaitAsync();
                
                LogMessage($"üî¢ TTS –æ–ø–µ—Ä–∞—Ü–∏—è #{ttsSequenceNum} –Ω–∞—á–∞—Ç–∞ (–∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π)");
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º TTS
                await SpeakTextInternal(text, ttsSequenceNum);
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ TTS #{ttsSequenceNum}: {ex.Message}");
            }
            finally
            {
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ TTS
                ttsProcessingSemaphore.Release();
                LogMessage($"‚úÖ TTS –æ–ø–µ—Ä–∞—Ü–∏—è #{ttsSequenceNum} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–µ–º–∞—Ñ–æ—Ä –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
            }
        }

        private async Task SpeakText(string text)
        {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            await SpeakTextSequentially(text);
        }

        private async Task SpeakTextInternal(string text, int ttsSequenceNumber = 0)
        {
            try
            {
                if (speechSynthesizer == null || ttsVoiceManager == null) return;
                
                // üîä –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–º–µ–Ω—É - —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏
                LogMessage($"üîä TTS #{ttsSequenceNumber} –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: '{text}'");
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞
                if (speechSynthesizer.State == System.Speech.Synthesis.SynthesizerState.Speaking)
                {
                    LogMessage($"‚ö†Ô∏è TTS #{ttsSequenceNumber}: –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –∑–∞–Ω—è—Ç, –∂–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è...");
                    // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
                    for (int i = 0; i < 100; i++)
                    {
                        if (speechSynthesizer.State != System.Speech.Synthesis.SynthesizerState.Speaking)
                            break;
                        await Task.Delay(100);
                    }
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                await Task.Delay(50);
                
                isTTSActive = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                LogMessage($"üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: '{text}'");
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º SmartAudioManager –æ –Ω–∞—á–∞–ª–µ TTS
                smartAudioManager?.NotifyTTSStarted();
                
                // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–† –ì–û–õ–û–°–ê –ù–ê –û–°–ù–û–í–ï –Ø–ó–´–ö–ê –¢–ï–ö–°–¢–ê
                ttsVoiceManager.SelectVoiceForText(text);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–º–µ–Ω—ã
                var completionSource = new TaskCompletionSource<bool>();
                System.Speech.Synthesis.Prompt prompt = null;
                
                try
                {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º Speak
                    if (speechSynthesizer?.State != System.Speech.Synthesis.SynthesizerState.Ready)
                    {
                        LogMessage("‚ö†Ô∏è –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ");
                        return;
                    }
                    
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ TTS
                    EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs> onCompleted = null;
                    EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs> onProgress = null;
                    
                    onCompleted = (s, e) => {
                        speechSynthesizer.SpeakCompleted -= onCompleted;
                        speechSynthesizer.SpeakProgress -= onProgress;
                        isTTSActive = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        
                        if (e.Cancelled)
                        {
                            LogMessage("üõë TTS –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ");
                            completionSource.SetCanceled();
                        }
                        else if (e.Error != null)
                        {
                            LogMessage($"‚ùå –û—à–∏–±–∫–∞ TTS: {e.Error.Message}");
                            completionSource.SetException(e.Error);
                        }
                        else
                        {
                            completionSource.SetResult(true);
                        }
                    };
                    
                    onProgress = (s, e) => {
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        if (speechSynthesizer?.State == System.Speech.Synthesis.SynthesizerState.Ready)
                        {
                            speechSynthesizer.SpeakAsyncCancelAll();
                        }
                    };
                    
                    speechSynthesizer.SpeakCompleted += onCompleted;
                    speechSynthesizer.SpeakProgress += onProgress;
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
                    prompt = speechSynthesizer.SpeakAsync(text);
                    
                    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
                    await completionSource.Task;
                }
                catch (OperationCanceledException)
                {
                    isTTSActive = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                    LogMessage("üõë TTS –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                    if (prompt != null)
                    {
                        speechSynthesizer?.SpeakAsyncCancel(prompt);
                    }
                    throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ –≤–Ω–µ—à–Ω–µ–º catch
                }
                catch (Exception ex)
                {
                    isTTSActive = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    LogMessage($"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ TTS: {ex.Message}");
                    if (prompt != null)
                    {
                        speechSynthesizer?.SpeakAsyncCancel(prompt);
                    }
                    throw;
                }
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º SmartAudioManager –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ TTS
                smartAudioManager?.NotifyTTSCompleted();
                
                LogMessage($"‚úÖ TTS #{ttsSequenceNumber} –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            }
            catch (OperationCanceledException)
            {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã TTS
                isTTSActive = false; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                smartAudioManager?.NotifyTTSCompleted();
                LogMessage($"üõë TTS #{ttsSequenceNumber} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            }
            catch (Exception ex)
            {
                // –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ TTS
                isTTSActive = false; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                smartAudioManager?.NotifyTTSCompleted();
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ TTS #{ttsSequenceNumber}: {ex.Message}");
            }
        }

        private string GetLanguageCode(string languageName)
        {
            // –î–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "auto"
            if (languageName == "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                return "auto";
                
            return languageCodes.TryGetValue(languageName, out string? code) ? code : "en";
        }

        // üöÄ –ú–ï–¢–û–î –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–í–û–î–ê –ò –û–ó–í–£–ß–ò–í–ê–ù–ò–Ø
        private async Task TranslateAndSpeak(string text)
        {
            try
            {
                string sourceLang = "";
                string targetLang = "";
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ UI –ø–æ—Ç–æ–∫–∞
                Invoke(() => {
                    sourceLang = GetLanguageCode(cbSourceLang.SelectedItem?.ToString() ?? "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
                    targetLang = GetLanguageCode(cbTargetLang.SelectedItem?.ToString() ?? "–†—É—Å—Å–∫–∏–π");
                });
                
                LogMessage($"üåê –ü–µ—Ä–µ–≤–æ–¥: {sourceLang} ‚Üí {targetLang}");
                
                Invoke(() => {
                    txtTranslatedText.Text = "üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º...";
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                if (SmartTextSplitter.ShouldSplit(text))
                {
                    LogMessage($"üìù –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ({text.Length} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è");
                    await TranslateTextInSentences(text, sourceLang, targetLang);
                }
                else
                {
                    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    string translatedText = await TranslateText(text, sourceLang, targetLang);
                    
                    if (!string.IsNullOrEmpty(translatedText))
                    {
                        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        string qualityInfo = AnalyzeTranslationQuality(text, translatedText);
                        LogMessage($"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ{qualityInfo}: '{translatedText}'");
                        
                        Invoke(() => {
                            txtTranslatedText.Text = translatedText;
                        });
                        
                        // Speak translated text
                        await SpeakText(translatedText);
                    }
                    else
                    {
                        LogMessage("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è");
                        Invoke(() => {
                            txtTranslatedText.Text = "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞";
                        });
                    }
                }
            }
            catch (OperationCanceledException)
            {
                LogMessage("üõë –û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞/–æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                Invoke(() => {
                    txtTranslatedText.Text = "üõë –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞";
                });
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
                Invoke(() => {
                    txtTranslatedText.Text = $"‚ùå –û—à–∏–±–∫–∞: {ex.Message}";
                });
            }
        }

        #endregion

        #region UI Events

        private async void btnTestTTS_Click(object sender, EventArgs e)
        {
            try
            {
                string testText = "";
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ UI –ø–æ—Ç–æ–∫–∞
                Invoke(() => {
                    testText = cbTargetLang.SelectedItem?.ToString() == "–†—É—Å—Å–∫–∏–π" 
                        ? "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞" 
                        : "Text to speech system test";
                });
                    
                await SpeakText(testText);
            }
            catch (OperationCanceledException)
            {
                LogMessage("üõë –¢–µ—Å—Ç TTS –æ—Ç–º–µ–Ω–µ–Ω");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ TTS: {ex.Message}");
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                LogMessage("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                SaveCurrentSettings();
                
                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞
                try
                {
                    StopAudioCapture().Wait(3000); // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
                }
                catch (Exception stopEx)
                {
                    LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {stopEx.Message}");
                }
                
                // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
                speechSynthesizer?.Dispose();
                audioLevelTimer?.Dispose();
                smartAudioManager?.Dispose();
                googleTranslateClient?.Dispose();
                
                // üöÄ –û—á–∏—Å—Ç–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                CleanupDeviceNotifications();
                
                // üöÄ –û—á–∏—Å—Ç–∫–∞ MediaFoundation
                MediaFoundationApi.Shutdown();
                
                LogMessage("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {ex.Message}");
            }
        }

        #endregion

        #region Logging

        /// <summary>
        /// üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –í—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º UI –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–æ–ª—å–∫–æ Debug
        /// </summary>
        private void LogMessageDebug(string message)
        {
            if (enableDetailedLogging)
            {
                LogMessage(message); // –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å UI
            }
            else
            {
                Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] {message}"); // –¢–æ–ª—å–∫–æ Debug –∫–æ–Ω—Å–æ–ª—å
            }
        }

        public void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
            string logEntry = $"[{timestamp}] {message}";
            
            Debug.WriteLine(logEntry);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –Ω–µ –±—ã–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –∏ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (IsDisposed || !IsHandleCreated)
            {
                return; // –§–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å UI
            }
            
            try
            {
                if (InvokeRequired)
                {
                    Invoke(() => AddLogEntry(logEntry));
                }
                else
                {
                    AddLogEntry(logEntry);
                }
            }
            catch (ObjectDisposedException)
            {
                // –§–æ—Ä–º–∞ –±—ã–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –≤—ã–∑–æ–≤–æ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                Debug.WriteLine($"[{timestamp}] ‚ö†Ô∏è –§–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥: {message}");
            }
            catch (InvalidOperationException)
            {
                // Handle —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                Debug.WriteLine($"[{timestamp}] ‚ö†Ô∏è Handle –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥: {message}");
            }
        }

        private void AddLogEntry(string logEntry)
        {
            txtLogs.AppendText(logEntry + Environment.NewLine);
            txtLogs.SelectionStart = txtLogs.Text.Length;
            txtLogs.ScrollToCaret();
        }

        /// <summary>
        /// üìö –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏
        /// </summary>
        private void ShowAudiobookStatistics()
        {
            try
            {
                if (smartAudioManager != null)
                {
                    string stats = smartAudioManager.GetAudiobookStatistics();
                    LogMessage("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–£–î–ò–û–ö–ù–ò–ì–ò:");
                    
                    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    var lines = stats.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                    foreach (var line in lines)
                    {
                        if (!string.IsNullOrWhiteSpace(line) && !line.Contains("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ñ–ò–ú–ê –ê–£–î–ò–û–ö–ù–ò–ì–ò"))
                        {
                            LogMessage($"   {line.Trim()}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏: {ex.Message}");
            }
        }

        #endregion

        #region üöÄ –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
        /// </summary>
        private async Task<string?> ProcessAudioWithWhisper(float[] audioData, CancellationToken ct)
        {
            try
            {
                if (_whisperProcessor == null || audioData == null || audioData.Length == 0)
                    return null;

                LogMessage($"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞: {audioData.Length} —Å–µ–º–ø–ª–æ–≤ ({(float)audioData.Length / 16000:F2}—Å)");

                // –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ
                var analysisResult = AnalyzeAudioQuality(audioData);
                LogMessage($"üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞: {analysisResult}");

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if (analysisResult.RmsLevel < 0.001f)
                {
                    LogMessage("üîá –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º STT");
                    return null;
                }

                // Whisper STT —Å improved –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                using var audioStream = new MemoryStream();
                WriteWavHeader(audioStream, audioData.Length, 16000, 1);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è float[] –≤ PCM bytes
                var pcmBytes = new byte[audioData.Length * 2];
                for (int i = 0; i < audioData.Length; i++)
                {
                    var sample = (short)(audioData[i] * 32767f);
                    pcmBytes[i * 2] = (byte)(sample & 0xFF);
                    pcmBytes[i * 2 + 1] = (byte)((sample >> 8) & 0xFF);
                }
                audioStream.Write(pcmBytes, 0, pcmBytes.Length);
                audioStream.Position = 0;

                // STT –æ–±—Ä–∞–±–æ—Ç–∫–∞ with enhanced cancellation support
                var segments = new List<string>();
                try
                {
                    await foreach (var segment in _whisperProcessor.ProcessAsync(audioStream, ct).WithCancellation(ct))
                    {
                        if (!string.IsNullOrWhiteSpace(segment.Text))
                        {
                            var cleanedText = CleanWhisperText(segment.Text);
                            if (!string.IsNullOrWhiteSpace(cleanedText) && 
                                !IsPlaceholderToken(cleanedText))
                            {
                                segments.Add(cleanedText);
                                LogMessage($"üìù STT —Å–µ–≥–º–µ–Ω—Ç: '{cleanedText}' (conf: {segment.Probability:F3})");
                            }
                        }
                    }
                }
                catch (OperationCanceledException)
                {
                    // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
                    #if DEBUG
                    LogMessage("üîç [DEBUG] STT canceled - —à—Ç–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞");
                    #endif
                    return null;
                }

                var finalText = string.Join(" ", segments).Trim();
                
                if (!string.IsNullOrWhiteSpace(finalText))
                {
                    LogMessage($"‚úÖ STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{finalText}'");
                    return finalText;
                }
                
                return null;
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ Whisper STT: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
        /// </summary>
        private async Task ProcessRecognizedText(string recognizedText)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(recognizedText))
                    return;

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                this.BeginInvoke(() => 
                {
                    if (txtRecognized != null)
                        txtRecognized.Text = recognizedText;
                    LogMessage($"üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {recognizedText}");
                });

                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
                string sourceLanguage = GetSelectedLanguage(cbSourceLanguage);
                string targetLanguage = GetSelectedLanguage(cbTargetLanguage);

                if (sourceLanguage == targetLanguage)
                {
                    LogMessage("‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥");
                    await ProcessTtsOutput(recognizedText, targetLanguage);
                    return;
                }

                // –ü–µ—Ä–µ–≤–æ–¥
                var translatedText = await TranslateTextAsync(recognizedText, sourceLanguage, targetLanguage);
                
                if (!string.IsNullOrWhiteSpace(translatedText))
                {
                    this.BeginInvoke(() => 
                    {
                        if (txtTranslated != null)
                            txtTranslated.Text = translatedText;
                        LogMessage($"üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {translatedText}");
                    });

                    // TTS –æ–∑–≤—É—á–∫–∞
                    await ProcessTtsOutput(translatedText, targetLanguage);
                }
                else
                {
                    LogMessage("‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –æ–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª");
                    await ProcessTtsOutput(recognizedText, sourceLanguage);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ TTS –≤—ã–≤–æ–¥–∞ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
        /// </summary>
        private async Task ProcessTtsOutput(string text, string language)
        {
            try
            {
                if (stableTtsEngine == null || string.IsNullOrWhiteSpace(text))
                    return;

                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è TTS
                var ttsLanguage = GetTtsLanguageCode(language);
                
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (!string.IsNullOrEmpty(ttsLanguage))
                {
                    stableTtsEngine.SetLanguage(ttsLanguage);
                }

                // –û–∑–≤—É—á–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π TTS Engine
                var success = await stableTtsEngine.SpeakAsync(text, ttsLanguage);
                
                if (!success)
                {
                    LogMessage($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å TTS: {text}");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ TTS –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —è–∑—ã–∫–∞ –¥–ª—è TTS
        /// </summary>
        private string GetTtsLanguageCode(string language)
        {
            return language.ToLowerInvariant() switch
            {
                "ru" or "—Ä—É—Å—Å–∫–∏–π" => "ru-RU",
                "en" or "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" => "en-US",
                "de" or "–Ω–µ–º–µ—Ü–∫–∏–π" => "de-DE",
                "fr" or "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" => "fr-FR",
                "es" or "–∏—Å–ø–∞–Ω—Å–∫–∏–π" => "es-ES",
                "it" or "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π" => "it-IT",
                "ja" or "—è–ø–æ–Ω—Å–∫–∏–π" => "ja-JP",
                "zh" or "–∫–∏—Ç–∞–π—Å–∫–∏–π" => "zh-CN",
                _ => "en-US"
            };
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        /// </summary>
        private void StatisticsTimer_Tick(object? sender, EventArgs e)
        {
            try
            {
                if (slidingWindowAggregator != null)
                {
                    var aggStats = slidingWindowAggregator.GetStatistics();
                    LogMessage($"üìä –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: {aggStats}");
                }

                if (stableTtsEngine != null)
                {
                    var ttsStats = stableTtsEngine.GetStatistics();
                    LogMessage($"üìä TTS: {ttsStats}");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞—É–¥–∏–æ —É—Ä–æ–≤–Ω—è
        /// </summary>
        private void UpdateAudioLevelUI()
        {
            try
            {
                var percentage = Math.Min(100, (int)(currentAudioLevel * 1000));
                
                if (Math.Abs(percentage - lastAudioPercentage) > 5 || 
                    DateTime.Now.Subtract(lastUIUpdate).TotalMilliseconds > UI_UPDATE_INTERVAL_MS)
                {
                    if (progressBarAudio != null)
                        progressBarAudio.Value = percentage;
                    lastAudioPercentage = percentage;
                    lastUIUpdate = DateTime.Now;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∞—É–¥–∏–æ —É—Ä–æ–≤–Ω—è: {ex.Message}");
            }
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        /// </summary>
        private AudioQualityAnalysis AnalyzeAudioQuality(float[] audioData)
        {
            if (audioData == null || audioData.Length == 0)
                return new AudioQualityAnalysis();

            double sum = 0;
            double maxAmplitude = 0;
            int clippedSamples = 0;

            for (int i = 0; i < audioData.Length; i++)
            {
                var sample = Math.Abs(audioData[i]);
                sum += sample * sample;
                maxAmplitude = Math.Max(maxAmplitude, sample);
                
                if (sample > 0.95)
                    clippedSamples++;
            }

            var rms = Math.Sqrt(sum / audioData.Length);
            var clippingRate = (double)clippedSamples / audioData.Length;

            // –ü—Ä–æ—Å—Ç–æ–π VAD –Ω–∞ –æ—Å–Ω–æ–≤–µ RMS –∏ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
            double spectralEnergy = 0;
            for (int i = 1; i < audioData.Length; i++)
            {
                var diff = audioData[i] - audioData[i - 1];
                spectralEnergy += diff * diff;
            }
            spectralEnergy = Math.Sqrt(spectralEnergy / (audioData.Length - 1));

            return new AudioQualityAnalysis
            {
                RmsLevel = (float)rms,
                MaxAmplitude = (float)maxAmplitude,
                ClippingRate = (float)clippingRate,
                SpectralEnergy = (float)spectralEnergy,
                Duration = (float)audioData.Length / 16000f,
                HasSpeech = rms > 0.001 && spectralEnergy > 0.0005
            };
        }

        #endregion

        #region Helper Classes
        
        #endregion

        #region Form Cleanup

        private void Form1_OnFormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                Debug.WriteLine("üîÑ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã...");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
                isCapturing = false;
                isDisposed = true;
                
                // üöÄ –û–ß–ò–°–¢–ö–ê –ù–û–í–´–• –°–¢–ê–ë–ò–õ–¨–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
                CleanupStableComponents().GetAwaiter().GetResult();
                
                // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê: –¢–µ–ø–ª—ã–π Whisper instance
                CleanupWhisperResources();
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º WASAPI –∑–∞—Ö–≤–∞—Ç (legacy)
                if (wasapiCapture != null)
                {
                    try
                    {
                        wasapiCapture.DataAvailable -= OnAudioDataAvailable;
                        wasapiCapture.StopRecording();
                        wasapiCapture.Dispose();
                        wasapiCapture = null;
                        Debug.WriteLine("‚úÖ WASAPI –∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WASAPI: {ex.Message}");
                    }
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º WaveIn –∑–∞—Ö–≤–∞—Ç (legacy)
                if (waveInCapture != null)
                {
                    try
                    {
                        waveInCapture.DataAvailable -= OnAudioDataAvailable;
                        waveInCapture.StopRecording();
                        waveInCapture.Dispose();
                        waveInCapture = null;
                        Debug.WriteLine("‚úÖ WaveIn –∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WaveIn: {ex.Message}");
                    }
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
                if (audioLevelTimer != null)
                {
                    try
                    {
                        audioLevelTimer.Stop();
                        audioLevelTimer.Dispose();
                        audioLevelTimer = null;
                        Debug.WriteLine("‚úÖ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {ex.Message}");
                    }
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS
                if (speechSynthesizer != null)
                {
                    try
                    {
                        speechSynthesizer.SpeakAsyncCancelAll();
                        speechSynthesizer.Dispose();
                        speechSynthesizer = null;
                        Debug.WriteLine("‚úÖ TTS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS: {ex.Message}");
                    }
                }
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º TTS Voice Manager
                if (ttsVoiceManager != null)
                {
                    try
                    {
                        ttsVoiceManager.Dispose();
                        ttsVoiceManager = null;
                        Debug.WriteLine("‚úÖ TTS Voice Manager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è TTS Voice Manager: {ex.Message}");
                    }
                }
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                if (streamingProcessor != null)
                {
                    try
                    {
                        streamingProcessor.DisposeAsync().AsTask().Wait(TimeSpan.FromSeconds(3));
                        streamingProcessor = null;
                        Debug.WriteLine("‚úÖ StreamingWhisperProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ StreamingProcessor: {ex.Message}");
                    }
                }
                
                if (audioResampler != null)
                {
                    try
                    {
                        audioResampler.Dispose();
                        audioResampler = null;
                        Debug.WriteLine("‚úÖ AudioResampler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AudioResampler: {ex.Message}");
                    }
                }
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                try
                {
                    audioProcessingSemaphore?.Dispose();
                    Debug.WriteLine("‚úÖ AudioProcessingSemaphore –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è AudioProcessingSemaphore: {ex.Message}");
                }
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä TTS
                try
                {
                    ttsProcessingSemaphore?.Dispose();
                    Debug.WriteLine("‚úÖ TtsProcessingSemaphore –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è TtsProcessingSemaphore: {ex.Message}");
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
                isDisposed = true;
                
                Debug.WriteLine("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// üöÄ –û—á–∏—Å—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        /// </summary>
        private async Task CleanupStableComponents()
        {
            try
            {
                Debug.WriteLine("üîÑ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if (statisticsTimer != null)
                {
                    try
                    {
                        statisticsTimer.Stop();
                        statisticsTimer.Dispose();
                        statisticsTimer = null;
                        Debug.WriteLine("‚úÖ –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}");
                    }
                }

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ-–∑–∞—Ö–≤–∞—Ç–∞
                if (stableAudioCapture != null)
                {
                    try
                    {
                        await stableAudioCapture.StopCaptureAsync();
                        stableAudioCapture.Dispose();
                        stableAudioCapture = null;
                        Debug.WriteLine("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∞—É–¥–∏–æ-–∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
                    }
                }

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
                if (slidingWindowAggregator != null)
                {
                    try
                    {
                        await slidingWindowAggregator.FlushAsync();
                        slidingWindowAggregator.Dispose();
                        slidingWindowAggregator = null;
                        Debug.WriteLine("‚úÖ –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞: {ex.Message}");
                    }
                }

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ TTS Engine
                if (stableTtsEngine != null)
                {
                    try
                    {
                        await stableTtsEngine.ClearQueueAsync();
                        stableTtsEngine.Dispose();
                        stableTtsEngine = null;
                        Debug.WriteLine("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π TTS Engine –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ TTS: {ex.Message}");
                    }
                }

                // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ Warm Whisper Resources
                CleanupWhisperResources();

                Debug.WriteLine("‚úÖ –í—Å–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—á–∏—â–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {ex.Message}");
            }
        }

        #endregion

        /// <summary>
        /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—á–∏ (—Ç–æ–ª—å–∫–æ –≤ Debug —Ä–µ–∂–∏–º–µ)
        /// </summary>
        private void DebugLogSpeechValidation(string message)
        {
            System.Diagnostics.Debug.WriteLine($"[SPEECH_DEBUG] {message}");
        }

        private class AudioDevice
        {
            public string Name { get; set; } = string.Empty;
            public MMDevice Device { get; set; } = null!;
            
            public override string ToString() => Name;
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        /// </summary>
        private string AnalyzeTranslationQuality(string original, string translated)
        {
            try
            {
                var indicators = new List<string>();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª–∏–Ω—ã
                double lengthRatio = (double)translated.Length / original.Length;
                if (lengthRatio > 1.5) indicators.Add("üìè+");  // –ó–∞–º–µ—Ç–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ
                else if (lengthRatio < 0.5) indicators.Add("üìè-");  // –ó–∞–º–µ—Ç–Ω–æ –∫–æ—Ä–æ—á–µ
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                int originalPunct = original.Count(c => char.IsPunctuation(c));
                int translatedPunct = translated.Count(c => char.IsPunctuation(c));
                if (Math.Abs(originalPunct - translatedPunct) > 2) indicators.Add("‚ùì");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–µ—Ä–µ–≤–æ–¥–µ
                if (translated.Contains("...") && !original.Contains("...")) indicators.Add("üîç");
                if (translated.Contains("[") || translated.Contains("]")) indicators.Add("‚ö†Ô∏è");
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —è–∑—ã–∫—É
                bool isRussianSource = System.Text.RegularExpressions.Regex.IsMatch(original, @"[–∞-—è—ë]", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                bool isEnglishSource = System.Text.RegularExpressions.Regex.IsMatch(original, @"[a-z]", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                
                if (isRussianSource && original == translated) indicators.Add("üîÑRU‚ÜíRU");
                else if (isEnglishSource) indicators.Add("üîÑEN‚ÜíRU");
                else if (isRussianSource) indicators.Add("üîÑRU‚Üí?");
                
                return indicators.Count > 0 ? $" ({string.Join("", indicators)})" : "";
            }
            catch
            {
                return "";
            }
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        /// </summary>
        public class AudioQualityAnalysis
        {
            public float RmsLevel { get; set; }
            public float MaxAmplitude { get; set; }
            public float ClippingRate { get; set; }
            public float SpectralEnergy { get; set; }
            public float Duration { get; set; }
            public bool HasSpeech { get; set; }
            
            public override string ToString()
            {
                return $"RMS: {RmsLevel:F6}, Max: {MaxAmplitude:F3}, Clipping: {ClippingRate:P1}, " +
                       $"Spectral: {SpectralEnergy:F6}, Duration: {Duration:F2}s, Speech: {HasSpeech}";
            }
        }

        #region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ WAV –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        private void WriteWavHeader(MemoryStream stream, int dataLength, int sampleRate, int channels)
        {
            var bytesPerSample = 2; // 16-bit
            var blockAlign = channels * bytesPerSample;
            var averageBytesPerSecond = sampleRate * blockAlign;
            var dataSize = dataLength * bytesPerSample;
            
            using var writer = new BinaryWriter(stream, Encoding.UTF8, true);
            
            // RIFF header
            writer.Write("RIFF".ToCharArray());
            writer.Write(36 + dataSize);
            writer.Write("WAVE".ToCharArray());
            
            // fmt chunk
            writer.Write("fmt ".ToCharArray());
            writer.Write(16); // fmt chunk size
            writer.Write((short)1); // PCM
            writer.Write((short)channels);
            writer.Write(sampleRate);
            writer.Write(averageBytesPerSecond);
            writer.Write((short)blockAlign);
            writer.Write((short)(bytesPerSample * 8));
            
            // data chunk
            writer.Write("data".ToCharArray());
            writer.Write(dataSize);
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç Whisper –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        /// </summary>
        private string CleanWhisperText(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return string.Empty;

            // –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
            text = text.Trim();
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
            text = System.Text.RegularExpressions.Regex.Replace(text, @"(.)\1{3,}", "$1$1");
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            text = System.Text.RegularExpressions.Regex.Replace(text, @"\s+", " ");
            
            return text;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ ComboBox
        /// </summary>
        private string GetSelectedLanguage(System.Windows.Forms.ComboBox? comboBox)
        {
            if (comboBox?.SelectedItem is string selectedLanguage)
            {
                return languageCodes.TryGetValue(selectedLanguage, out var code) ? code : "ru";
            }
            return "ru";
        }

        /// <summary>
        /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        /// </summary>
        private async Task<string?> TranslateTextAsync(string text, string sourceLanguage, string targetLanguage)
        {
            try
            {
                if (googleTranslateClient == null)
                    return null;

                // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Google Translate API
                await Task.Delay(100); // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                
                return $"[TRANSLATED from {sourceLanguage} to {targetLanguage}] {text}";
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
                return null;
            }
        }

        #endregion

        #region Device Notification Handler
        
        // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–∏ HDMI/Bluetooth –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        private MMDeviceEnumerator? deviceEnumerator;
        private AudioDeviceNotificationClient? notificationClient;
        private static int _devNotifInit = 0; // Interlocked flag for idempotent registration
        
        private void InitializeDeviceNotifications()
        {
            if (Interlocked.CompareExchange(ref _devNotifInit, 1, 0) != 0) return;

            try
            {
                deviceEnumerator = new MMDeviceEnumerator();
                notificationClient = new AudioDeviceNotificationClient(this);
                deviceEnumerator.RegisterEndpointNotificationCallback(notificationClient);

                // –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π render id
                _currentRenderId = GetDefaultRenderIdSafe();

                // –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–µ–±–∞—É–Ω—Å–µ—Ä
                _restartDebounce = new System.Timers.Timer(500) { AutoReset = false };
                _restartDebounce.Elapsed += (_, __) => _ = RestartDebouncedAsync();

                LogMessage("üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                // Reset flag on failure
                Interlocked.Exchange(ref _devNotifInit, 0);
                LogMessage($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }
        }
        
        /// <summary>
        /// –ö–æ–ª–ª–±–µ–∫ –∏–∑ AudioDeviceNotificationClient
        /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞
        /// </summary>
        public void OnDeviceChanged()
        {
            if (_isClosing) return;

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π default render device ID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            var newRenderId = GetDefaultRenderIdSafe();
            
            // –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å ‚Äî –∏–≥–Ω–æ—Ä–∏–º –≤—Å–ø–ª–µ—Å–∫
            if (!string.IsNullOrEmpty(_currentRenderId) && string.Equals(_currentRenderId, newRenderId, StringComparison.Ordinal))
                return;

            LogMessage("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ default render —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –∑–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞...");

            // –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—Ç–∞—Ä—Ç: –∫–æ–∞–ª–µ—Å—Ü–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ debounce
            Interlocked.Exchange(ref _pendingRestart, 1);
            _restartDebounce?.Stop();
            _restartDebounce?.Start();
        }

        /// <summary>
        /// –ü—É–±–ª–∏—á–Ω–∞—è ¬´–±–µ–∑–æ–ø–∞—Å–Ω–∞—è¬ª –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ capture
        /// </summary>
        private Task RestartCaptureSafeAsync() => RestartCaptureWorkerAsync();

        /// <summary>
        /// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–±–∞—É–Ω—Å-—Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è async void
        /// </summary>
        private async Task RestartDebouncedAsync()
        {
            try 
            { 
                await RestartCaptureSafeAsync().ConfigureAwait(false); 
            }
            catch (OperationCanceledException) 
            { 
                /* –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ */ 
            }
            catch (Exception ex) 
            { 
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–±–∞—É–Ω—Å-—Ä–µ—Å—Ç–∞—Ä—Ç–µ: {ex.Message}"); 
            }
        }

        /// <summary>
        /// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç audio capture —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≥–æ–Ω–æ–∫
        /// </summary>
        private async Task RestartCaptureWorkerAsync()
        {
            if (_isClosing) return;

            // –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç —Ä–µ—Å—Ç–∞—Ä—Ç ‚Äî –ø–æ–º–µ—á–∞–µ–º pending –∏ –≤—ã—Ö–æ–¥–∏–º
            if (Interlocked.Exchange(ref _restarting, 1) == 1)
            {
                Interlocked.Exchange(ref _pendingRestart, 1);
                return;
            }

            try
            {
                await _restartGate.WaitAsync().ConfigureAwait(false);

                // —Ü–∏–∫–ª: –ø–æ–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–µ—Ç–∞—é—Ç –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º
                int backoffMs = 250;
                do
                {
                    Interlocked.Exchange(ref _pendingRestart, 0);
                    _restartAttempts++;

                    if (_isClosing) break;
                    LogMessage($"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ loopback-–∑–∞—Ö–≤–∞—Ç–∞ (—Å–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞) - –ø–æ–ø—ã—Ç–∫–∞ #{_restartAttempts}...");

                    try
                    {
                        // 1) –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ capture
                        var wasCapturing = isCapturing;
                        if (wasCapturing)
                        {
                            this.Invoke(() => {
                                try { StopRecording(); } catch { /* ignore */ }
                            });
                        }

                        // 2) –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        this.Invoke(() => {
                            try 
                            { 
                                RefreshAudioDevices(); 
                                if (availableSpeakerDevices.Count > 0 && wasCapturing)
                                {
                                    var bestDevice = availableSpeakerDevices.First();
                                    SetSpeakerDevice(bestDevice);
                                    LogMessage($"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω –∫: {bestDevice.FriendlyName}");
                                    
                                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ capture
                                    Task.Delay(500).ContinueWith(_ => this.Invoke(() => {
                                        try 
                                        { 
                                            StartAudioCapture(); 
                                            // –û–±–Ω–æ–≤–∏—Ç—å _currentRenderId —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
                                            _currentRenderId = GetDefaultRenderIdSafe();
                                        } 
                                        catch (Exception ex) 
                                        { 
                                            LogMessage($"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è capture: {ex.Message}"); 
                                        }
                                    }));
                                }
                            } 
                            catch (Exception ex) 
                            { 
                                LogMessage($"‚ùå –û—à–∏–±–∫–∞ UI –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–µ—Å—Ç–∞—Ä—Ç–µ: {ex.Message}"); 
                                throw; 
                            }
                        });

                        LogMessage($"‚úÖ –ó–∞—Ö–≤–∞—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ #{_restartAttempts})");
                        backoffMs = 250; // reset backoff on success
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ loopback (–ø–æ–ø—ã—Ç–∫–∞ #{_restartAttempts}): {ex.Message}");
                        LogMessage($"üîÑ Backoff: {backoffMs}ms, —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {Math.Min(backoffMs * 2, 5000)}ms");
                        // –±—ç–∫–æ—Ñ—Ñ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                        await Task.Delay(backoffMs).ConfigureAwait(false);
                        backoffMs = Math.Min(backoffMs * 2, 5000);
                        Interlocked.Exchange(ref _pendingRestart, 1);
                    }
                }
                while (Volatile.Read(ref _pendingRestart) == 1 && !_isClosing);
                
                // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
                if (!_isClosing && _restartAttempts > 1)
                {
                    LogMessage($"üìä –†–µ—Å—Ç–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ {_restartAttempts} –ø–æ–ø—ã—Ç–æ–∫");
                }
                _restartAttempts = 0;
            }
            finally
            {
                if (_restartGate.CurrentCount == 0) _restartGate.Release();
                Interlocked.Exchange(ref _restarting, 0);
            }
        }
        
        private void CleanupDeviceNotifications()
        {
            if (Interlocked.Exchange(ref _devNotifInit, 0) == 1)
            {
                try 
                { 
                    deviceEnumerator?.UnregisterEndpointNotificationCallback(notificationClient); 
                    deviceEnumerator?.Dispose();
                    notificationClient = null;
                    deviceEnumerator = null;
                    LogMessage("üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—á–∏—â–µ–Ω");
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
                }
            }
        }
        
        // üöÄ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –¥–ª—è device notifications
        private void StopRecording()
        {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏
            try { wasapiCapture?.StopRecording(); } catch { }
            try { waveInCapture?.StopRecording(); } catch { }
            LogMessage("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
        }
        
        private void RefreshAudioDevices()
        {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
            try
            {
                LogMessage("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤...");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }
        }
        
        private List<MMDevice> availableSpeakerDevices = new List<MMDevice>();
        
        private void SetSpeakerDevice(MMDevice device)
        {
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            try
            {
                LogMessage($"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.FriendlyName}");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {ex.Message}");
            }
        }

        #endregion

        #region Testing Guide and Manual

        /// <summary>
        /// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        private void btnTestingGuide_Click(object sender, EventArgs e)
        {
            ShowTestingGuide();
        }

        private void btnDiagnosticsDashboard_Click(object sender, EventArgs e)
        {
            ShowDiagnosticsDashboard();
        }

        private void btnDiagnostics_Click(object sender, EventArgs e)
        {
            TriggerSelfDiagnostics();
        }

        private void btnPerfDiag_Click(object sender, EventArgs e)
        {
            RunPerformanceDiagnostics();
        }

        private void btnAdvancedDiag_Click(object sender, EventArgs e)
        {
            RunAdvancedDiagnostics();
        }

        private void btnTextFilterValidation_Click(object sender, EventArgs e)
        {
            RunTextFilterValidation();
        }

        private void btnAllDiag_Click(object sender, EventArgs e)
        {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ CancellationTokenSource —Å —É—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            Interlocked.Exchange(ref testingCancellationTokenSource, null)?.Dispose();
            testingCancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = testingCancellationTokenSource.Token;
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—Ä—è–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–º–µ–Ω—ã
            Task.Run(async () => {
                try
                {
                    LogMessage("üéØ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–¥—Ä—è–¥)...");
                    
                    if (!cancellationToken.IsCancellationRequested)
                    {
                        TriggerSelfDiagnostics();
                        await Task.Delay(1000, cancellationToken);
                    }
                    
                    if (!cancellationToken.IsCancellationRequested)
                    {
                        RunPerformanceDiagnostics();
                        await Task.Delay(1000, cancellationToken);
                    }
                    
                    if (!cancellationToken.IsCancellationRequested)
                    {
                        RunAdvancedDiagnostics();
                        await Task.Delay(1000, cancellationToken);
                    }
                    
                    if (!cancellationToken.IsCancellationRequested)
                    {
                        RunTextFilterValidation();
                    }
                    
                    if (!cancellationToken.IsCancellationRequested)
                    {
                        LogMessage("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
                    }
                }
                catch (OperationCanceledException)
                {
                    LogMessage("‚ö†Ô∏è –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
                }
                catch (Exception ex)
                {
                    LogMessage($"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {ex.Message}");
                }
            }, cancellationToken);
        }

        private void btnEmergencyStop_Click(object sender, EventArgs e)
        {
            EmergencyStopAllTesting();
        }

        /// <summary>
        /// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        /// </summary>
        private void EmergencyStopAllTesting()
        {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            if (!btnEmergencyStop.Enabled) return;
            btnEmergencyStop.Enabled = false;
            
            try
            {
                LogMessage("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –¢–ï–°–¢–û–í!");
                
                // 1. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
                var cts = Interlocked.Exchange(ref testingCancellationTokenSource, null);
                cts?.Cancel();
                cts?.Dispose();
                LogMessage("‚úÖ –¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                
                // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
                if (chkInfiniteTests.Checked)
                {
                    chkInfiniteTests.Checked = false;
                    LogMessage("‚úÖ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã");
                }
                
                // 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –∑–∞—Ö–≤–∞—Ç –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
                if (isCapturing && stableAudioCapture != null)
                {
                    Task.Run(async () => {
                        try
                        {
                            await stableAudioCapture.StopCaptureAsync();
                            LogMessage("‚úÖ –ê—É–¥–∏–æ –∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                        }
                        catch (Exception ex)
                        {
                            LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—É–¥–∏–æ: {ex.Message}");
                        }
                    });
                }
                
                // 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                this.Invoke(() => {
                    lblStatus.Text = "üîá –ì–æ—Ç–æ–≤ –∫ –∑–∞—Ö–≤–∞—Ç—É";
                    lblStatus.ForeColor = Color.Blue;
                    btnStartCapture.Enabled = true;
                    btnStopCapture.Enabled = false;
                });
                
                // 5. –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ - —É–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π GC
                Task.Run(() => {
                    try
                    {
                        // –ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ CLR –¥–ª—è —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞
                        LogMessage("‚úÖ –ö–∞–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {ex.Message}");
                    }
                });
                
                LogMessage("üéØ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.");
                
                // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                this.Invoke(() => {
                    lblStats.Text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";
                    lblStats.ForeColor = Color.Red;
                    
                    // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
                    Task.Delay(3000).ContinueWith(_ => {
                        this.Invoke(() => {
                            lblStats.ForeColor = Color.Black;
                        });
                    });
                });
                
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {ex.Message}");
            }
            finally
            {
                btnEmergencyStop.Enabled = true;
            }
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        private void ShowTestingGuide()
        {
            // –ï—Å–ª–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
            if (guideWindow != null && !guideWindow.IsDisposed)
            {
                guideWindow.WindowState = FormWindowState.Normal;
                guideWindow.BringToFront();
                guideWindow.Activate();
                return;
            }

            guideWindow = new Form
            {
                Text = "üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é STT+Translate+TTS",
                Size = new Size(900, 700),
                StartPosition = FormStartPosition.Manual,
                FormBorderStyle = FormBorderStyle.Sizable,
                MinimumSize = new Size(800, 600),
                MaximizeBox = true,
                MinimizeBox = true,
                ShowInTaskbar = true,
                Icon = this.Icon
            };

            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ (–¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞)
            var mainFormBounds = this.Bounds;
            guideWindow.Location = new Point(mainFormBounds.Right + 20, mainFormBounds.Top);
            
            // –ï—Å–ª–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞, —Ä–∞–∑–º–µ—â–∞–µ–º —Å–ª–µ–≤–∞
            var screen = Screen.FromControl(this);
            if (guideWindow.Right > screen.WorkingArea.Right)
            {
                guideWindow.Location = new Point(Math.Max(0, mainFormBounds.Left - guideWindow.Width - 20), mainFormBounds.Top);
            }

            var txtGuide = new TextBox
            {
                Multiline = true,
                ScrollBars = ScrollBars.Vertical,
                Dock = DockStyle.Fill,
                Font = new Font("Segoe UI", 10F),
                BackColor = Color.White,
                ReadOnly = true,
                Text = GetTestingGuideText()
            };

            guideWindow.Controls.Add(txtGuide);
            
            // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
            guideWindow.FormClosed += (s, e) => { guideWindow = null; };
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–º–æ–¥–∞–ª—å–Ω–æ - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ!
            guideWindow.Show();
            
            // –î–µ–ª–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ "–≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É" —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è–ª—Å—è
            guideWindow.TopMost = true;
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        /// </summary>
        private string GetTestingGuideText()
        {
            return @"üìã –°–ü–†–ê–í–û–ß–ù–ò–ö –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ STT+TRANSLATE+TTS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üí° –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ! 
–í—ã –º–æ–∂–µ—Ç–µ –¥–µ—Ä–∂–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ 
–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º.

üéØ –°–û–î–ï–†–ñ–ê–ù–ò–ï:
1. –†–∞–±–æ—Ç–∞ —Å –¥–≤—É–º—è –æ–∫–Ω–∞–º–∏
2. –û—Å–Ω–æ–≤—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
3. –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
4. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
5. –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
6. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
7. –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
8. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
9. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üíª 1. –†–ê–ë–û–¢–ê –° –î–í–£–ú–Ø –û–ö–ù–ê–ú–ò

üìå –£–î–û–ë–°–¢–í–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
‚Ä¢ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –Ω–µ–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º
‚Ä¢ –ú–æ–∂–Ω–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ - —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º

üìå –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ö–ù–ê–ú–ò:
‚Ä¢ F10 –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ""üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"" - –æ—Ç–∫—Ä—ã—Ç—å/–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
‚Ä¢ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ ""–≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É"" - –Ω–µ —Ç–µ—Ä—è–µ—Ç—Å—è –∑–∞ –¥—Ä—É–≥–∏–º–∏ –æ–∫–Ω–∞–º–∏
‚Ä¢ –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ F10 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã

üìå –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê:
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (F10)
‚Ä¢ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –∏–ª–∏ –≤ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ
‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –≤–æ –≤—Ä–µ–º—è –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∫–∞–∫ –æ–±—ã—á–Ω–æ - –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîß 2. –û–°–ù–û–í–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø

üìå –ü–û–î–ì–û–¢–û–í–ö–ê:
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ –∑–≤—É–∫–∞ (–æ–±—ã—á–Ω–æ 0.050 - —Ö–æ—Ä–æ—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏: ""–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"" ‚Üí ""–†—É—Å—Å–∫–∏–π"" –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
‚Ä¢ –í–ê–ñ–ù–û: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ ""‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã""

üìå –†–ï–ñ–ò–ú–´ –ó–ê–•–í–ê–¢–ê –ó–í–£–ö–ê:
‚Ä¢ üîä ""–ó–∞—Ö–≤–∞—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤"" - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∑–≤—É–∫ –∏–∑ –¥–∏–Ω–∞–º–∏–∫–æ–≤/–Ω–∞—É—à–Ω–∏–∫–æ–≤ (WasapiLoopback)
  ‚îî‚îÄ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –≤–∫–ª—é—á–∏—Ç–µ –º—É–∑—ã–∫—É/–≤–∏–¥–µ–æ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
‚Ä¢ üé§ ""–ó–∞—Ö–≤–∞—Ç —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"" - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (WaveInEvent, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ MORT)  
  ‚îî‚îÄ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –≥–æ–≤–æ—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω
‚Ä¢ üé¨ ""–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º"" - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üìå –ö–ù–û–ü–ö–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
‚Ä¢ üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (F5) - –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 6 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚Ä¢ üìä Performance (F6) - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
‚Ä¢ üî¨ Advanced (F7) - —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (6 –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
‚Ä¢ üéØ –í—Å–µ —Ç–µ—Å—Ç—ã (F8) - –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ üîç Text Filter (F9) - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞ (22 —Ç–µ—Å—Ç–∞)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚öôÔ∏è 3. –≠–õ–ï–ú–ï–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê

üìå –û–°–ù–û–í–ù–´–ï –ö–ù–û–ü–ö–ò:
‚Ä¢ üéß ""–ù–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç"" - –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤—É–∫–∞
‚Ä¢ ‚èπÔ∏è ""–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"" - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞—Ö–≤–∞—Ç–∞
‚Ä¢ üîä ""–¢–µ—Å—Ç TTS"" - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É)
‚Ä¢ üìã ""–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"" (F10) - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫

üìå –í–´–ü–ê–î–ê–Æ–©–ò–ï –°–ü–ò–°–ö–ò:
‚Ä¢ üîä ""–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"" - –≤—ã–±–æ—Ä –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
‚Ä¢ üåç ""–ò–∑ —è–∑—ã–∫–∞"" - —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (""–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"" —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ üéØ ""–ù–∞ —è–∑—ã–∫"" - —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–æ–±—ã—á–Ω–æ ""–†—É—Å—Å–∫–∏–π"")
‚Ä¢ ‚öôÔ∏è ""–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"" - —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤—É–∫–∞:
  ‚îî‚îÄ üîÑ ""–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (–∂–¥–µ—Ç –ø–∞—É–∑—ã)"" - –∑–∞—Ö–≤–∞—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤, –∂–¥–µ—Ç —Ç–∏—à–∏–Ω—ã
  ‚îî‚îÄ ‚ö° ""–ü–æ—Ç–æ–∫–æ–≤—ã–π (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫)"" - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 3 —Å–µ–∫—É–Ω–¥—ã  
  ‚îî‚îÄ üé§ ""–ú–∏–∫—Ä–æ—Ñ–æ–Ω (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ MORT)"" - –∑–∞—Ö–≤–∞—Ç —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞

üìå –ù–ê–°–¢–†–û–ô–ö–ò:
‚Ä¢ üéöÔ∏è ""–ü–æ—Ä–æ–≥ –∑–≤—É–∫–∞"" - —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∑–≤—É–∫—É (0.001-1.000)
  ‚îî‚îÄ –ù–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (0.020) = –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ
  ‚îî‚îÄ –í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (0.100) = –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ
‚Ä¢ üîÑ ""–ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ + TTS"" - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
‚Ä¢ üîÑ ""–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã"" - —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

üìå –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ü–ê–ù–ï–õ–ò:
‚Ä¢ üé§ ""–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"" - —Ä–µ–∑—É–ª—å—Ç–∞—Ç STT (—Ä–µ—á—å ‚Üí —Ç–µ–∫—Å—Ç)
‚Ä¢ üåê ""–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"" - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
‚Ä¢ üìä ""–£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞"" - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞  
‚Ä¢ üìù ""–õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"" - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
‚Ä¢ üìä ""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"" - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã

üìå –ò–ù–î–ò–ö–ê–¢–û–†–´ –°–û–°–¢–û–Ø–ù–ò–Ø:
‚Ä¢ üîá ""–ì–æ—Ç–æ–≤ –∫ –∑–∞—Ö–≤–∞—Ç—É"" - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞
‚Ä¢ üé§ ""–ò–¥–µ—Ç –∑–∞—Ö–≤–∞—Ç..."" - –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
‚Ä¢ ‚ö° ""–û–±—Ä–∞–±–æ—Ç–∫–∞ STT..."" - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
‚Ä¢ üåê ""–ü–µ—Ä–µ–≤–æ–¥..."" - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
‚Ä¢ üîä ""TTS –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ..."" - —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
‚Ä¢ ‚ùå ""–û—à–∏–±–∫–∞: [–æ–ø–∏—Å–∞–Ω–∏–µ]"" - –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üé§ 4. –ß–¢–û –ì–û–í–û–†–ò–¢–¨ –î–õ–Ø –¢–ï–°–¢–û–í

‚úÖ –í–ê–õ–ò–î–ù–´–ï –§–†–ê–ó–´ (–¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è):

–†–£–°–°–ö–ò–ô:
‚Ä¢ ""–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?""
‚Ä¢ ""–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞!""
‚Ä¢ ""–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å...""
‚Ä¢ ""iPhone —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.""
‚Ä¢ ""5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ —Å–ª—É—á–∏–ª–æ—Å—å —ç—Ç–æ.""
‚Ä¢ ""–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞.""
‚Ä¢ ""–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?""
‚Ä¢ ""–î–∞–≤–∞–π –ø–æ–π–¥–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω.""

–ê–ù–ì–õ–ò–ô–°–ö–ò–ô:
‚Ä¢ ""Hello, how are you?""
‚Ä¢ ""This is a great application.""
‚Ä¢ ""I need to think about it...""
‚Ä¢ ""The weather is nice today.""
‚Ä¢ ""What do you think about this?""

–ú–ù–û–ì–û–Ø–ó–´–ß–ù–´–ï –¢–ï–°–¢–´:
‚Ä¢ ""¬øC√≥mo est√°s?"" (–∏—Å–ø–∞–Ω—Å–∫–∏–π)
‚Ä¢ ""Das ist interessant."" (–Ω–µ–º–µ—Ü–∫–∏–π)
‚Ä¢ ""C'est tr√®s bien!"" (—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π)

‚ùå –ú–£–°–û–†–ù–´–ï –§–†–ê–ó–´ (–¥–æ–ª–∂–Ω—ã –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è):

–ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ï:
‚Ä¢ ""what we do"" (–±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
‚Ä¢ ""–ø—Ä–∏–≤–µ—Ç –º–∏—Ä"" (–º–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤–∞ –±–µ–∑ —Ç–æ—á–∫–∏)
‚Ä¢ ""hallo wie geht"" (–Ω–µ–º–µ—Ü–∫–∏–π –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)

–ú–ï–ñ–î–û–ú–ï–¢–ò–Ø:
‚Ä¢ ""hmm""
‚Ä¢ ""—ç-—ç-—ç""
‚Ä¢ ""–∞–≥–∞""
‚Ä¢ ""–Ω—É–¥–∞""

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–û–ö–ï–ù–´:
‚Ä¢ ""[BLANK_AUDIO]""
‚Ä¢ ""*burp*""
‚Ä¢ ""(–∑–≤—É–∫)""

–û–î–ò–ù–û–ß–ù–´–ï –°–ò–ú–í–û–õ–´:
‚Ä¢ ""–∞""
‚Ä¢ ""–∏""
‚Ä¢ ""..."" (—Ç–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏)
‚Ä¢ ""???"" (—Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä 4. –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

üü¢ –ù–û–†–ú–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê:

–†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –†–ï–ß–ò:
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2-5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ñ—Ä–∞–∑—ã
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 85-95% –¥–ª—è —á–µ—Ç–∫–æ–π —Ä–µ—á–∏
‚Ä¢ –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
‚Ä¢ –õ–æ–≥–∏: ""‚úÖ STT –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞""

–§–ò–õ–¨–¢–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê:
‚Ä¢ –í–∞–ª–∏–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ ""–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç""
‚Ä¢ –ú—É—Å–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –õ–æ–≥–∏: ""‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç"" –∏–ª–∏ ""‚ùå –¢–µ–∫—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞""

–ü–ï–†–ï–í–û–î:
‚Ä¢ Google Translate —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ –í—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: 1-3 —Å–µ–∫—É–Ω–¥—ã
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ—Ä–∞–∑
‚Ä¢ –õ–æ–≥–∏: ""‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω""

TTS (–°–ò–ù–¢–ï–ó –†–ï–ß–ò):
‚Ä¢ –ß–µ—Ç–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ë–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
‚Ä¢ –õ–æ–≥–∏: ""‚úÖ TTS –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ""

–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ‚úÖ
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å >= 85% –¥–ª—è Text Filter
‚Ä¢ Memory usage < 500MB
‚Ä¢ Whisper warm start < 100ms

üü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ):

–†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï:
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 6-10 —Å–µ–∫—É–Ω–¥
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å 70-85%
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏—Ö–∏—Ö —Å–ª–æ–≤
‚Ä¢ –õ–æ–≥–∏: ""‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞""

–§–ò–õ–¨–¢–†–ê–¶–ò–Ø:
‚Ä¢ –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –º—É—Å–æ—Ä
‚Ä¢ –†–µ–¥–∫–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Text Filter: 70-85%

–ü–ï–†–ï–í–û–î:
‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç Google (4-8 —Å–µ–∫—É–Ω–¥)
‚Ä¢ –ò–Ω–æ–≥–¥–∞ –Ω–µ—Ç–æ—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
‚Ä¢ –õ–æ–≥–∏: ""‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥""

üî¥ –ü–†–û–ë–õ–ï–ú–´ (—Ç—Ä–µ–±—É–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞):

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:
‚Ä¢ ""‚ùå Whisper –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞""
‚Ä¢ ""‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MediaFoundation""
‚Ä¢ ""‚ùå –ê—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ""
‚Ä¢ Memory usage > 500MB
‚Ä¢ Whisper cold start > 5 —Å–µ–∫—É–Ω–¥

–°–ï–¢–ï–í–´–ï –ü–†–û–ë–õ–ï–ú–´:
‚Ä¢ ""‚ùå Google Translate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω""
‚Ä¢ ""‚ùå Timeout –ø–µ—Ä–µ–≤–æ–¥–∞""
‚Ä¢ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

–ê–£–î–ò–û –ü–†–û–ë–õ–ï–ú–´:
‚Ä¢ –ù–µ—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
‚Ä¢ –ò—Å–∫–∞–∂–µ–Ω–∏—è –∏–ª–∏ —à—É–º—ã
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîç 5. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ê–ë–û–¢–´

üìã –ü–û–®–ê–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:

1. –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ F5 –∏–ª–∏ –∫–Ω–æ–ø–∫—É ""üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞""
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ ‚úÖ –≤ –æ—Ç—á–µ—Ç–µ
   ‚Ä¢ –ü—Ä–∏ ‚ùå —Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏

2. –¢–ï–°–¢ –ê–£–î–ò–û–°–ò–°–¢–ï–ú–´:
   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞—Ö–≤–∞—Ç (üéß –ù–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç)
   ‚Ä¢ –†–ï–ñ–ò–ú –î–ò–ù–ê–ú–ò–ö–û–í: –í–∫–ª—é—á–∏—Ç–µ –º—É–∑—ã–∫—É/YouTube, –≥–æ–≤–æ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
   ‚Ä¢ –†–ï–ñ–ò–ú –ú–ò–ö–†–û–§–û–ù–ê: –ì–æ–≤–æ—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω
   ‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É: ""–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?""
   ‚Ä¢ –ù–∞–±–ª—é–¥–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –≤ progressbar
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ ""–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç""

3. –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò:
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ F9 –¥–ª—è Text Filter –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç >= 85%
   ‚Ä¢ –ü—Ä–∏ –Ω–∏–∑–∫–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ - –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º

4. –¢–ï–°–¢ TTS:
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ""üîä –¢–µ—Å—Ç TTS""
   ‚Ä¢ –î–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å—Å—è: ""–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ""
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞

5. –¢–ï–°–¢ –ü–ï–†–ï–í–û–î–ê:
   ‚Ä¢ –°–∫–∞–∂–∏—Ç–µ ""Hello, how are you?"" 
   ‚Ä¢ –î–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –ø–µ—Ä–µ–≤–æ–¥ ""–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?""
   ‚Ä¢ TTS –¥–æ–ª–∂–µ–Ω –æ–∑–≤—É—á–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥

üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:
‚Ä¢ F6 - Performance –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ Whisper
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å Bounded Channels

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ö†Ô∏è 6. –ü–†–û–ë–õ–ï–ú–´ –ò –†–ï–®–ï–ù–ò–Ø

üîß –ß–ê–°–¢–´–ï –ü–†–û–ë–õ–ï–ú–´:

–ü–†–û–ë–õ–ï–ú–ê: ""–ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏""
–†–ï–®–ï–ù–ò–ï:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ Windows
‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ—Ä–æ–≥ –∑–≤—É–∫–∞ –¥–æ 0.020
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

–ü–†–û–ë–õ–ï–ú–ê: ""–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞""
–†–ï–®–ï–ù–ò–ï:
‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Memory usage (F6)
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Whisper warm start –≤—Ä–µ–º—è

–ü–†–û–ë–õ–ï–ú–ê: ""–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è""
–†–ï–®–ï–ù–ò–ï:
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç—á–µ –∏ –≥—Ä–æ–º—á–µ
‚Ä¢ –£–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω–æ–≤—ã–µ —à—É–º—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ –±–ª–∏–∂–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É

–ü–†–û–ë–õ–ï–ú–ê: ""–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç""
–†–ï–®–ï–ù–ò–ï:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Google Translate
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —è–∑—ã–∫–æ–≤—É—é –ø–∞—Ä—É

–ü–†–û–ë–õ–ï–ú–ê: ""TTS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç""
–†–ï–®–ï–ù–ò–ï:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Windows Audio Service

üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:
‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞—Ö–≤–∞—Ç (‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)
‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞—Ö–≤–∞—Ç —Å–Ω–æ–≤–∞
‚Ä¢ –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üöÄ 7. –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï

üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û –†–ï–ñ–ò–ú–ê–ú –ó–ê–•–í–ê–¢–ê:

üì¢ –¢–ï–°–¢ –†–ï–ñ–ò–ú–ê ""–ó–ê–•–í–ê–¢ –° –î–ò–ù–ê–ú–ò–ö–û–í"":
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ""–ó–∞—Ö–≤–∞—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤""
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–¥–∏–Ω–∞–º–∏–∫–∏/–Ω–∞—É—à–Ω–∏–∫–∏)
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª—é–±—É—é –º—É–∑—ã–∫—É –∏–ª–∏ YouTube –≤–∏–¥–µ–æ
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –ü–û–í–ï–†–• –º—É–∑—ã–∫–∏:
  ‚îî‚îÄ ""–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"" 
  ‚îî‚îÄ ""–Ø —Ç–µ—Å—Ç–∏—Ä—É—é –∑–∞—Ö–≤–∞—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–≤""
  ‚îî‚îÄ ""–ú—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç, –Ω–æ –º–µ–Ω—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª—ã—à–Ω–æ""
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤–∞—à—É —Ä–µ—á—å + —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
‚Ä¢ –û–ñ–ò–î–ê–ï–ú–û: –°–º–µ—à–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏ –º—É–∑—ã–∫–∏

üé§ –¢–ï–°–¢ –†–ï–ñ–ò–ú–ê ""–ó–ê–•–í–ê–¢ –° –ú–ò–ö–†–û–§–û–ù–ê"":
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ""–ó–∞—Ö–≤–∞—Ç —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞""
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω:
  ‚îî‚îÄ ""–¢–µ—Å—Ç–∏—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º""
  ‚îî‚îÄ ""–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ MORT""
  ‚îî‚îÄ ""–¢–æ–ª—å–∫–æ –º–æ–π –≥–æ–ª–æ—Å, –±–µ–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–≤—É–∫–æ–≤""
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¢–û–õ–¨–ö–û –≤–∞—à –≥–æ–ª–æ—Å
‚Ä¢ –û–ñ–ò–î–ê–ï–ú–û: –ß–∏—Å—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä–µ—á–∏

üé¨ –¢–ï–°–¢ –°–¢–†–ò–ú–ò–ù–ì–û–í–û–ì–û –†–ï–ñ–ò–ú–ê:
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ""–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º""
‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∫ —Ä–µ–∂–∏–º —Å –¥–∏–Ω–∞–º–∏–∫–∞–º–∏
‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üî¨ –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:

–î–õ–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢:
‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ ""üîÑ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã""
‚Ä¢ –û—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ 15-30 –º–∏–Ω—É—Ç
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ Memory usage
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã

–ú–ù–û–ì–û–Ø–ó–´–ß–ù–´–ô –¢–ï–°–¢:
‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ —è–∑—ã–∫–æ–≤—ã–µ –ø–∞—Ä—ã
‚Ä¢ ""English"" ‚Üí ""–†—É—Å—Å–∫–∏–π""
‚Ä¢ ""–†—É—Å—Å–∫–∏–π"" ‚Üí ""–ê–Ω–≥–ª–∏–π—Å–∫–∏–π""
‚Ä¢ ""–ò—Å–ø–∞–Ω—Å–∫–∏–π"" ‚Üí ""–†—É—Å—Å–∫–∏–π""
‚Ä¢ ""–ù–µ–º–µ—Ü–∫–∏–π"" ‚Üí ""–ê–Ω–≥–ª–∏–π—Å–∫–∏–π""

–ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò:
‚Ä¢ –û—á–µ–Ω—å —Ç–∏—Ö–∞—è —Ä–µ—á—å
‚Ä¢ –û—á–µ–Ω—å –≥—Ä–æ–º–∫–∞—è —Ä–µ—á—å
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Ä–µ—á—å
‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å
‚Ä¢ –†–µ—á—å —Å –∞–∫—Ü–µ–Ω—Ç–æ–º
‚Ä¢ –§–æ–Ω–æ–≤—ã–π —à—É–º

üéØ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:

–•–û–õ–û–î–ù–´–ô –°–¢–ê–†–¢:
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ F7 (Advanced –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
‚Ä¢ Cold start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 5 —Å–µ–∫—É–Ω–¥

–¢–ï–ü–õ–´–ô –°–¢–ê–†–¢:
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ F7
‚Ä¢ Warm start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 100ms

–ü–ê–ú–Ø–¢–¨:
‚Ä¢ –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: ~50-100MB
‚Ä¢ –†–∞–±–æ—á–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: ~200-300MB
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –¥–æ–ø—É—Å—Ç–∏–º–æ: ~500MB

üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:

–ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
1. ‚úÖ Warm Whisper Instance
2. ‚úÖ MediaFoundation
3. ‚úÖ Bounded Channels 
4. ‚úÖ Enhanced Text Filtering
5. ‚úÖ Device Notifications
6. ‚úÖ Audio Devices

–ö–ê–ù–ê–õ–´ –û–ë–†–ê–ë–û–¢–ö–ò:
‚Ä¢ Capture Channel (–∞—É–¥–∏–æ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
‚Ä¢ Mono16k Channel (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ)
‚Ä¢ STT Channel (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)

–§–û–ù–û–í–´–ï –ü–†–û–¶–ï–°–°–´:
‚Ä¢ Continuous Monitoring (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)
‚Ä¢ Device Change Detection
‚Ä¢ Memory Leak Detection

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚öôÔ∏è 8. –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´ –ò –°–û–•–†–ê–ù–ï–ù–ò–ï

üìÅ –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –§–ê–ô–õ–û–í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:
‚Ä¢ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: application.exe.config (—Ä—è–¥–æ–º —Å EXE)
‚Ä¢ Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: config.backup (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìã –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö:
‚Ä¢ üéöÔ∏è –ü–æ—Ä–æ–≥ –∑–≤—É–∫–∞ (ThresholdValue)
‚Ä¢ üåê –Ø–∑—ã–∫–æ–≤—ã–µ –ø–∞—Ä—ã (SourceLanguage, TargetLanguage)
‚Ä¢ üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ ""–ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ + TTS""
‚Ä¢ üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ ""–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã""
‚Ä¢ üìè –†–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞
‚Ä¢ üé§ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞—Ö–≤–∞—Ç–∞

üì§ –≠–ö–°–ü–û–†–¢ –ù–ê–°–¢–†–û–ï–ö:
‚Ä¢ –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ

üîß –†–£–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò:
‚Ä¢ –°–±—Ä–æ—Å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º: —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª application.exe.config
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ application.exe.config –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –∑–∞–º–µ–Ω–∏—Ç–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π config —Ñ–∞–π–ª–æ–º –∏–∑ backup

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚å®Ô∏è 9. –ë–´–°–¢–†–´–ï –ö–õ–ê–í–ò–®–ò –ò –ì–û–†–Ø–ß–ò–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò

üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ö–õ–ê–í–ò–®–ò:
‚Ä¢ F5 - –ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã)
‚Ä¢ F6 - –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
‚Ä¢ F7 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (full system scan)
‚Ä¢ F8 - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Å —Ç–µ—Å—Ç–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
‚Ä¢ F9 - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
‚Ä¢ F10 - –û—Ç–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (—ç—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)

üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–•–í–ê–¢–û–ú:
‚Ä¢ –ü—Ä–æ–±–µ–ª - –ù–∞—á–∞—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ö–≤–∞—Ç –∑–≤—É–∫–∞
‚Ä¢ Enter - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
‚Ä¢ Escape - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

üåê –ü–ï–†–ï–í–û–î–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ Ctrl+T - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ ON/OFF
‚Ä¢ Ctrl+R - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ Ctrl+C - –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä

üîß –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ Ctrl+D - –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
‚Ä¢ Ctrl+L - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
‚Ä¢ Ctrl+S - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ Alt+F4 - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º

üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ Ctrl+Shift+I - –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã (–≤–∫–ª/–≤—ã–∫–ª)
‚Ä¢ Ctrl+Shift+R - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã
‚Ä¢ Ctrl+Shift+M - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ (–¥–∏–Ω–∞–º–∏–∫–∏/–º–∏–∫—Ä–æ—Ñ–æ–Ω)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

–≠—Ç–æ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É 
**test_speaker_stt_translate_tts** - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
–¥–ª—è —Ä–µ—á–µ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏.

–ü–æ–º–Ω–∏—Ç–µ: —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å —á–µ—Ç–∫–æ–π —Ä–µ—á—å—é, —Å—Ç–∞–±–∏–ª—å–Ω—ã–º 
–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º.

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º - —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (F5),
–∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ F6-F9.

–£–¥–∞—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–π STT+Translate+TTS —Å–∏—Å—Ç–µ–º—ã! üéâ

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê";
        }

        
        #region Diagnostics Dashboard Management
        
        /// <summary>
        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π dashboard
        /// </summary>
        private void ShowDiagnosticsDashboard()
        {
            try
            {
                if (diagnosticsDashboard == null || diagnosticsDashboard.IsDisposed)
                {
                    diagnosticsDashboard = new DiagnosticsChecklistForm(this);
                    
                    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if (Screen.AllScreens.Length > 1)
                    {
                        var secondScreen = Screen.AllScreens[1];
                        diagnosticsDashboard.StartPosition = FormStartPosition.Manual;
                        diagnosticsDashboard.Location = new Point(
                            secondScreen.Bounds.X + 50,
                            secondScreen.Bounds.Y + 50
                        );
                    }
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ –≤—ã–Ω–æ—Å–∏–º –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
                if (diagnosticsDashboard.Visible)
                {
                    diagnosticsDashboard.Activate();
                    diagnosticsDashboard.BringToFront();
                }
                else
                {
                    diagnosticsDashboard.Show();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ dashboard: {ex.Message}");
            }
        }
        
        #endregion

        #endregion
    }
    
    // üöÄ –ö–õ–ê–°–° –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤  
    public class AudioDeviceNotificationClient : IMMNotificationClient
    {
        private readonly Form1 form;
        
        public AudioDeviceNotificationClient(Form1 form)
        {
            this.form = form;
        }
        
        public void OnDefaultDeviceChanged(DataFlow flow, Role role, string defaultDeviceId)
        {
            try
            {
                // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                form?.Invoke(new Action(() => {
                    form.LogMessage($"üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–æ: {flow} —Ä–æ–ª—å {role}, ID: {defaultDeviceId ?? "null"}");
                    form.OnDeviceChanged();
                }));
            }
            catch (Exception ex)
            {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –±–µ–∑ –≤—ã–∑–æ–≤–∞ UI –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                System.Diagnostics.Debug.WriteLine($"OnDefaultDeviceChanged error: {ex.Message}");
            }
        }
        
        public void OnDeviceAdded(string pwstrDeviceId)
        {
            try
            {
                // –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                form?.Invoke(new Action(() => {
                    form.LogMessage($"‚ûï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ID {pwstrDeviceId ?? "null"}");
                    form.OnDeviceChanged();
                }));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"OnDeviceAdded error: {ex.Message}");
            }
        }
        
        public void OnDeviceRemoved(string pwstrDeviceId)
        {
            try
            {
                // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ
                form?.Invoke(new Action(() => {
                    form.LogMessage($"‚ûñ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ: ID {pwstrDeviceId ?? "null"}");
                    form.OnDeviceChanged();
                }));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"OnDeviceRemoved error: {ex.Message}");
            }
        }
        
        public void OnDeviceStateChanged(string deviceId, DeviceState newState)
        {
            try
            {
                // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                form?.Invoke(new Action(() => {
                    form.LogMessage($"üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–æ: ID {deviceId ?? "null"} ‚Üí {newState}");
                    form.OnDeviceChanged();
                }));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"OnDeviceStateChanged error: {ex.Message}");
            }
        }
        
        public void OnPropertyValueChanged(string pwstrDeviceId, PropertyKey key)
        {
            // –°–≤–æ–π—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)
        }
    }
}


