using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ MORT
    /// –ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞
    /// </summary>
    public static class AdvancedSpeechFilter
    {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤
        private const float MIN_SPEECH_LIKELIHOOD = 0.3f;
        private const int MIN_TEXT_LENGTH = 2;
        private const float MIN_DYNAMIC_RANGE = 1.5f;
        private const float MAX_DYNAMIC_RANGE = 15.0f;
        private const float MIN_CHANGE_RATE = 0.05f;
        private const float MAX_CHANGE_RATE = 0.9f;

        /// <summary>
        /// –°—Ç—Ä–æ–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã Whisper - –≤—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è
        /// </summary>
        private static readonly string[] STRICT_TECHNICAL_TOKENS = {
            "[music]", "[applause]", "[noise]", "[silence]", "[beep]", "[sound]", "[audio]",
            "this is human speech", "this is human", "human speech",
            "[background music]", "[laughter]", "[inaudible]"
        };

        /// <summary>
        /// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö - —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è
        /// </summary>
        private static readonly string[] EMOTIONAL_MARKERS = {
            "*sigh*", "*laugh*", "*cough*", "*sneeze*", "*yawn*", "*whisper*", "*shout*",
            "*crying*", "*sobbing*", "*giggle*", "*gasp*", "*breath*", "*breathing*"
        };

        /// <summary>
        /// –°–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã - –Ω–µ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è
        /// </summary>
        private static readonly string[] SYSTEM_MESSAGES = {
            "[–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω]", "[–û—à–∏–±–∫–∞]", "[Fallback]", "[Test]", "[–¢–ï–°–¢]",
            "[System]", "Error -", "INVALID_REQUEST", "BadRequest",
            "üîá –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—á–∏", "üé§ –°–ª—É—à–∞—é", "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é",
            "VOSK recognition", "Windows Speech", "(plug)", "(–∑–∞–≥–ª—É—à–∫–∞)"
        };

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        /// </summary>
        public static bool IsValidHumanSpeech(string text, float[]? audioSamples = null)
        {
            if (string.IsNullOrWhiteSpace(text)) return false;

            var cleanText = text.Trim();
            var lowerText = cleanText.ToLower();

            // –£—Ä–æ–≤–µ–Ω—å 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–≥–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
            if (IsStrictTechnicalToken(lowerText))
            {
                AudioAnalysisUtils.SafeDebugLog($"üö´ [L1] –°—Ç—Ä–æ–≥–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω: '{text}'");
                return false;
            }

            // –£—Ä–æ–≤–µ–Ω—å 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (IsSystemMessage(lowerText))
            {
                AudioAnalysisUtils.SafeDebugLog($"üö´ [L2] –°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'");
                return false;
            }

            // –£—Ä–æ–≤–µ–Ω—å 3: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
            if (!PassesBasicValidation(cleanText))
            {
                AudioAnalysisUtils.SafeDebugLog($"üö´ [L3] –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: '{text}'");
                return false;
            }

            // –£—Ä–æ–≤–µ–Ω—å 4: –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            if (audioSamples != null)
            {
                float speechLikelihood = AnalyzeSpeechCharacteristics(audioSamples);
                if (speechLikelihood < MIN_SPEECH_LIKELIHOOD)
                {
                    AudioAnalysisUtils.SafeDebugLog($"üö´ [L4] –ê—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑: speechLikelihood={speechLikelihood:F3} < {MIN_SPEECH_LIKELIHOOD}");
                    return false;
                }
            }

            // –£—Ä–æ–≤–µ–Ω—å 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            if (!HasRealWords(lowerText))
            {
                AudioAnalysisUtils.SafeDebugLog($"üö´ [L5] –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: '{text}'");
                return false;
            }

            // –£—Ä–æ–≤–µ–Ω—å 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å—Ç–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            if (IsOnlyEmotionalMarkers(cleanText))
            {
                AudioAnalysisUtils.SafeDebugLog($"üö´ [L6] –¢–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã: '{text}'");
                return false;
            }

            AudioAnalysisUtils.SafeDebugLog($"‚úÖ –ü—Ä–∏–Ω—è—Ç –∫–∞–∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ä–µ—á—å: '{text}'");
            return true;
        }

        /// <summary>
        /// –£—Ä–æ–≤–µ–Ω—å 1: –°—Ç—Ä–æ–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã
        /// </summary>
        private static bool IsStrictTechnicalToken(string lowerText)
        {
            // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            if (STRICT_TECHNICAL_TOKENS.Contains(lowerText))
                return true;

            // –ü–æ–ª–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
            if (lowerText.StartsWith("[") && lowerText.EndsWith("]"))
                return true;

            // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö
            if (EMOTIONAL_MARKERS.Contains(lowerText))
                return true;

            // –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö *—Ç–µ–∫—Å—Ç*
            if (lowerText.StartsWith("*") && lowerText.EndsWith("*") && lowerText.Length > 2)
                return true;

            return false;
        }

        /// <summary>
        /// –£—Ä–æ–≤–µ–Ω—å 2: –°–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        private static bool IsSystemMessage(string lowerText)
        {
            foreach (var systemMsg in SYSTEM_MESSAGES)
            {
                if (lowerText.Contains(systemMsg.ToLower()))
                    return true;
            }

            return false;
        }

        /// <summary>
        /// –£—Ä–æ–≤–µ–Ω—å 3: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
        /// </summary>
        private static bool PassesBasicValidation(string text)
        {
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –¥–ª—è —Ü–∏—Ñ—Ä)
            if (text.Length < MIN_TEXT_LENGTH && !text.Any(char.IsDigit))
                return false;

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ—Ä–∞–∑—ã —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            if (text.All(c => !char.IsLetterOrDigit(c)))
                return false;

            // –§–∏–ª—å—Ç—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
            if (text.Length > 1 && text.All(c => c == text[0]))
                return false;

            return true;
        }

        /// <summary>
        /// –£—Ä–æ–≤–µ–Ω—å 4: –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ MORT)
        /// </summary>
        private static float AnalyzeSpeechCharacteristics(float[] samples)
        {
            try
            {
                if (samples == null || samples.Length < 8) return 0.5f;

                float avgAmplitude = 0;
                float maxAmplitude = 0;
                int changeCount = 0;
                float lastSample = 0;

                foreach (var sample in samples)
                {
                    float amplitude = Math.Abs(sample);
                    avgAmplitude += amplitude;

                    if (amplitude > maxAmplitude)
                        maxAmplitude = amplitude;

                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    if (Math.Abs(sample - lastSample) > 0.01f)
                        changeCount++;

                    lastSample = sample;
                }

                avgAmplitude /= samples.Length;

                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ—á–∏
                float dynamicRange = maxAmplitude / Math.Max(avgAmplitude, 0.001f);
                float changeRate = (float)changeCount / samples.Length;

                // –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ä–µ—á—å –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                float speechScore = 0.0f;

                if (dynamicRange >= MIN_DYNAMIC_RANGE && dynamicRange <= MAX_DYNAMIC_RANGE)
                    speechScore += 0.4f;

                if (changeRate >= MIN_CHANGE_RATE && changeRate <= MAX_CHANGE_RATE)
                    speechScore += 0.4f;

                if (avgAmplitude >= 0.01f && avgAmplitude <= 0.8f)
                    speechScore += 0.2f;

                return speechScore;
            }
            catch
            {
                return 0.5f; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }

        /// <summary>
        /// –£—Ä–æ–≤–µ–Ω—å 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        /// </summary>
        private static bool HasRealWords(string lowerText)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (—Ö–æ—Ç—è –±—ã 2 –±—É–∫–≤—ã –ø–æ–¥—Ä—è–¥)
            bool hasWords = Regex.IsMatch(lowerText, @"[a-z–∞-—è]{2,}");
            
            // –ò–õ–ò —Ä–∞–∑—Ä–µ—à–∞–µ–º —á–∏—Å–ª–∞ (–ª—é–±–æ–π –¥–ª–∏–Ω—ã)
            bool hasNumbers = lowerText.Any(char.IsDigit);

            return hasWords || hasNumbers;
        }

        /// <summary>
        /// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ –∞—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑–∞)
        /// </summary>
        public static bool IsValidSpeechQuick(string text)
        {
            return IsValidHumanSpeech(text, null);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        /// </summary>
        public static bool HasExtremeDuplication(string text, int minWords = 15, int minRepeats = 5)
        {
            if (string.IsNullOrWhiteSpace(text)) return false;

            var words = text.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (words.Length <= minWords) return false;

            var wordGroups = new Dictionary<string, int>();
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∏–≥—Ä–∞–º–º—ã (–≥—Ä—É–ø–ø—ã –∏–∑ 3 —Å–ª–æ–≤)
            for (int i = 0; i < words.Length - 2; i++)
            {
                string trigram = $"{words[i]} {words[i + 1]} {words[i + 2]}";
                if (wordGroups.ContainsKey(trigram))
                    wordGroups[trigram]++;
                else
                    wordGroups[trigram] = 1;
            }

            var mostRepeated = wordGroups.Where(kv => kv.Value >= minRepeats).FirstOrDefault();
            if (mostRepeated.Value >= minRepeats)
            {
                AudioAnalysisUtils.SafeDebugLog($"üö´ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–æ–≤—Ç–æ—Ä: '{mostRepeated.Key}' x{mostRepeated.Value}");
                return true;
            }

            return false;
        }

        /// <summary>
        /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        /// </summary>
        public static string GetFilterStatistics()
        {
            return $"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: " +
                   $"SpeechLikelihood‚â•{MIN_SPEECH_LIKELIHOOD}, " +
                   $"MinLength‚â•{MIN_TEXT_LENGTH}, " +
                   $"DynamicRange=[{MIN_DYNAMIC_RANGE}-{MAX_DYNAMIC_RANGE}], " +
                   $"ChangeRate=[{MIN_CHANGE_RATE}-{MAX_CHANGE_RATE}]";
        }

        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö
        /// </summary>
        public static string CleanEmotionalMarkers(string text)
        {
            if (string.IsNullOrWhiteSpace(text)) return text;

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —á—Ç–æ –≤ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö: *sigh*, *laugh*, *–ª—é–±–æ–π —Ç–µ–∫—Å—Ç*
            var cleanedText = System.Text.RegularExpressions.Regex.Replace(text, @"\*[^*]*\*", "");
            
            // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleanedText = System.Text.RegularExpressions.Regex.Replace(cleanedText, @"\s+", " ").Trim();

            if (cleanedText != text)
            {
                AudioAnalysisUtils.SafeDebugLog($"üßπ –û—á–∏—â–µ–Ω –æ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤: '{text}' ‚Üí '{cleanedText}'");
            }

            return cleanedText;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        /// </summary>
        public static bool IsOnlyEmotionalMarkers(string text)
        {
            if (string.IsNullOrWhiteSpace(text)) return false;

            var cleanedText = CleanEmotionalMarkers(text);
            return string.IsNullOrWhiteSpace(cleanedText);
        }
    }
}