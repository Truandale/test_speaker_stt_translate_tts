using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Windows.Forms;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π dashboard —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –≥–∞–ª–æ–∫
    /// –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
    /// </summary>
    public partial class DiagnosticsChecklistForm : Form
    {
        #region Diagnostic Items Definition

        private readonly List<DiagnosticItem> diagnosticItems = new()
        {
            // [1/6] Warm Whisper Instance
            new DiagnosticItem("whisper_static_fields", "ü§ñ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è Whisper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "Warm Whisper Instance"),
            new DiagnosticItem("whisper_quick_init", "ü§ñ –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ < 2 —Å–µ–∫ (warm start)", "Warm Whisper Instance"),
            new DiagnosticItem("whisper_processor_ready", "ü§ñ WhisperProcessor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "Warm Whisper Instance"),
            
            // [2/6] MediaFoundation
            new DiagnosticItem("mf_initialized", "üéµ MediaFoundation –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "MediaFoundation"),
            new DiagnosticItem("mf_formats_supported", "üéµ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚â•3 –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤", "MediaFoundation"), 
            new DiagnosticItem("mf_conversion_test", "üéµ –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø—Ä–æ–π–¥–µ–Ω", "MediaFoundation"),
            
            // [3/6] Bounded Channels
            new DiagnosticItem("channels_created", "üì° –í—Å–µ Bounded Channels —Å–æ–∑–¥–∞–Ω—ã", "Bounded Channels"),
            new DiagnosticItem("channels_policy", "üì° DropOldest –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", "Bounded Channels"),
            new DiagnosticItem("pipeline_active", "üì° –ü–∞–π–ø–ª–∞–π–Ω –∞–∫—Ç–∏–≤–µ–Ω", "Bounded Channels"),
            
            // [4/6] Enhanced Text Filtering
            new DiagnosticItem("text_filter_quality", "üîç –§–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (‚â•4/5 —Ç–µ—Å—Ç–æ–≤)", "Enhanced Text Filtering"),
            
            // [5/6] Device Notifications
            new DiagnosticItem("smart_manager_created", "üéß SmartAudioManager —Å–æ–∑–¥–∞–Ω", "Device Notifications"),
            new DiagnosticItem("devices_initialized", "üéß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "Device Notifications"),
            new DiagnosticItem("monitoring_active", "üéß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∞–∫—Ç–∏–≤–µ–Ω", "Device Notifications"),
            
            // [6/6] Audio Devices
            new DiagnosticItem("render_devices", "üîä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã", "Audio Devices"),
            new DiagnosticItem("capture_devices", "üé§ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã", "Audio Devices"),
            new DiagnosticItem("devices_populated", "üîä –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ UI", "Audio Devices"),
            new DiagnosticItem("wasapi_supported", "üîä WasapiLoopback –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", "Audio Devices"),
            new DiagnosticItem("wavein_supported", "üé§ WaveInEvent –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", "Audio Devices"),
            
            // Performance Diagnostics
            new DiagnosticItem("memory_usage_ok", "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ", "Performance"),
            new DiagnosticItem("capture_channel_active", "üì¶ Capture Channel –∞–∫—Ç–∏–≤–µ–Ω", "Performance"),
            new DiagnosticItem("mono16k_channel_active", "üì¶ Mono16k Channel –∞–∫—Ç–∏–≤–µ–Ω", "Performance"),
            new DiagnosticItem("stt_channel_active", "üì¶ STT Channel –∞–∫—Ç–∏–≤–µ–Ω", "Performance"),
            new DiagnosticItem("pipeline_cts_active", "üì¶ Pipeline CTS –∞–∫—Ç–∏–≤–µ–Ω", "Performance"),
            
            // Advanced Diagnostics
            new DiagnosticItem("whisper_cold_start", "ü§ñ Whisper cold start < 5 —Å–µ–∫", "Advanced"),
            new DiagnosticItem("whisper_warm_start", "ü§ñ Whisper warm start < 100 –º—Å", "Advanced"),
            new DiagnosticItem("memory_leak_test", "üß† –¢–µ—Å—Ç —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω", "Advanced"),
            new DiagnosticItem("thread_safety", "üîí –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞", "Advanced"),
            new DiagnosticItem("channels_throughput", "üì° –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤ OK", "Advanced"),
            new DiagnosticItem("device_monitoring_test", "üéß –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ OK", "Advanced"),
            
            // Text Filter Validation
            new DiagnosticItem("filter_validation_85", "üîç –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–∞ ‚â•85% (22 —Ç–µ—Å—Ç–∞)", "Text Filter"),
            new DiagnosticItem("multilingual_support", "üåê –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç", "Text Filter"),
            new DiagnosticItem("production_ready", "üèÜ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É", "Text Filter")
        };

        #endregion

        #region Private Fields

        private readonly Dictionary<string, CheckBox> checkBoxes = new();
        private readonly Dictionary<string, Button> resetButtons = new();
        private readonly Dictionary<string, GroupBox> categoryGroups = new();
        private Button btnResetAll = null!;
        private Button btnRunAllTests = null!;
        private Label lblOverallStatus = null!;
        private ProgressBar progressOverall = null!;
        private Panel mainPanel = null!;
        
        private const string SettingsFileName = "DiagnosticsChecklist.json";
        private string SettingsFilePath => Path.Combine(Application.StartupPath, SettingsFileName);
        
        // Performance optimization fields for JSON persistence
        private volatile bool _settingsDirty = false;
        private System.Windows.Forms.Timer _saveTimer;
        private DateTime _lastSaveTime = DateTime.MinValue;
        private const int SAVE_THROTTLE_MS = 500; // Coalesce saves for 500ms
        
        // –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        private Form1 parentForm;

        #endregion

        #region Constructor & Initialization

        public DiagnosticsChecklistForm(Form1 parent)
        {
            parentForm = parent;
            
            // Initialize performance-optimized save timer
            _saveTimer = new System.Windows.Forms.Timer();
            _saveTimer.Interval = SAVE_THROTTLE_MS;
            _saveTimer.Tick += (s, e) => PerformOptimizedSave();
            
            InitializeComponent();
            CreateDiagnosticControls();
            LoadSettings();
            UpdateOverallStatus();
        }

        private void InitializeComponent()
        {
            this.Text = "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π Dashboard";
            this.Size = new Size(850, 700);
            this.MinimumSize = new Size(800, 600);
            this.StartPosition = FormStartPosition.CenterScreen;
            this.TopMost = true; // –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            this.ShowInTaskbar = false; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á
            this.FormBorderStyle = FormBorderStyle.Sizable;
            
            // –ò–∫–æ–Ω–∫–∞ –∏ —Å—Ç–∏–ª—å
            this.BackColor = Color.FromArgb(45, 45, 48);
            this.ForeColor = Color.White;
            
            // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            mainPanel = new Panel
            {
                Dock = DockStyle.Fill,
                AutoScroll = true,
                BackColor = Color.FromArgb(45, 45, 48)
            };
            this.Controls.Add(mainPanel);
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var titleLabel = new Label
            {
                Text = "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô DASHBOARD",
                Font = new Font("Segoe UI", 14, FontStyle.Bold),
                ForeColor = Color.FromArgb(0, 122, 204),
                AutoSize = true,
                Location = new Point(20, 20)
            };
            mainPanel.Controls.Add(titleLabel);
            
            // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            lblOverallStatus = new Label
            {
                Text = "üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                ForeColor = Color.White,
                AutoSize = true,
                Location = new Point(20, 60)
            };
            mainPanel.Controls.Add(lblOverallStatus);
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            progressOverall = new ProgressBar
            {
                Location = new Point(20, 85),
                Size = new Size(760, 25),
                Style = ProgressBarStyle.Continuous,
                ForeColor = Color.FromArgb(0, 122, 204)
            };
            mainPanel.Controls.Add(progressOverall);
            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            btnRunAllTests = new Button
            {
                Text = "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã",
                Location = new Point(20, 125),
                Size = new Size(180, 35),
                BackColor = Color.FromArgb(0, 122, 204),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };
            btnRunAllTests.Click += BtnRunAllTests_Click;
            mainPanel.Controls.Add(btnRunAllTests);
            
            btnResetAll = new Button
            {
                Text = "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ",
                Location = new Point(220, 125),
                Size = new Size(140, 35),
                BackColor = Color.FromArgb(178, 34, 34),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };
            btnResetAll.Click += BtnResetAll_Click;
            mainPanel.Controls.Add(btnResetAll);
            
            // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            var instructionLabel = new Label
            {
                Text = "üí° –ì–∞–ª–∫–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤. " +
                       "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.",
                Location = new Point(380, 125),
                Size = new Size(400, 50),
                ForeColor = Color.LightGray,
                Font = new Font("Segoe UI", 8),
                TextAlign = ContentAlignment.MiddleLeft
            };
            mainPanel.Controls.Add(instructionLabel);
        }

        private void CreateDiagnosticControls()
        {
            int yOffset = 190;
            var categories = diagnosticItems.GroupBy(x => x.Category).ToList();
            
            foreach (var category in categories)
            {
                // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                var groupBox = new GroupBox
                {
                    Text = $"üìã {category.Key}",
                    Location = new Point(20, yOffset),
                    Size = new Size(760, category.Count() * 35 + 50),
                    ForeColor = Color.FromArgb(0, 200, 83),
                    Font = new Font("Segoe UI", 10, FontStyle.Bold),
                    BackColor = Color.FromArgb(55, 55, 58)
                };
                
                categoryGroups[category.Key] = groupBox;
                mainPanel.Controls.Add(groupBox);
                
                int itemYOffset = 25;
                foreach (var item in category)
                {
                    // CheckBox –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞
                    var checkBox = new CheckBox
                    {
                        Text = item.DisplayName,
                        Location = new Point(15, itemYOffset),
                        Size = new Size(500, 25),
                        ForeColor = Color.White,
                        Font = new Font("Segoe UI", 9),
                        Enabled = false // –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    };
                    checkBox.CheckedChanged += (s, e) => SaveSettings();
                    
                    checkBoxes[item.Id] = checkBox;
                    groupBox.Controls.Add(checkBox);
                    
                    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
                    var resetButton = new Button
                    {
                        Text = "üîÑ",
                        Location = new Point(520, itemYOffset),
                        Size = new Size(30, 25),
                        BackColor = Color.FromArgb(255, 140, 0),
                        ForeColor = Color.White,
                        FlatStyle = FlatStyle.Flat,
                        Font = new Font("Segoe UI", 8)
                    };
                    
                    var resetTooltip = new ToolTip();
                    resetTooltip.SetToolTip(resetButton, $"–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: {item.DisplayName}");
                    
                    string itemId = item.Id; // Capture for closure
                    resetButton.Click += (s, e) => ResetSingleItem(itemId);
                    
                    resetButtons[item.Id] = resetButton;
                    groupBox.Controls.Add(resetButton);
                    
                    // –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    var statusLabel = new Label
                    {
                        Text = "‚è≥",
                        Location = new Point(560, itemYOffset),
                        Size = new Size(30, 25),
                        TextAlign = ContentAlignment.MiddleCenter,
                        Font = new Font("Segoe UI", 12)
                    };
                    groupBox.Controls.Add(statusLabel);
                    
                    itemYOffset += 35;
                }
                
                yOffset += groupBox.Height + 15;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            mainPanel.AutoScrollMinSize = new Size(0, yOffset + 50);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        /// </summary>
        public void UpdateDiagnosticItem(string itemId, bool passed)
        {
            if (checkBoxes.TryGetValue(itemId, out var checkBox))
            {
                if (this.InvokeRequired)
                {
                    this.Invoke(new Action(() => UpdateDiagnosticItem(itemId, passed)));
                    return;
                }
                
                checkBox.Checked = passed;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                var statusLabel = checkBox.Parent.Controls.OfType<Label>()
                    .FirstOrDefault(l => l.Location.X == 560 && 
                                        Math.Abs(l.Location.Y - checkBox.Location.Y) < 5);
                
                if (statusLabel != null)
                {
                    statusLabel.Text = passed ? "‚úÖ" : "‚ùå";
                    statusLabel.ForeColor = passed ? Color.FromArgb(0, 200, 83) : Color.FromArgb(231, 76, 60);
                }
                
                UpdateOverallStatus();
                SaveSettings();
            }
        }

        /// <summary>
        /// –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        /// </summary>
        public void UpdateDiagnosticResults(Dictionary<string, bool> results)
        {
            foreach (var kvp in results)
            {
                UpdateDiagnosticItem(kvp.Key, kvp.Value);
            }
        }

        /// <summary>
        /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        /// </summary>
        public void ResetAllChecks()
        {
            foreach (var checkBox in checkBoxes.Values)
            {
                checkBox.Checked = false;
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
            foreach (var group in categoryGroups.Values)
            {
                foreach (var statusLabel in group.Controls.OfType<Label>().Where(l => l.Location.X == 560))
                {
                    statusLabel.Text = "‚è≥";
                    statusLabel.ForeColor = Color.Gray;
                }
            }
            
            UpdateOverallStatus();
            SaveSettings();
        }

        #endregion

        #region Event Handlers

        private async void BtnRunAllTests_Click(object sender, EventArgs e)
        {
            btnRunAllTests.Enabled = false;
            btnRunAllTests.Text = "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...";
            
            try
            {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Ñ–æ—Ä–º–µ
                await Task.Run(() =>
                {
                    parentForm.RunFullSelfDiagnostics();
                    parentForm.RunPerformanceDiagnostics();
                    parentForm.RunAdvancedDiagnostics();
                    parentForm.RunTextFilterValidation();
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", 
                               MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                btnRunAllTests.Enabled = true;
                btnRunAllTests.Text = "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã";
            }
        }

        private void BtnResetAll_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show(
                "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏?\n\n–í—Å–µ –≥–∞–ª–∫–∏ –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);
                
            if (result == DialogResult.Yes)
            {
                ResetAllChecks();
            }
        }

        private void ResetSingleItem(string itemId)
        {
            if (checkBoxes.TryGetValue(itemId, out var checkBox))
            {
                var item = diagnosticItems.FirstOrDefault(x => x.Id == itemId);
                var result = MessageBox.Show(
                    $"–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É:\n{item?.DisplayName}",
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question);
                    
                if (result == DialogResult.Yes)
                {
                    UpdateDiagnosticItem(itemId, false);
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ"
                    var statusLabel = checkBox.Parent.Controls.OfType<Label>()
                        .FirstOrDefault(l => l.Location.X == 560 && 
                                            Math.Abs(l.Location.Y - checkBox.Location.Y) < 5);
                    
                    if (statusLabel != null)
                    {
                        statusLabel.Text = "‚è≥";
                        statusLabel.ForeColor = Color.Gray;
                    }
                }
            }
        }

        #endregion

        #region Status Management

        private void UpdateOverallStatus()
        {
            int totalItems = checkBoxes.Count;
            int passedItems = checkBoxes.Values.Count(cb => cb.Checked);
            
            float percentage = totalItems > 0 ? (float)passedItems / totalItems * 100 : 0;
            
            progressOverall.Maximum = totalItems;
            progressOverall.Value = passedItems;
            
            string status = percentage switch
            {
                100 => "üèÜ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
                >= 85 => $"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ({percentage:F0}%)",
                >= 70 => $"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è ({percentage:F0}%)",
                >= 50 => $"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã ({percentage:F0}%)",
                _ => $"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ({percentage:F0}%)"
            };
            
            lblOverallStatus.Text = $"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {status} [{passedItems}/{totalItems}]";
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            lblOverallStatus.ForeColor = percentage switch
            {
                100 => Color.FromArgb(0, 255, 0),
                >= 85 => Color.FromArgb(0, 200, 83),
                >= 70 => Color.FromArgb(255, 193, 7),
                >= 50 => Color.FromArgb(255, 140, 0),
                _ => Color.FromArgb(231, 76, 60)
            };
        }

        #endregion

        #region Settings Persistence (PERFORMANCE OPTIMIZED)

        /// <summary>
        /// Marks settings as dirty and schedules atomic save with throttling
        /// </summary>
        private void SaveSettings()
        {
            _settingsDirty = true;
            
            // Reset timer to coalesce multiple rapid changes
            _saveTimer.Stop();
            _saveTimer.Start();
        }
        
        /// <summary>
        /// Performs atomic JSON write with error handling and throttling
        /// </summary>
        private void PerformOptimizedSave()
        {
            _saveTimer.Stop();
            
            if (!_settingsDirty) return;
            
            try
            {
                // Check throttling to prevent excessive disk I/O
                var timeSinceLastSave = DateTime.Now - _lastSaveTime;
                if (timeSinceLastSave.TotalMilliseconds < SAVE_THROTTLE_MS / 2)
                {
                    // Schedule retry
                    _saveTimer.Start();
                    return;
                }
                
                var settings = new Dictionary<string, bool>();
                foreach (var kvp in checkBoxes)
                {
                    settings[kvp.Key] = kvp.Value.Checked;
                }
                
                var json = JsonSerializer.Serialize(settings, new JsonSerializerOptions { WriteIndented = true });
                
                // Atomic write using temporary file
                var tempPath = SettingsFilePath + ".tmp";
                File.WriteAllText(tempPath, json);
                
                // Atomic replace (Windows guarantees this is atomic)
                if (File.Exists(SettingsFilePath))
                {
                    File.Delete(SettingsFilePath);
                }
                File.Move(tempPath, SettingsFilePath);
                
                _settingsDirty = false;
                _lastSaveTime = DateTime.Now;
                
                System.Diagnostics.Debug.WriteLine($"üìÅ Optimized diagnostics save completed: {settings.Count} items");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Optimized save error: {ex.Message}");
                
                // Schedule retry on failure
                if (_settingsDirty)
                {
                    Task.Delay(1000).ContinueWith(_ => 
                    {
                        if (_settingsDirty && !IsDisposed)
                        {
                            try
                            {
                                BeginInvoke(new Action(() => _saveTimer.Start()));
                            }
                            catch { /* Form disposed */ }
                        }
                    });
                }
            }
        }

        private void LoadSettings()
        {
            try
            {
                if (File.Exists(SettingsFilePath))
                {
                    var json = File.ReadAllText(SettingsFilePath);
                    var settings = JsonSerializer.Deserialize<Dictionary<string, bool>>(json);
                    
                    if (settings != null)
                    {
                        foreach (var kvp in settings)
                        {
                            if (checkBoxes.TryGetValue(kvp.Key, out var checkBox))
                            {
                                checkBox.Checked = kvp.Value;
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                                var statusLabel = checkBox.Parent.Controls.OfType<Label>()
                                    .FirstOrDefault(l => l.Location.X == 560 && 
                                                        Math.Abs(l.Location.Y - checkBox.Location.Y) < 5);
                                
                                if (statusLabel != null)
                                {
                                    statusLabel.Text = kvp.Value ? "‚úÖ" : "‚è≥";
                                    statusLabel.ForeColor = kvp.Value ? Color.FromArgb(0, 200, 83) : Color.Gray;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {ex.Message}");
            }
        }

        #endregion

        #region Form Management

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            // Force final save if dirty before hiding/closing
            if (_settingsDirty)
            {
                _saveTimer.Stop();
                PerformOptimizedSave();
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
            if (e.CloseReason == CloseReason.UserClosing)
            {
                e.Cancel = true;
                this.Hide();
            }
            else
            {
                // Actual close - cleanup timer
                _saveTimer?.Stop();
                _saveTimer?.Dispose();
            }
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            // ESC –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
            if (keyData == Keys.Escape)
            {
                this.Hide();
                return true;
            }
            
            // F5 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
            if (keyData == Keys.F5)
            {
                BtnRunAllTests_Click(this, EventArgs.Empty);
                return true;
            }
            
            return base.ProcessCmdKey(ref msg, keyData);
        }

        #endregion
    }

    #region Helper Classes

    /// <summary>
    /// –≠–ª–µ–º–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
    /// </summary>
    public class DiagnosticItem
    {
        public string Id { get; set; }
        public string DisplayName { get; set; }
        public string Category { get; set; }

        public DiagnosticItem(string id, string displayName, string category)
        {
            Id = id;
            DisplayName = displayName;
            Category = category;
        }
    }

    #endregion
}