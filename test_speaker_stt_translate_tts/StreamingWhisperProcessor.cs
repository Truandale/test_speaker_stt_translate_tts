using System.Collections.Concurrent;
using System.Diagnostics;
using NAudio.Wave;
using Whisper.net;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å Whisper.NET
    /// –†–µ–∞–ª–∏–∑—É–µ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    /// </summary>
    public class StreamingWhisperProcessor : IDisposable, IAsyncDisposable
    {
        #region Configuration Constants
        
        private const int TARGET_SAMPLE_RATE = 16000;    // Whisper —Ç—Ä–µ–±—É–µ—Ç 16kHz
        private const int WINDOW_DURATION_SEC = 6;       // –î–ª–∏–Ω–∞ –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (6 —Å–µ–∫—É–Ω–¥)
        private const int STEP_DURATION_SEC = 1;         // –®–∞–≥ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
        private const float OVERLAP_SEC = 0.5f;          // –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (0.5 —Å–µ–∫)
        private const int MIN_AUDIO_LENGTH_SEC = 2;      // –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
        private const float VAD_THRESHOLD = 0.01f;       // –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞
        
        #endregion

        #region Private Fields
        
        private readonly int windowSamples;
        private readonly int stepSamples;
        private readonly int minAudioSamples;
        private readonly float[] ringBuffer;
        private int ringBufferPosition = 0;
        private int totalSamplesInBuffer = 0;
        
        private WhisperFactory? whisperFactory;
        private WhisperProcessor? whisperProcessor;
        private readonly CancellationTokenSource cancellationTokenSource = new();
        
        private readonly ConcurrentQueue<float[]> processingQueue = new();
        private readonly SemaphoreSlim processingSemaphore = new(1, 1);
        private Task? processingTask;
        
        private string lastRecognizedText = "";
        private readonly object textLock = new();
        
        private bool isDisposed = false;
        
        #endregion

        #region Events
        
        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        /// </summary>
        public event Action<string, double>? OnTextRecognized;
        
        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        public event Action<Exception>? OnError;
        
        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        public event Action<StreamingStats>? OnStats;
        
        #endregion

        #region Constructor & Initialization
        
        public StreamingWhisperProcessor()
        {
            windowSamples = WINDOW_DURATION_SEC * TARGET_SAMPLE_RATE;
            stepSamples = STEP_DURATION_SEC * TARGET_SAMPLE_RATE;
            minAudioSamples = MIN_AUDIO_LENGTH_SEC * TARGET_SAMPLE_RATE;
            
            ringBuffer = new float[windowSamples * 2]; // –ë—É—Ñ–µ—Ä —Å –∑–∞–ø–∞—Å–æ–º
            
            Debug.WriteLine($"üîß StreamingWhisperProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:");
            Debug.WriteLine($"   –û–∫–Ω–æ: {WINDOW_DURATION_SEC}—Å ({windowSamples} —Å–µ–º–ø–ª–æ–≤)");
            Debug.WriteLine($"   –®–∞–≥: {STEP_DURATION_SEC}—Å ({stepSamples} —Å–µ–º–ø–ª–æ–≤)");
            Debug.WriteLine($"   –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {OVERLAP_SEC}—Å");
            Debug.WriteLine($"   –ú–∏–Ω–∏–º—É–º: {MIN_AUDIO_LENGTH_SEC}—Å ({minAudioSamples} —Å–µ–º–ø–ª–æ–≤)");
        }
        
        public async Task<bool> InitializeAsync(string modelPath)
        {
            try
            {
                if (!File.Exists(modelPath))
                {
                    Debug.WriteLine($"‚ùå –ú–æ–¥–µ–ª—å Whisper –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {modelPath}");
                    return false;
                }

                Debug.WriteLine($"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper: {modelPath}");
                whisperFactory = WhisperFactory.FromPath(modelPath);
                
                whisperProcessor = whisperFactory.CreateBuilder()
                    .WithLanguage("auto")           // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
                    .Build();

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                processingTask = Task.Run(ProcessingLoop, cancellationTokenSource.Token);
                
                var modelInfo = new FileInfo(modelPath);
                Debug.WriteLine($"‚úÖ Whisper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {modelInfo.Length / 1024 / 1024:F1} MB");
                
                return true;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Whisper: {ex.Message}");
                OnError?.Invoke(ex);
                return false;
            }
        }
        
        #endregion

        #region Audio Processing
        
        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∞—É–¥–∏–æ —Å–µ–º–ø–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        public void AddAudioSamples(float[] samples)
        {
            if (isDisposed || samples == null || samples.Length == 0 || cancellationTokenSource.Token.IsCancellationRequested)
                return;

            lock (ringBuffer)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if (isDisposed || cancellationTokenSource.Token.IsCancellationRequested)
                    return;

                // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º–ø–ª—ã –≤ –∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä
                for (int i = 0; i < samples.Length; i++)
                {
                    ringBuffer[ringBufferPosition] = samples[i];
                    ringBufferPosition = (ringBufferPosition + 1) % ringBuffer.Length;
                    
                    if (totalSamplesInBuffer < ringBuffer.Length)
                        totalSamplesInBuffer++;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
                if (totalSamplesInBuffer >= windowSamples)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞
                    if (HasVoiceActivity(samples))
                    {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        var windowData = ExtractWindow();
                        if (windowData != null && !cancellationTokenSource.Token.IsCancellationRequested)
                        {
                            processingQueue.Enqueue(windowData);
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–µ–º–ø–ª–∞—Ö
        /// </summary>
        private bool HasVoiceActivity(float[] samples)
        {
            if (samples.Length == 0) return false;
            
            // –ü—Ä–æ—Å—Ç–æ–π VAD –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–Ω–µ—Ä–≥–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
            float energy = 0;
            for (int i = 0; i < samples.Length; i++)
            {
                energy += samples[i] * samples[i];
            }
            
            float rmsLevel = (float)Math.Sqrt(energy / samples.Length);
            return rmsLevel > VAD_THRESHOLD;
        }
        
        /// <summary>
        /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª—å—Ü–µ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞
        /// </summary>
        private float[]? ExtractWindow()
        {
            if (totalSamplesInBuffer < minAudioSamples)
                return null;

            var window = new float[windowSamples];
            int startPos = (ringBufferPosition - windowSamples + ringBuffer.Length) % ringBuffer.Length;
            
            for (int i = 0; i < windowSamples; i++)
            {
                window[i] = ringBuffer[(startPos + i) % ringBuffer.Length];
            }
            
            return window;
        }
        
        #endregion

        #region Processing Loop
        
        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        /// </summary>
        private async Task ProcessingLoop()
        {
            Debug.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Whisper");
            
            var stats = new StreamingStats();
            
            while (!cancellationTokenSource.Token.IsCancellationRequested && !isDisposed)
            {
                try
                {
                    if (processingQueue.TryDequeue(out var audioData))
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                        if (cancellationTokenSource.Token.IsCancellationRequested || isDisposed)
                            break;

                        var stopwatch = Stopwatch.StartNew();
                        
                        await processingSemaphore.WaitAsync(cancellationTokenSource.Token);
                        try
                        {
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–º–∞—Ñ–æ—Ä–∞
                            if (cancellationTokenSource.Token.IsCancellationRequested || isDisposed)
                                break;

                            var text = await ProcessAudioWindow(audioData);
                            if (!string.IsNullOrWhiteSpace(text) && !isDisposed)
                            {
                                var confidence = CalculateConfidence(text);
                                
                                lock (textLock)
                                {
                                    if (!isDisposed)
                                    {
                                        var newText = ExtractNewText(text);
                                        if (!string.IsNullOrWhiteSpace(newText))
                                        {
                                            OnTextRecognized?.Invoke(newText, confidence);
                                            lastRecognizedText = text;
                                        }
                                    }
                                }
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                if (!isDisposed)
                                {
                                    stats.ProcessedWindows++;
                                    stats.TotalRecognizedText += text.Length;
                                    stats.AverageProcessingTime = 
                                        (stats.AverageProcessingTime * (stats.ProcessedWindows - 1) + stopwatch.ElapsedMilliseconds) 
                                        / stats.ProcessedWindows;
                                    
                                    OnStats?.Invoke(stats);
                                }
                            }
                        }
                        finally
                        {
                            try
                            {
                                processingSemaphore.Release();
                            }
                            catch (ObjectDisposedException)
                            {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —Å–µ–º–∞—Ñ–æ—Ä —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
                            }
                        }
                        
                        stopwatch.Stop();
                        Debug.WriteLine($"‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–Ω–∞: {stopwatch.ElapsedMilliseconds}–º—Å");
                    }
                    else
                    {
                        await Task.Delay(50, cancellationTokenSource.Token);
                    }
                }
                catch (OperationCanceledException)
                {
                    Debug.WriteLine("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
                    break;
                }
                catch (ObjectDisposedException)
                {
                    Debug.WriteLine("üîÑ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É");
                    break;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex.Message}");
                    OnError?.Invoke(ex);
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try
                    {
                        await Task.Delay(1000, cancellationTokenSource.Token);
                    }
                    catch (OperationCanceledException)
                    {
                        break;
                    }
                }
            }
            
            Debug.WriteLine("üõë –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ Whisper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
        
        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –æ–∫–Ω–æ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper
        /// </summary>
        private async Task<string> ProcessAudioWindow(float[] audioData)
        {
            if (whisperProcessor == null || audioData.Length < minAudioSamples)
                return "";

            try
            {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ WAV –≤ –ø–∞–º—è—Ç–∏
                byte[] wavData;
                var waveFormat = new WaveFormat(TARGET_SAMPLE_RATE, 16, 1); // 16kHz, 16-bit, mono
                
                using (var memoryStream = new MemoryStream())
                {
                    using (var writer = new WaveFileWriter(memoryStream, waveFormat))
                    {
                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float [-1..1] –≤ PCM16
                        for (int i = 0; i < audioData.Length; i++)
                        {
                            var sample = (short)(Math.Clamp(audioData[i], -1f, 1f) * short.MaxValue);
                            writer.WriteSample(sample);
                        }
                    }
                    wavData = memoryStream.ToArray();
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è Whisper —Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                using var whisperStream = new MemoryStream(wavData);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper
                var resultText = "";
                await foreach (var result in whisperProcessor.ProcessAsync(whisperStream, cancellationTokenSource.Token))
                {
                    if (!string.IsNullOrWhiteSpace(result.Text))
                    {
                        resultText += result.Text;
                    }
                }

                var finalText = resultText.Trim();
                
                // üöÄ –ù–û–í–´–ô: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –∞—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑–æ–º
                if (!string.IsNullOrWhiteSpace(finalText))
                {
                    bool isValid = AdvancedSpeechFilter.IsValidHumanSpeech(finalText, audioData);
                    if (!isValid)
                    {
                        Debug.WriteLine($"üö´ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª: '{finalText}'");
                        return "";
                    }
                }
                
                return finalText;
            }
            catch (ObjectDisposedException)
            {
                Debug.WriteLine("‚ö†Ô∏è Whisper –ø–æ—Ç–æ–∫ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
                return "";
            }
            catch (OperationCanceledException)
            {
                Debug.WriteLine("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ Whisper –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
                return "";
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –≤ Whisper: {ex.Message}");
                return "";
            }
        }
        
        /// <summary>
        /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        /// </summary>
        private string ExtractNewText(string currentText)
        {
            if (string.IsNullOrWhiteSpace(lastRecognizedText))
                return currentText;
            
            // –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            var commonLength = FindCommonSuffixLength(lastRecognizedText, currentText);
            if (commonLength > 0 && commonLength < currentText.Length)
            {
                return currentText.Substring(commonLength);
            }
            
            return currentText;
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É –æ–±—â–µ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫
        /// </summary>
        private int FindCommonSuffixLength(string a, string b)
        {
            int i = a.Length - 1;
            int j = b.Length - 1;
            int common = 0;
            
            while (i >= 0 && j >= 0 && a[i] == b[j])
            {
                i--;
                j--;
                common++;
            }
            
            return Math.Max(0, a.Length - common);
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è Whisper
        /// </summary>
        private string GetContextPrompt()
        {
            lock (textLock)
            {
                if (string.IsNullOrWhiteSpace(lastRecognizedText))
                    return "";
                
                // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                var contextLength = Math.Min(100, lastRecognizedText.Length);
                return lastRecognizedText.Substring(lastRecognizedText.Length - contextLength);
            }
        }
        
        /// <summary>
        /// –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
        /// </summary>
        private double CalculateConfidence(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return 0.0;
            
            // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            var wordCount = text.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
            var uniqueWords = text.Split(' ', StringSplitOptions.RemoveEmptyEntries).Distinct().Count();
            
            if (wordCount == 0) return 0.0;
            
            var uniqueRatio = (double)uniqueWords / wordCount;
            var lengthFactor = Math.Min(1.0, wordCount / 10.0); // –î–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω—ã
            
            return Math.Min(0.95, uniqueRatio * lengthFactor + 0.3);
        }
        
        #endregion

        #region Public Methods
        
        /// <summary>
        /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        /// </summary>
        public void Reset()
        {
            lock (textLock)
            {
                lastRecognizedText = "";
            }
            
            lock (ringBuffer)
            {
                Array.Clear(ringBuffer, 0, ringBuffer.Length);
                ringBufferPosition = 0;
                totalSamplesInBuffer = 0;
            }
            
            // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            while (processingQueue.TryDequeue(out _)) { }
            
            Debug.WriteLine("üîÑ StreamingWhisperProcessor —Å–±—Ä–æ—à–µ–Ω");
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        /// </summary>
        public StreamingStats GetStats()
        {
            return new StreamingStats
            {
                QueueSize = processingQueue.Count,
                BufferFillLevel = (double)totalSamplesInBuffer / ringBuffer.Length,
                IsProcessing = processingSemaphore.CurrentCount == 0
            };
        }
        
        #endregion

        #region IDisposable
        
        public void Dispose()
        {
            if (isDisposed) return;
            
            Debug.WriteLine("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ StreamingWhisperProcessor...");
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ—Å—Ä–æ—á–Ω–æ
            isDisposed = true;
            
            // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            try
            {
                cancellationTokenSource.Cancel();
            }
            catch (ObjectDisposedException)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try
            {
                processingTask?.Wait(TimeSpan.FromSeconds(3));
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex.Message}");
            }
            
            // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            while (processingQueue.TryDequeue(out _)) { }
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã Whisper –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            try
            {
                if (whisperProcessor != null)
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DisposeAsync –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if (whisperProcessor is IAsyncDisposable asyncDisposable)
                    {
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                        _ = Task.Run(async () =>
                        {
                            try
                            {
                                await asyncDisposable.DisposeAsync();
                                Debug.WriteLine("‚úÖ WhisperProcessor –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ");
                            }
                            catch (Exception ex)
                            {
                                Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ WhisperProcessor: {ex.Message}");
                            }
                        });
                    }
                    else
                    {
                        whisperProcessor.Dispose();
                    }
                    whisperProcessor = null;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ WhisperProcessor: {ex.Message}");
            }
            
            try
            {
                whisperFactory?.Dispose();
                whisperFactory = null;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ WhisperFactory: {ex.Message}");
            }
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            try
            {
                cancellationTokenSource.Dispose();
            }
            catch (ObjectDisposedException)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
            }
            
            try
            {
                processingSemaphore.Dispose();
            }
            catch (ObjectDisposedException)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
            }
            
            Debug.WriteLine("‚úÖ StreamingWhisperProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        #endregion

        #region IAsyncDisposable

        public async ValueTask DisposeAsync()
        {
            if (isDisposed) return;
            
            Debug.WriteLine("üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ StreamingWhisperProcessor...");
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ—Å—Ä–æ—á–Ω–æ
            isDisposed = true;
            
            // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            try
            {
                cancellationTokenSource.Cancel();
            }
            catch (ObjectDisposedException)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try
            {
                if (processingTask != null)
                {
                    await processingTask.WaitAsync(TimeSpan.FromSeconds(3));
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex.Message}");
            }
            
            // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            while (processingQueue.TryDequeue(out _)) { }
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã Whisper –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            try
            {
                if (whisperProcessor != null)
                {
                    if (whisperProcessor is IAsyncDisposable asyncDisposable)
                    {
                        await asyncDisposable.DisposeAsync();
                    }
                    else
                    {
                        whisperProcessor.Dispose();
                    }
                    whisperProcessor = null;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ WhisperProcessor: {ex.Message}");
            }
            
            try
            {
                whisperFactory?.Dispose();
                whisperFactory = null;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ WhisperFactory: {ex.Message}");
            }
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            try
            {
                cancellationTokenSource.Dispose();
            }
            catch (ObjectDisposedException)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
            }
            
            try
            {
                processingSemaphore.Dispose();
            }
            catch (ObjectDisposedException)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
            }
            
            Debug.WriteLine("‚úÖ StreamingWhisperProcessor –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        #endregion
    }
    
    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    /// </summary>
    public class StreamingStats
    {
        public int ProcessedWindows { get; set; }
        public int QueueSize { get; set; }
        public double BufferFillLevel { get; set; }
        public bool IsProcessing { get; set; }
        public double AverageProcessingTime { get; set; }
        public int TotalRecognizedText { get; set; }
    }
}