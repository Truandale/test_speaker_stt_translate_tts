using NAudio.Wave;
using System.Diagnostics;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–ª—è STT, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ MORT
    /// </summary>
    public class EnhancedAudioProcessor : IDisposable
    {
        private readonly List<byte> audioBuffer = new();
        private bool isCollectingAudio = false;
        private DateTime lastVoiceActivity = DateTime.Now;
        private DateTime audioCollectionStartTime = DateTime.Now;
        private bool isTTSPlaying = false; // –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ STT –≤–æ –≤—Ä–µ–º—è TTS
        private int debugCounter = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ MORT
        private float voiceThreshold = 0.05f;
        private int silenceDurationMs = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
        private int maxRecordingMs = 8000; // –ú–∞–∫—Å–∏–º—É–º 8 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∏
        private int maxBufferSize = 500000; // –ú–∞–∫—Å–∏–º—É–º 500KB
        
        // –°–æ–±—ã—Ç–∏—è
        public event Func<byte[], Task<string>>? AudioReadyForSTT; // –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        public event Action<string>? StatusUpdated; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        
        public float VoiceThreshold 
        { 
            get => voiceThreshold; 
            set => voiceThreshold = Math.Max(0.001f, Math.Min(1.0f, value)); 
        }
        
        public int SilenceDurationMs 
        { 
            get => silenceDurationMs; 
            set => silenceDurationMs = Math.Max(100, Math.Min(5000, value)); 
        }
        
        public bool IsTTSPlaying 
        { 
            get => isTTSPlaying; 
            set => isTTSPlaying = value; 
        }
        
        public bool IsCollectingAudio => isCollectingAudio;

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ MORT ProcessAudioForSTT)
        /// </summary>
        public async Task ProcessAudioForSTT(byte[] buffer, int bytesRecorded, float audioLevel)
        {
            try
            {
                // üîá –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ STT –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è TTS (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è)
                if (isTTSPlaying)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ñ–ª–∞–≥ TTS –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥
                    if (DateTime.Now - lastVoiceActivity > TimeSpan.FromSeconds(30))
                    {
                        AudioAnalysisUtils.SafeDebugLog("‚ö†Ô∏è TTS —Ñ–ª–∞–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º");
                        isTTSPlaying = false;
                    }
                    else
                    {
                        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º—è TTS
                    }
                }

                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 50 –≤—ã–∑–æ–≤–æ–≤
                debugCounter++;
                if (debugCounter % 20 == 0)
                {
                    AudioAnalysisUtils.SafeDebugLog($"üîä ProcessAudioForSTT: —É—Ä–æ–≤–µ–Ω—å={audioLevel:F4}, –ø–æ—Ä–æ–≥={voiceThreshold:F4}, —Å–æ–±–∏—Ä–∞–µ–º={isCollectingAudio}");

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if (!isCollectingAudio)
                    {
                        StatusUpdated?.Invoke($"üîá –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—á–∏... (—É—Ä–æ–≤–µ–Ω—å: {audioLevel:F3}, –ø–æ—Ä–æ–≥: {voiceThreshold:F3})");
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
                bool isVoiceDetected = audioLevel > voiceThreshold;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Ä–µ—á–∏ (—á–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
                float speechLikelihood = 1.0f;
                if (isVoiceDetected && bytesRecorded >= 8)
                {
                    speechLikelihood = AudioAnalysisUtils.AnalyzeSpeechCharacteristics(buffer, bytesRecorded);
                    if (speechLikelihood < 0.3f)
                    {
                        isVoiceDetected = false; // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ-—Ä–µ—á—å
                        AudioAnalysisUtils.SafeDebugLog($"üö´ –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–∫ –Ω–µ-—Ä–µ—á—å: —É—Ä–æ–≤–µ–Ω—å={audioLevel:F4}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å={speechLikelihood:F3}");
                    }
                }

                if (isVoiceDetected)
                {
                    // –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                    if (!isCollectingAudio)
                    {
                        isCollectingAudio = true;
                        audioBuffer.Clear();
                        audioCollectionStartTime = DateTime.Now;
                        AudioAnalysisUtils.SafeDebugLog($"üé§ –ù–∞—á–∞—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏... –£—Ä–æ–≤–µ–Ω—å: {audioLevel:F4}");
                        StatusUpdated?.Invoke($"üé§ –°–ª—É—à–∞—é... (—É—Ä–æ–≤–µ–Ω—å: {audioLevel:F3})");
                    }
                    else
                    {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                        if (debugCounter % 10 == 0)
                        {
                            StatusUpdated?.Invoke($"üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é... (—É—Ä–æ–≤–µ–Ω—å: {audioLevel:F3}, –±—É—Ñ–µ—Ä: {audioBuffer.Count} –±–∞–π—Ç)");
                        }
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
                    byte[] audioData = new byte[bytesRecorded];
                    Array.Copy(buffer, audioData, bytesRecorded);
                    audioBuffer.AddRange(audioData);

                    lastVoiceActivity = DateTime.Now;
                }
                else if (isCollectingAudio)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ –±–µ–∑ –≥–æ–ª–æ—Å–∞ –ò–õ–ò –±—É—Ñ–µ—Ä —Å—Ç–∞–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º
                    var silenceDuration = DateTime.Now - lastVoiceActivity;
                    var totalCollectionTime = DateTime.Now - audioCollectionStartTime;
                    
                    bool shouldProcess = silenceDuration.TotalMilliseconds > silenceDurationMs || 
                                        totalCollectionTime.TotalMilliseconds > maxRecordingMs || 
                                        audioBuffer.Count > maxBufferSize;
                    
                    if (shouldProcess)
                    {
                        AudioAnalysisUtils.SafeDebugLog($"‚èπÔ∏è –ö–æ–Ω–µ—Ü —Ä–µ—á–∏: —Ç–∏—à–∏–Ω–∞={silenceDuration.TotalMilliseconds}–º—Å, –≤—Ä–µ–º—è={totalCollectionTime.TotalMilliseconds}–º—Å, –±—É—Ñ–µ—Ä={audioBuffer.Count}");

                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        _ = Task.Run(async () => await ProcessCollectedAudioAsync());
                        isCollectingAudio = false;
                    }
                }

                // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è)
                if (audioBuffer.Count > 50_000_000) // 50MB –ª–∏–º–∏—Ç
                {
                    AudioAnalysisUtils.SafeDebugLog("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –æ—á–∏—â–∞–µ–º");
                    audioBuffer.Clear();
                    isCollectingAudio = false;
                    StatusUpdated?.Invoke("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–±—Ä–æ—à–µ–Ω");
                }
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –≤ ProcessAudioForSTT: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (–∏–∑ MORT)
        /// </summary>
        private async Task ProcessCollectedAudioAsync()
        {
            try
            {
                AudioAnalysisUtils.SafeDebugLog($"üîÑ ProcessCollectedAudioAsync –í–´–ó–í–ê–ù! –ë—É—Ñ–µ—Ä: {audioBuffer.Count} –±–∞–π—Ç");
                
                if (audioBuffer.Count == 0) 
                {
                    AudioAnalysisUtils.SafeDebugLog($"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É");
                    return;
                }

                StatusUpdated?.Invoke($"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... (–∑–∞–ø–∏—Å–∞–Ω–æ {audioBuffer.Count} –±–∞–π—Ç)");

                // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ STT –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
                if (AudioReadyForSTT != null)
                {
                    // –ö–æ–ø–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    byte[] audioCopy = audioBuffer.ToArray();
                    
                    try
                    {
                        string result = await AudioReadyForSTT(audioCopy);
                        
                        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
                        if (!AudioAnalysisUtils.IsAudioPlaceholder(result))
                        {
                            AudioAnalysisUtils.SafeDebugLog($"‚úÖ STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}");
                        }
                        else
                        {
                            AudioAnalysisUtils.SafeDebugLog($"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞: {result}");
                            StatusUpdated?.Invoke("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—É–¥–∏–æ –∑–∞–≥–ª—É—à–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
                        }
                    }
                    catch (Exception ex)
                    {
                        AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ STT –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex.Message}");
                        StatusUpdated?.Invoke($"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –≤ ProcessCollectedAudioAsync: {ex.Message}");
            }
        }

        /// <summary>
        /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        public void Reset()
        {
            try
            {
                isCollectingAudio = false;
                audioBuffer.Clear();
                isTTSPlaying = false;
                AudioAnalysisUtils.SafeDebugLog("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–æ");
                StatusUpdated?.Invoke("üîÑ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞
        /// </summary>
        public async Task ForceProcessBuffer()
        {
            if (isCollectingAudio && audioBuffer.Count > 0)
            {
                AudioAnalysisUtils.SafeDebugLog("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞");
                isCollectingAudio = false;
                await ProcessCollectedAudioAsync();
            }
        }

        public void Dispose()
        {
            try
            {
                Reset();
                AudioAnalysisUtils.SafeDebugLog("üóëÔ∏è EnhancedAudioProcessor —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
            }
        }
    }
}