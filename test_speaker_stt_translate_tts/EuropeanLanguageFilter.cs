using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Diagnostics;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π, –≥—Ä–µ—á–µ—Å–∫–∏–π –∏ –¥—Ä—É–≥–∏–µ
    /// </summary>
    public static class EuropeanLanguageFilter
    {
        /// <summary>
        /// Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        /// </summary>
        private static void DebugLogEuropean(string message)
        {
            Debug.WriteLine($"[EUROPEAN_FILTER_DEBUG] {message}");
        }

        #region –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è

        /// <summary>
        /// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
        /// </summary>
        private static readonly char[] STANDARD_SENTENCE_ENDINGS = { '.', '?', '!' };

        /// <summary>
        /// –ú–Ω–æ–≥–æ—Ç–æ—á–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
        /// </summary>
        private static readonly string[] ELLIPSIS_VARIANTS = { "...", "‚Ä¶", "‚Ä¶." };

        /// <summary>
        /// –ò—Å–ø–∞–Ω—Å–∫–∏–µ –ø–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        /// </summary>
        private static readonly char[] SPANISH_OPENING_MARKS = { '¬ø', '¬°' };
        private static readonly char[] SPANISH_CLOSING_MARKS = { '?', '!' };

        /// <summary>
        /// –ì—Ä–µ—á–µ—Å–∫–∏–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ (–≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)
        /// </summary>
        private const char GREEK_QUESTION_MARK = ';';

        /// <summary>
        /// –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏ "—ë–ª–æ—á–∫–∏"
        /// </summary>
        private static readonly char[] FRENCH_QUOTES = { '¬´', '¬ª' };

        /// <summary>
        /// –ù–µ–º–µ—Ü–∫–∏–µ –∫–∞–≤—ã—á–∫–∏
        /// </summary>
        private static readonly string[] GERMAN_QUOTES = { "\u201E", "\u201C", "\u201A", "\u2018" };

        /// <summary>
        /// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        /// </summary>
        private static readonly string[] COMBINED_PUNCTUATION = 
        {
            "?!", "!?", "?..", "!..", "?!..", "!?..", 
            "?‚Ä¶", "!‚Ä¶", "..", "...", "‚Ä¶"
        };

        #endregion

        #region –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞

        /// <summary>
        /// –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        /// </summary>
        private static class LanguageDetector
        {
            public static bool IsLikelyCyrillic(string text) => 
                Regex.IsMatch(text, @"[–∞-—è—ë]", RegexOptions.IgnoreCase);

            public static bool IsLikelyLatin(string text) => 
                Regex.IsMatch(text, @"[a-z]", RegexOptions.IgnoreCase);

            public static bool IsLikelySpanish(string text) => 
                text.Contains('¬ø') || text.Contains('¬°') || 
                Regex.IsMatch(text, @"[√±√°√©√≠√≥√∫√º]", RegexOptions.IgnoreCase);

            public static bool IsLikelyFrench(string text) => 
                text.Contains('¬´') || text.Contains('¬ª') || 
                Regex.IsMatch(text, @"[√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ø√ß]", RegexOptions.IgnoreCase);

            public static bool IsLikelyGerman(string text) => 
                Regex.IsMatch(text, @"[√§√∂√º√ü]", RegexOptions.IgnoreCase) ||
                text.Contains("\u201E") || text.Contains("\u201C");

            public static bool IsLikelyGreek(string text) => 
                Regex.IsMatch(text, @"[Œ±-œâŒë-Œ©]", RegexOptions.IgnoreCase);
        }

        #endregion

        #region –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
        /// </summary>
        public static bool IsCompleteSentenceEuropean(string text)
        {
            if (string.IsNullOrWhiteSpace(text)) return false;

            var trimmedText = text.Trim();
            if (trimmedText.Length <= 2) return false;

            DebugLogEuropean($"üîç –ê–Ω–∞–ª–∏–∑ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: '{text}'");

            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if (!StartsCorrectlyEuropean(trimmedText))
            {
                DebugLogEuropean($"üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è");
                return false;
            }

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–æ–≤—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
            if (!EndsCorrectlyEuropean(trimmedText))
            {
                DebugLogEuropean($"üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è");
                return false;
            }

            // 3. –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤
            if (!PassesLanguageSpecificChecks(trimmedText))
            {
                DebugLogEuropean($"üö´ –ù–µ –ø—Ä–æ—à–ª–æ —è–∑—ã–∫–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏");
                return false;
            }

            DebugLogEuropean($"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ");
            return true;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
        /// </summary>
        private static bool StartsCorrectlyEuropean(string text)
        {
            if (string.IsNullOrEmpty(text)) return false;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: –∫–∞–≤—ã—á–∫–∏, —Å–∫–æ–±–∫–∏, —Ç–∏—Ä–µ
            int startIndex = SkipPrefixSymbols(text);
            if (startIndex >= text.Length) return false;

            char firstChar = text[startIndex];

            // –ò—Å–ø–∞–Ω—Å–∫–∏–π: —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞—á–∞–ª–æ —Å ¬ø –∏ ¬°
            if (SPANISH_OPENING_MARKS.Contains(firstChar))
            {
                DebugLogEuropean($"üîç –ò—Å–ø–∞–Ω—Å–∫–∏–π –∑–Ω–∞–∫ –≤ –Ω–∞—á–∞–ª–µ: '{firstChar}'");
                return true;
            }

            // –¶–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
            if (char.IsDigit(firstChar) || 
                firstChar == '$' || firstChar == '‚Ç¨' || firstChar == '¬£' ||
                firstChar == '@' || firstChar == '#')
            {
                DebugLogEuropean($"üîç –¶–∏—Ñ—Ä–∞/—Å–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ: '{firstChar}'");
                return true;
            }

            // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
            bool isCapital = char.IsUpper(firstChar);
            
            // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
            if (!isCapital && IsAllowedLowercaseBrand(text, startIndex))
            {
                return true;
            }

            return isCapital;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
        /// </summary>
        private static bool EndsCorrectlyEuropean(string text)
        {
            if (string.IsNullOrEmpty(text)) return false;

            // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∫–æ–±–∫–∏
            string cleanEnd = RemoveSuffixSymbols(text);
            if (string.IsNullOrEmpty(cleanEnd)) return false;

            // –ì—Ä–µ—á–µ—Å–∫–∏–π: —Ä–∞–∑—Ä–µ—à–∞–µ–º ';' –∫–∞–∫ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
            if (LanguageDetector.IsLikelyGreek(text))
            {
                if (cleanEnd.EndsWith(GREEK_QUESTION_MARK.ToString()))
                {
                    DebugLogEuropean($"üîç –ì—Ä–µ—á–µ—Å–∫–∏–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞: ';'");
                    return true;
                }
            }

            // –ò—Å–ø–∞–Ω—Å–∫–∏–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏
            if (LanguageDetector.IsLikelySpanish(text))
            {
                if (HasMatchingSpanishPunctuation(text))
                {
                    DebugLogEuropean($"üîç –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏—Å–ø–∞–Ω—Å–∫–∏–µ –ø–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏");
                    return true;
                }
            }

            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            char lastChar = cleanEnd[cleanEnd.Length - 1];
            if (STANDARD_SENTENCE_ENDINGS.Contains(lastChar))
            {
                return true;
            }

            // –ú–Ω–æ–≥–æ—Ç–æ—á–∏–µ
            foreach (var ellipsis in ELLIPSIS_VARIANTS)
            {
                if (cleanEnd.EndsWith(ellipsis))
                {
                    return true;
                }
            }

            // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏
            foreach (var combo in COMBINED_PUNCTUATION)
            {
                if (cleanEnd.EndsWith(combo))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// –Ø–∑—ã–∫–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        /// </summary>
        private static bool PassesLanguageSpecificChecks(string text)
        {
            // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            if (LanguageDetector.IsLikelyFrench(text))
            {
                return ValidateFrenchPunctuation(text);
            }

            // –ù–µ–º–µ—Ü–∫–∏–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–ª–∞–≤–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ (–±–∞–∑–æ–≤–æ)
            if (LanguageDetector.IsLikelyGerman(text))
            {
                return ValidateGermanCapitalization(text);
            }

            // –ò—Å–ø–∞–Ω—Å–∫–∏–π: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
            if (LanguageDetector.IsLikelySpanish(text))
            {
                return ValidateSpanishPunctuation(text);
            }

            return true; // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø–æ–∫–∞ –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        }

        #endregion

        #region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

        /// <summary>
        /// –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫–∞–≤—ã—á–∫–∏, —Å–∫–æ–±–∫–∏, —Ç–∏—Ä–µ)
        /// </summary>
        private static int SkipPrefixSymbols(string text)
        {
            int index = 0;
            while (index < text.Length)
            {
                char ch = text[index];
                
                if (ch == '¬´' || ch == '¬ª' || ch == '"' || ch == '\'' || 
                    ch == '(' || ch == ')' || ch == '[' || ch == ']' ||
                    ch == '{' || ch == '}' || ch == '‚Äî' || ch == '‚Äì' || ch == '-' ||
                    ch == ' ' || ch == '\t' || ch == '\u201E' || ch == '\u201C' || ch == '\u201A' || ch == '\u2018')
                {
                    index++;
                    continue;
                }

                // –ú–Ω–æ–≥–æ—Ç–æ—á–∏–µ –≤ –Ω–∞—á–∞–ª–µ
                if ((ch == '.' && index + 2 < text.Length && 
                     text[index + 1] == '.' && text[index + 2] == '.') ||
                    ch == '‚Ä¶')
                {
                    index += (ch == '‚Ä¶') ? 1 : 3;
                    continue;
                }

                break;
            }
            return index;
        }

        /// <summary>
        /// –£–±–∏—Ä–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫–∞–≤—ã—á–∫–∏, —Å–∫–æ–±–∫–∏)
        /// </summary>
        private static string RemoveSuffixSymbols(string text)
        {
            if (string.IsNullOrEmpty(text)) return text;

            var result = text.TrimEnd();
            
            // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∫–æ–±–∫–∏
            while (result.Length > 0)
            {
                char lastChar = result[result.Length - 1];
                if (lastChar == '¬ª' || lastChar == '"' || lastChar == '\'' || 
                    lastChar == ')' || lastChar == ']' || lastChar == '}' ||
                    lastChar == '\u201C' || lastChar == '\u2018' || lastChar == ' ')
                {
                    result = result.Substring(0, result.Length - 1);
                    continue;
                }
                break;
            }

            return result;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
        /// </summary>
        private static bool IsAllowedLowercaseBrand(string text, int startIndex)
        {
            string restOfText = text.Substring(startIndex).ToLower();
            string[] allowedBrands = 
            { 
                "iphone", "ipad", "ios", "macbook", "imac",
                "ebay", "etsy", "android", "gmail", "youtube",
                "facebook", "twitter", "instagram", "linkedin"
            };

            foreach (var brand in allowedBrands)
            {
                if (restOfText.StartsWith(brand))
                {
                    DebugLogEuropean($"üîç –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥: '{brand}'");
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–Ω—ã–µ –∏—Å–ø–∞–Ω—Å–∫–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        /// </summary>
        private static bool HasMatchingSpanishPunctuation(string text)
        {
            // –ò—â–µ–º ¬ø...? –∏ ¬°...!
            bool hasQuestionPair = text.Contains('¬ø') && text.Contains('?');
            bool hasExclamationPair = text.Contains('¬°') && text.Contains('!');
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∑–Ω–∞–∫–∏, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ
            if (text.Contains('¬ø') && !text.Contains('?')) return false;
            if (text.Contains('¬°') && !text.Contains('!')) return false;

            return hasQuestionPair || hasExclamationPair || 
                   (!text.Contains('¬ø') && !text.Contains('¬°')); // –ò–ª–∏ –∏—Ö –≤–æ–æ–±—â–µ –Ω–µ—Ç
        }

        /// <summary>
        /// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ (–ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏)
        /// </summary>
        private static bool ValidateFrenchPunctuation(string text)
        {
            // –í–æ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º –ø–µ—Ä–µ–¥ : ; ! ? —Å—Ç–∞–≤–∏—Ç—Å—è —É–∑–∫–∏–π –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
            // –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–∞ (–ª—é–±–æ–≥–æ) –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —ç—Ç–∏ –∑–Ω–∞–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –Ω–∏–º–∏ (–Ω–æ –Ω–µ —Å—Ç—Ä–æ–≥–æ)
            char[] frenchMarks = { ':', ';', '!', '?' };
            
            foreach (char mark in frenchMarks)
            {
                int index = text.IndexOf(mark);
                if (index > 0)
                {
                    char prevChar = text[index - 1];
                    // –í–æ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª, –Ω–æ –º—ã –Ω–µ –±—É–¥–µ–º —Å—Ç—Ä–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å
                    // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    if (prevChar != ' ')
                    {
                        DebugLogEuropean($"üîç –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∑–Ω–∞–∫ '{mark}' –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞");
                    }
                }
            }

            return true; // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        }

        /// <summary>
        /// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–º–µ—Ü–∫–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        /// </summary>
        private static bool ValidateGermanCapitalization(string text)
        {
            // –í –Ω–µ–º–µ—Ü–∫–æ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—à—É—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
            // –ú—ã –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É - –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ
            
            var words = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            int capitalizedWords = words.Count(w => w.Length > 0 && char.IsUpper(w[0]));
            
            DebugLogEuropean($"üîç –ù–µ–º–µ—Ü–∫–∏–π: {capitalizedWords}/{words.Length} —Å–ª–æ–≤ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π");
            
            return true; // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ
        }

        /// <summary>
        /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
        /// </summary>
        private static bool ValidateSpanishPunctuation(string text)
        {
            return HasMatchingSpanishPunctuation(text);
        }

        #endregion

        #region –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º

        /// <summary>
        /// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–∑ —Å —É—á–µ—Ç–æ–º –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
        /// </summary>
        public static bool IsIncompletePhrase(string text)
        {
            if (string.IsNullOrWhiteSpace(text)) return true;

            // –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            bool standardIncomplete = AdvancedSpeechFilter.IsIncompletePhrase(text);
            
            // –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            if (!standardIncomplete)
            {
                return !IsCompleteSentenceEuropean(text);
            }

            return standardIncomplete;
        }

        /// <summary>
        /// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        /// </summary>
        public static bool IsValidEuropeanSpeech(string text, float[]? audioSamples = null)
        {
            if (string.IsNullOrWhiteSpace(text)) return false;

            // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ AdvancedSpeechFilter
            bool basicValid = AdvancedSpeechFilter.IsValidSpeechQuick(text);
            
            if (!basicValid) return false;

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
            if (IsIncompletePhrase(text))
            {
                DebugLogEuropean($"üö´ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ '{text}'");
                return false;
            }

            DebugLogEuropean($"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º: '{text}'");
            return true;
        }

        /// <summary>
        /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
        /// </summary>
        public static string GetSupportedLanguages()
        {
            return "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: " +
                   "üá∑üá∫ –†—É—Å—Å–∫–∏–π (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞), " +
                   "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, " +
                   "üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π (–∑–∞–≥–ª–∞–≤–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ), " +
                   "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π (–ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ :;!?), " +
                   "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π (¬ø¬° –ø–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏), " +
                   "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π, " +
                   "üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∏–π (; –∫–∞–∫ ?), " +
                   "üá™üá∫ + –¥—Ä—É–≥–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ";
        }

        #endregion
    }
}