using System;
using System.Collections.Concurrent;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ç–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    /// –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏
    /// </summary>
    public class SmartAudioManager : IDisposable
    {
        // üìö –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –†–ï–ñ–ò–ú–ê –ê–£–î–ò–û–ö–ù–ò–ì–ò
        private const int MAX_QUEUE_SIZE = 200;           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∞—É–¥–∏–æ–∫–Ω–∏–≥
        private const int AUDIOBOOK_MERGE_SIZE = 150;     // –ü–æ—Ä–æ–≥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è
        private bool isTTSActive = false;
        private bool isCapturePaused = false;
        private bool isProcessing = false;
        private DateTime lastProcessTime = DateTime.Now;
        private readonly object lockObject = new object();
        
        // –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏
        private readonly ConcurrentQueue<AudioSegment> audioQueue = new ConcurrentQueue<AudioSegment>();
        private readonly SemaphoreSlim processingLock = new SemaphoreSlim(1, 1);
        private CancellationTokenSource? cancellationTokenSource;
        private Task? queueProcessingTask;
        
        // –°–æ–±—ã—Ç–∏—è
        public event Action<bool>? TTSStateChanged;
        public event Action<bool>? CaptureStateChanged;
        public event Action<string>? LogMessage;
        public event Func<AudioSegment, Task>? ProcessAudioSegment;
        
        public bool IsTTSActive => isTTSActive;
        public bool IsCapturePaused => isCapturePaused;
        public int QueueCount => audioQueue.Count;

        public SmartAudioManager()
        {
            cancellationTokenSource = new CancellationTokenSource();
            StartQueueProcessor();
            SafeLog("üß† SmartAudioManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        /// <summary>
        /// –ù–∞—á–∞–ª–æ TTS - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
        /// </summary>
        public void NotifyTTSStarted()
        {
            lock (lockObject)
            {
                if (!isTTSActive)
                {
                    isTTSActive = true;
                    isCapturePaused = true;
                    
                    TTSStateChanged?.Invoke(true);
                    CaptureStateChanged?.Invoke(false);
                    
                    SafeLog("üîä TTS –∞–∫—Ç–∏–≤–µ–Ω - –∑–∞—Ö–≤–∞—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
            }
        }

        /// <summary>
        /// –û–∫–æ–Ω—á–∞–Ω–∏–µ TTS - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å
        /// </summary>
        public void NotifyTTSCompleted()
        {
            lock (lockObject)
            {
                if (isTTSActive)
                {
                    isTTSActive = false;
                    isCapturePaused = false;
                    
                    TTSStateChanged?.Invoke(false);
                    CaptureStateChanged?.Invoke(true);
                    
                    SafeLog($"‚úÖ TTS –∑–∞–≤–µ—Ä—à–µ–Ω - –∑–∞—Ö–≤–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏: {audioQueue.Count}");
                }
            }
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –∞—É–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥—å
        /// </summary>
        public void QueueAudioSegment(byte[] audioData, DateTime timestamp, string source = "capture")
        {
            // üéß –†–ï–ñ–ò–ú –ê–£–î–ò–û–ö–ù–ò–ì–ò: –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –±–µ–∑ –ø–æ—Ç–µ—Ä—å –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
            const int MAX_QUEUE_SIZE = 200; // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –∞—É–¥–∏–æ–∫–Ω–∏–≥
            const int AUDIOBOOK_MERGE_SIZE = 150; // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø—Ä–∏ —ç—Ç–æ–º —Ä–∞–∑–º–µ—Ä–µ
            
            if (audioQueue.Count >= MAX_QUEUE_SIZE)
            {
                SafeLog($"üìö –†–µ–∂–∏–º –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏: –æ—á–µ—Ä–µ–¥—å –¥–æ—Å—Ç–∏–≥–ª–∞ {audioQueue.Count} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –∫—Ä—É–ø–Ω—ã–µ –±–ª–æ–∫–∏...");
                
                // –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –º–µ–ª–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –∫—Ä—É–ø–Ω—ã–µ
                var mergedSegments = MergeSmallSegments();
                SafeLog($"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –≤ {mergedSegments} –∫—Ä—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö");
            }
            else if (audioQueue.Count >= AUDIOBOOK_MERGE_SIZE)
            {
                // –ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                _ = Task.Run(() => MergeSmallSegments());
            }
            
            var segment = new AudioSegment
            {
                AudioData = audioData,
                Timestamp = timestamp,
                Source = source,
                Id = Guid.NewGuid()
            };

            audioQueue.Enqueue(segment);
            
            if (isTTSActive && source != "priority")
            {
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ TTS –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
                if (audioQueue.Count % 20 == 0) // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 20-–π —Å–µ–≥–º–µ–Ω—Ç
                {
                    SafeLog($"üì• –ê—É–¥–∏–æ –Ω–∞–∫–æ–ø–ª–µ–Ω –≤–æ –≤—Ä–µ–º—è TTS: {audioData.Length} –±–∞–π—Ç, –≤—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {audioQueue.Count}");
                }
            }
            else
            {
                SafeLog($"üì• –ê—É–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {audioData.Length} –±–∞–π—Ç, –≤—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {audioQueue.Count}");
            }
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        /// </summary>
        public void QueuePriorityAudioSegment(byte[] audioData, DateTime timestamp)
        {
            QueueAudioSegment(audioData, timestamp, "priority");
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        /// </summary>
        public void ClearQueue()
        {
            var count = audioQueue.Count;
            while (audioQueue.TryDequeue(out _)) { }
            SafeLog($"üóëÔ∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {count} —Å–µ–≥–º–µ–Ω—Ç–æ–≤");
        }

        /// <summary>
        /// üéß –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –∫—Ä—É–ø–Ω—ã–µ –¥–ª—è –∞—É–¥–∏–æ–∫–Ω–∏–≥
        /// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
        /// </summary>
        private int MergeSmallSegments()
        {
            const int MIN_MERGE_SIZE = 32000; // 32KB - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            const int MAX_MERGED_SIZE = 256000; // 256KB - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            
            var tempQueue = new Queue<AudioSegment>();
            var mergedSegments = 0;
            
            try
            {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
                while (audioQueue.TryDequeue(out AudioSegment? segment))
                {
                    tempQueue.Enqueue(segment);
                }
                
                var mergeBuffer = new List<byte>();
                DateTime? mergeStartTime = null;
                var segmentsInMerge = 0;
                
                while (tempQueue.Count > 0)
                {
                    var segment = tempQueue.Dequeue();
                    
                    // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    if (segment.AudioData.Length >= MIN_MERGE_SIZE)
                    {
                        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if (mergeBuffer.Count > 0)
                        {
                            var mergedSegment = new AudioSegment
                            {
                                AudioData = mergeBuffer.ToArray(),
                                Timestamp = mergeStartTime ?? DateTime.Now,
                                Source = "merged_audiobook",
                                Id = Guid.NewGuid()
                            };
                            audioQueue.Enqueue(mergedSegment);
                            mergedSegments++;
                            
                            mergeBuffer.Clear();
                            mergeStartTime = null;
                            segmentsInMerge = 0;
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–æ–π —Å–µ–≥–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ
                        audioQueue.Enqueue(segment);
                    }
                    else
                    {
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é
                        if (mergeStartTime == null)
                            mergeStartTime = segment.Timestamp;
                        
                        mergeBuffer.AddRange(segment.AudioData);
                        segmentsInMerge++;
                        
                        // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä —Å—Ç–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                        if (mergeBuffer.Count >= MAX_MERGED_SIZE || 
                            (mergeBuffer.Count >= MIN_MERGE_SIZE && tempQueue.Count == 0))
                        {
                            var mergedSegment = new AudioSegment
                            {
                                AudioData = mergeBuffer.ToArray(),
                                Timestamp = mergeStartTime.Value,
                                Source = $"merged_audiobook_{segmentsInMerge}_segments",
                                Id = Guid.NewGuid()
                            };
                            audioQueue.Enqueue(mergedSegment);
                            mergedSegments++;
                            
                            SafeLog($"üìö –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {segmentsInMerge} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –±–ª–æ–∫ {mergedSegment.AudioData.Length} –±–∞–π—Ç");
                            
                            mergeBuffer.Clear();
                            mergeStartTime = null;
                            segmentsInMerge = 0;
                        }
                    }
                }
                
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —á—Ç–æ-—Ç–æ –≤ –±—É—Ñ–µ—Ä–µ
                if (mergeBuffer.Count > 0)
                {
                    var finalMerged = new AudioSegment
                    {
                        AudioData = mergeBuffer.ToArray(),
                        Timestamp = mergeStartTime ?? DateTime.Now,
                        Source = $"merged_audiobook_final_{segmentsInMerge}_segments",
                        Id = Guid.NewGuid()
                    };
                    audioQueue.Enqueue(finalMerged);
                    mergedSegments++;
                    
                    SafeLog($"üìö –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {segmentsInMerge} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –±–ª–æ–∫ {finalMerged.AudioData.Length} –±–∞–π—Ç");
                }
                
                return mergedSegments;
            }
            catch (Exception ex)
            {
                SafeLog($"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {ex.Message}");
                
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
                while (tempQueue.Count > 0)
                {
                    audioQueue.Enqueue(tempQueue.Dequeue());
                }
                
                return 0;
            }
        }

        /// <summary>
        /// –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å–±—Ä–æ—Å SmartAudioManager
        /// </summary>
        public void FullStop()
        {
            lock (lockObject)
            {
                try
                {
                    SafeLog("üõë –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SmartAudioManager...");
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                    isTTSActive = false;
                    isCapturePaused = true;
                    
                    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                    ClearQueue();
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    TTSStateChanged?.Invoke(false);
                    CaptureStateChanged?.Invoke(false);
                    
                    SafeLog("‚úÖ SmartAudioManager –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
                catch (Exception ex)
                {
                    SafeLog($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SmartAudioManager: {ex.Message}");
                }
            }
        }

        /// <summary>
        /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        /// </summary>
        public void ResetForNewStart()
        {
            lock (lockObject)
            {
                try
                {
                    SafeLog("üîÑ –°–±—Ä–æ—Å SmartAudioManager –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...");
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    isTTSActive = false;
                    isCapturePaused = false;
                    
                    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                    ClearQueue();
                    
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã
                    cancellationTokenSource?.Cancel();
                    cancellationTokenSource = new CancellationTokenSource();
                    
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏
                    StartQueueProcessor();
                    
                    SafeLog("‚úÖ SmartAudioManager –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É");
                }
                catch (Exception ex)
                {
                    SafeLog($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ SmartAudioManager: {ex.Message}");
                }
            }
        }

        /// <summary>
        /// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ —Å–±—Ä–æ—Å–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        /// </summary>
        public void EmergencyStop()
        {
            try
            {
                SafeLog("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SmartAudioManager!");
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ TTS
                lock (lockObject)
                {
                    if (isTTSActive)
                    {
                        isTTSActive = false;
                        isCapturePaused = false;
                        SafeLog("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS");
                        
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                        try
                        {
                            TTSStateChanged?.Invoke(false);
                            CaptureStateChanged?.Invoke(false);
                        }
                        catch { } // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    }
                }
                
                // –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
                cancellationTokenSource?.Cancel();
                
                // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                FullStop();
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                queueProcessingTask?.Wait(2000);
                
                SafeLog("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SmartAudioManager –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                SafeLog($"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
                
                // –í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ
                try
                {
                    isTTSActive = false;
                    isCapturePaused = false;
                }
                catch { }
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ
        /// </summary>
        public bool CanProcessAudio()
        {
            return !isTTSActive && !isCapturePaused;
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –∑–∞—Ö–≤–∞—Ç–∞ (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        /// </summary>
        public void PauseCapture(string reason = "external")
        {
            lock (lockObject)
            {
                if (!isCapturePaused)
                {
                    isCapturePaused = true;
                    CaptureStateChanged?.Invoke(false);
                    SafeLog($"‚è∏Ô∏è –ó–∞—Ö–≤–∞—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {reason}");
                }
            }
        }

        /// <summary>
        /// –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public void ResumeCapture(string reason = "external")
        {
            lock (lockObject)
            {
                if (isCapturePaused && !isTTSActive)
                {
                    isCapturePaused = false;
                    CaptureStateChanged?.Invoke(true);
                    SafeLog($"‚ñ∂Ô∏è –ó–∞—Ö–≤–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω: {reason}");
                }
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        /// </summary>
        private void StartQueueProcessor()
        {
            queueProcessingTask = Task.Run(async () =>
            {
                while (!cancellationTokenSource!.Token.IsCancellationRequested)
                {
                    try
                    {
                        await ProcessQueueAsync();
                        await Task.Delay(100, cancellationTokenSource.Token); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 100–º—Å
                    }
                    catch (OperationCanceledException)
                    {
                        break;
                    }
                    catch (Exception ex)
                    {
                        SafeLog($"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏: {ex.Message}");
                        await Task.Delay(1000, cancellationTokenSource.Token); // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    }
                }
            });
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        /// </summary>
        private async Task ProcessQueueAsync()
        {
            // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –≤–æ –≤—Ä–µ–º—è TTS
            if (isTTSActive) return;

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            if (!await processingLock.WaitAsync(10))
                return;

            try
            {
                if (audioQueue.TryDequeue(out AudioSegment? segment))
                {
                    // üéß –†–ï–ñ–ò–ú –ê–£–î–ò–û–ö–ù–ò–ì–ò: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É
                    const int MIN_AUDIO_SIZE = 8000; // –°–Ω–∏–∂–µ–Ω –¥–ª—è –∞—É–¥–∏–æ–∫–Ω–∏–≥ (8KB)
                    
                    if (segment.AudioData.Length < MIN_AUDIO_SIZE)
                    {
                        SafeLog($"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –º–∏–∫—Ä–æ-—Å–µ–≥–º–µ–Ω—Ç–∞ {segment.Id}: —Ä–∞–∑–º–µ—Ä {segment.AudioData.Length} –±–∞–π—Ç < {MIN_AUDIO_SIZE}");
                        return;
                    }
                    
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                    if (segment.Source.StartsWith("merged_audiobook"))
                    {
                        SafeLog($"üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞ —Å–µ–≥–º–µ–Ω—Ç–∞: {segment.Source} ({segment.AudioData.Length} –±–∞–π—Ç)");
                    }
                    else
                    {
                        SafeLog($"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {segment.Id} ({segment.AudioData.Length} –±–∞–π—Ç)");
                    }
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if (ProcessAudioSegment != null)
                    {
                        await ProcessAudioSegment.Invoke(segment);
                    }
                    
                    SafeLog($"‚úÖ –°–µ–≥–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {segment.Id}");
                }
            }
            finally
            {
                processingLock.Release();
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        /// </summary>
        public AudioManagerStats GetStats()
        {
            return new AudioManagerStats
            {
                IsTTSActive = isTTSActive,
                IsCapturePaused = isCapturePaused,
                QueueCount = audioQueue.Count,
                CanProcessAudio = CanProcessAudio()
            };
        }

        public string GetAudiobookStatistics()
        {
            var sb = new StringBuilder();
            sb.AppendLine("üìö –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ñ–ò–ú–ê –ê–£–î–ò–û–ö–ù–ò–ì–ò:");
            sb.AppendLine($"üìä –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {audioQueue.Count}");
            sb.AppendLine($"üîÑ –ê–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {(isProcessing ? "–î–∞" : "–ù–µ—Ç")}");
            sb.AppendLine($"‚è∞ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {lastProcessTime:HH:mm:ss}");
            sb.AppendLine($"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {MAX_QUEUE_SIZE}");
            sb.AppendLine($"üîó –ü–æ—Ä–æ–≥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {AUDIOBOOK_MERGE_SIZE}");
            sb.AppendLine($"üíæ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞: 256KB");
            return sb.ToString();
        }

        private void SafeLog(string message)
        {
            try
            {
                LogMessage?.Invoke($"[{DateTime.Now:HH:mm:ss.fff}] {message}");
            }
            catch { }
        }

        public void Dispose()
        {
            try
            {
                cancellationTokenSource?.Cancel();
                queueProcessingTask?.Wait(2000);
                
                ClearQueue();
                
                cancellationTokenSource?.Dispose();
                processingLock?.Dispose();
                
                SafeLog("üóëÔ∏è SmartAudioManager —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                SafeLog($"‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ SmartAudioManager: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// –°–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    /// </summary>
    public class AudioSegment
    {
        public Guid Id { get; set; }
        public byte[] AudioData { get; set; } = Array.Empty<byte>();
        public DateTime Timestamp { get; set; }
        public string Source { get; set; } = "";
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É–¥–∏–æ
    /// </summary>
    public class AudioManagerStats
    {
        public bool IsTTSActive { get; set; }
        public bool IsCapturePaused { get; set; }
        public int QueueCount { get; set; }
        public bool CanProcessAudio { get; set; }
    }
}