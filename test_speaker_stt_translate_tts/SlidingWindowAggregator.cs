using System.Buffers;
using System.Text;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –°–∏—Å—Ç–µ–º–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ —Å VAD –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∞—É–¥–∏–æ-—Å–µ–≥–º–µ–Ω—Ç–æ–≤
    /// –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç 2-4 —Å–µ–∫—É–Ω–¥—ã –∞—É–¥–∏–æ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ STT
    /// </summary>
    public class SlidingWindowAggregator : IDisposable
    {
        #region Configuration
        
        private const int SAMPLE_RATE = 16000;
        private const float WINDOW_DURATION_SEC = 3.0f; // –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        private const float OVERLAP_DURATION_SEC = 0.5f; // –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
        private const float SLIDE_INTERVAL_SEC = 1.5f; // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–¥–≤–∏–≥–∞
        
        private const float RMS_THRESHOLD = 0.001f; // –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ RMS
        private const float SILENCE_THRESHOLD_SEC = 0.6f; // –ü–∞—É–∑–∞ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        private const int MAX_TEXT_LENGTH = 400; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è TTS
        
        private readonly int _windowSamples;
        private readonly int _overlapSamples;
        private readonly int _slideSamples;
        private readonly int _silenceThresholdSamples;
        
        #endregion

        #region Private Fields
        
        private readonly ArrayPool<float> _floatPool = ArrayPool<float>.Shared;
        private readonly List<float> _audioBuffer = new();
        private readonly StringBuilder _textAccumulator = new();
        
        private DateTime _lastSlideTime = DateTime.UtcNow;
        private DateTime _lastActivityTime = DateTime.UtcNow;
        private bool _isDisposed = false;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        private int _processedSegments = 0;
        private int _droppedSilentSegments = 0;
        private float _averageRms = 0f;
        
        #endregion

        #region Events
        
        public event Func<float[], CancellationToken, Task<string?>>? OnAudioSegmentReady;
        public event Action<string>? OnTextReady;
        public event Action<string>? OnStatusChanged;
        public event Action<AudioAnalysisResult>? OnAudioAnalysis;
        
        #endregion

        public SlidingWindowAggregator()
        {
            _windowSamples = (int)(WINDOW_DURATION_SEC * SAMPLE_RATE);
            _overlapSamples = (int)(OVERLAP_DURATION_SEC * SAMPLE_RATE);
            _slideSamples = (int)(SLIDE_INTERVAL_SEC * SAMPLE_RATE);
            _silenceThresholdSamples = (int)(SILENCE_THRESHOLD_SEC * SAMPLE_RATE);
            
            OnStatusChanged?.Invoke($"üéöÔ∏è –û–∫–Ω–æ: {WINDOW_DURATION_SEC}—Å, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {OVERLAP_DURATION_SEC}—Å, —Å–¥–≤–∏–≥: {SLIDE_INTERVAL_SEC}—Å");
        }

        #region Public Methods
        
        /// <summary>
        /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ-—Å–µ–≥–º–µ–Ω—Ç–∞ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
        /// </summary>
        public async Task AddAudioSegmentAsync(float[] audioData, CancellationToken ct = default)
        {
            if (_isDisposed || audioData == null || audioData.Length == 0)
                return;
                
            try
            {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π –±—É—Ñ–µ—Ä
                lock (_audioBuffer)
                {
                    _audioBuffer.AddRange(audioData);
                }
                
                // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                var analysis = AnalyzeAudioActivity(audioData);
                OnAudioAnalysis?.Invoke(analysis);
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                UpdateActivityTracking(analysis);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await CheckAndProcessWindowAsync(ct);
            }
            catch (Exception ex)
            {
                OnStatusChanged?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {ex.Message}");
            }
        }
        
        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        /// </summary>
        public async Task FlushAsync(CancellationToken ct = default)
        {
            if (_audioBuffer.Count == 0)
                return;
                
            OnStatusChanged?.Invoke("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞...");
            
            float[] windowData;
            lock (_audioBuffer)
            {
                windowData = _audioBuffer.ToArray();
                _audioBuffer.Clear();
            }
            
            if (windowData.Length > 0)
            {
                await ProcessAudioWindowAsync(windowData, ct);
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        /// </summary>
        public AggregatorStatistics GetStatistics()
        {
            return new AggregatorStatistics
            {
                ProcessedSegments = _processedSegments,
                DroppedSilentSegments = _droppedSilentSegments,
                AverageRms = _averageRms,
                BufferSamples = _audioBuffer.Count,
                BufferDurationSeconds = (float)_audioBuffer.Count / SAMPLE_RATE,
                ActivityRate = _droppedSilentSegments > 0 ? 
                    (float)_processedSegments / (_processedSegments + _droppedSilentSegments) : 1.0f
            };
        }
        
        #endregion

        #region Private Methods - Window Processing
        
        private async Task CheckAndProcessWindowAsync(CancellationToken ct)
        {
            var now = DateTime.UtcNow;
            var timeSinceLastSlide = (now - _lastSlideTime).TotalSeconds;
            var timeSinceLastActivity = (now - _lastActivityTime).TotalSeconds;
            
            bool shouldProcess = false;
            string reason = "";
            
            // –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∫–Ω–∞
            if (_audioBuffer.Count >= _windowSamples)
            {
                shouldProcess = true;
                reason = "—Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç";
            }
            else if (timeSinceLastSlide >= SLIDE_INTERVAL_SEC && _audioBuffer.Count >= _slideSamples)
            {
                shouldProcess = true;
                reason = "–∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–¥–≤–∏–≥–∞";
            }
            else if (timeSinceLastActivity >= SILENCE_THRESHOLD_SEC && _audioBuffer.Count > 0)
            {
                shouldProcess = true;
                reason = "–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞";
            }
            
            if (shouldProcess)
            {
                OnStatusChanged?.Invoke($"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–Ω–∞: {reason} ({_audioBuffer.Count} —Å–µ–º–ø–ª–æ–≤)");
                await ProcessCurrentWindowAsync(ct);
                _lastSlideTime = now;
            }
        }
        
        private async Task ProcessCurrentWindowAsync(CancellationToken ct)
        {
            float[] windowData;
            
            lock (_audioBuffer)
            {
                if (_audioBuffer.Count == 0)
                    return;
                    
                // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–∫–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                var extractLength = Math.Min(_windowSamples, _audioBuffer.Count);
                windowData = new float[extractLength];
                
                for (int i = 0; i < extractLength; i++)
                {
                    windowData[i] = _audioBuffer[i];
                }
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                var removeCount = Math.Max(0, extractLength - _overlapSamples);
                if (removeCount > 0)
                {
                    _audioBuffer.RemoveRange(0, removeCount);
                }
            }
            
            await ProcessAudioWindowAsync(windowData, ct);
        }
        
        private async Task ProcessAudioWindowAsync(float[] windowData, CancellationToken ct)
        {
            if (OnAudioSegmentReady == null)
                return;
                
            try
            {
                // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–∫–Ω–∞
                var windowAnalysis = AnalyzeAudioActivity(windowData);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∏—à–∏–Ω—ã
                if (windowAnalysis.RmsLevel < RMS_THRESHOLD && windowAnalysis.SpectralEnergy < RMS_THRESHOLD * 2)
                {
                    _droppedSilentSegments++;
                    OnStatusChanged?.Invoke($"üîá –ü—Ä–æ–ø—É—Å–∫ —Ç–∏—à–∏–Ω—ã (RMS: {windowAnalysis.RmsLevel:F6})");
                    return;
                }
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ STT
                var recognizedText = await OnAudioSegmentReady(windowData, ct);
                
                if (!string.IsNullOrWhiteSpace(recognizedText))
                {
                    await ProcessRecognizedTextAsync(recognizedText);
                    _processedSegments++;
                }
                
                OnStatusChanged?.Invoke($"‚úÖ –û–∫–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {windowData.Length} —Å–µ–º–ø–ª–æ–≤ ‚Üí '{recognizedText?.Substring(0, Math.Min(recognizedText.Length, 50))}...'");
            }
            catch (Exception ex)
            {
                OnStatusChanged?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∫–Ω–∞: {ex.Message}");
            }
        }
        
        #endregion

        #region Private Methods - Text Processing
        
        private async Task ProcessRecognizedTextAsync(string text)
        {
            // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            var cleanedText = CleanAndNormalizeText(text);
            if (string.IsNullOrWhiteSpace(cleanedText))
                return;
                
            // –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —É–º–Ω—ã–º —Å–ª–∏—è–Ω–∏–µ–º
            lock (_textAccumulator)
            {
                if (_textAccumulator.Length > 0)
                {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ/–ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
                    if (!IsTextDuplicate(cleanedText))
                    {
                        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if (!EndsWithSentenceTerminator(_textAccumulator.ToString()))
                        {
                            _textAccumulator.Append(' ');
                        }
                        _textAccumulator.Append(cleanedText);
                    }
                }
                else
                {
                    _textAccumulator.Append(cleanedText);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                CheckAndFlushAccumulatedText();
            }
        }
        
        private string CleanAndNormalizeText(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return string.Empty;
                
            // –£–¥–∞–ª–µ–Ω–∏–µ placeholder —Ç–æ–∫–µ–Ω–æ–≤
            text = text.Trim();
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º—É—Å–æ—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
            if (text.Length < 3 || 
                text.All(c => !char.IsLetter(c)) ||
                IsPlaceholderToken(text))
            {
                return string.Empty;
            }
            
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
            text = System.Text.RegularExpressions.Regex.Replace(text, @"\s+", " ");
            
            return text;
        }
        
        private bool IsPlaceholderToken(string text)
        {
            var placeholders = new[]
            {
                "—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä", "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å", "–ª–∞–π–∫", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "—Å—É–±—Ç–∏—Ç—Ä—ã", "–∞–≤—Ç–æ—Ä", "–ø–µ—Ä–µ–≤–æ–¥", "–æ–∑–≤—É—á–∫–∞", "–º—É–∑—ã–∫–∞",
                "‚ô™", "‚ô´", "üéµ", "üé∂", "[–º—É–∑—ã–∫–∞]", "[—Å–º–µ—Ö]", "[–∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã]"
            };
            
            return placeholders.Any(p => text.ToLowerInvariant().Contains(p.ToLowerInvariant()));
        }
        
        private bool IsTextDuplicate(string newText)
        {
            if (_textAccumulator.Length == 0)
                return false;
                
            var currentText = _textAccumulator.ToString();
            var lastWords = GetLastWords(currentText, 5);
            var firstWords = GetFirstWords(newText, 5);
            
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤
            return lastWords.Length > 0 && firstWords.Length > 0 && 
                   lastWords.Intersect(firstWords).Count() >= Math.Min(2, Math.Min(lastWords.Length, firstWords.Length));
        }
        
        private string[] GetLastWords(string text, int count)
        {
            if (string.IsNullOrWhiteSpace(text))
                return Array.Empty<string>();
                
            return text.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                      .TakeLast(count)
                      .ToArray();
        }
        
        private string[] GetFirstWords(string text, int count)
        {
            if (string.IsNullOrWhiteSpace(text))
                return Array.Empty<string>();
                
            return text.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                      .Take(count)
                      .ToArray();
        }
        
        private bool EndsWithSentenceTerminator(string text)
        {
            if (string.IsNullOrEmpty(text))
                return false;
                
            var lastChar = text.TrimEnd().LastOrDefault();
            return lastChar == '.' || lastChar == '!' || lastChar == '?' || lastChar == ':';
        }
        
        private void CheckAndFlushAccumulatedText()
        {
            var currentText = _textAccumulator.ToString().Trim();
            
            // –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            bool shouldFlush = false;
            
            if (currentText.Length >= MAX_TEXT_LENGTH)
            {
                shouldFlush = true;
            }
            else if (currentText.Length > 50 && EndsWithSentenceTerminator(currentText))
            {
                shouldFlush = true;
            }
            
            if (shouldFlush && currentText.Length > 0)
            {
                OnTextReady?.Invoke(currentText);
                _textAccumulator.Clear();
                OnStatusChanged?.Invoke($"üìù –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {currentText.Length} —Å–∏–º–≤–æ–ª–æ–≤");
            }
        }
        
        #endregion

        #region Private Methods - Audio Analysis
        
        private AudioAnalysisResult AnalyzeAudioActivity(float[] audioData)
        {
            if (audioData == null || audioData.Length == 0)
                return new AudioAnalysisResult();
                
            // RMS –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
            double sumSquares = 0;
            float maxAmplitude = 0;
            
            for (int i = 0; i < audioData.Length; i++)
            {
                var sample = audioData[i];
                sumSquares += sample * sample;
                maxAmplitude = Math.Max(maxAmplitude, Math.Abs(sample));
            }
            
            var rmsLevel = Math.Sqrt(sumSquares / audioData.Length);
            
            // –ü—Ä–æ—Å—Ç–æ–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–µ —ç–Ω–µ—Ä–≥–∏—è (–≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
            double spectralEnergy = 0;
            for (int i = 1; i < audioData.Length; i++)
            {
                var diff = audioData[i] - audioData[i - 1];
                spectralEnergy += diff * diff;
            }
            spectralEnergy = Math.Sqrt(spectralEnergy / (audioData.Length - 1));
            
            // –î–µ—Ç–µ–∫—Ü–∏—è –∫–ª–∏–ø–ø–∏–Ω–≥–∞
            var clippingRate = audioData.Count(s => Math.Abs(s) > 0.95f) / (float)audioData.Length;
            
            return new AudioAnalysisResult
            {
                RmsLevel = (float)rmsLevel,
                MaxAmplitude = maxAmplitude,
                SpectralEnergy = (float)spectralEnergy,
                ClippingRate = clippingRate,
                SampleCount = audioData.Length,
                DurationSeconds = (float)audioData.Length / SAMPLE_RATE,
                IsActive = rmsLevel > RMS_THRESHOLD
            };
        }
        
        private void UpdateActivityTracking(AudioAnalysisResult analysis)
        {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ RMS
            _averageRms = _averageRms * 0.9f + analysis.RmsLevel * 0.1f;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (analysis.IsActive)
            {
                _lastActivityTime = DateTime.UtcNow;
            }
        }
        
        #endregion

        #region IDisposable
        
        public void Dispose()
        {
            if (_isDisposed)
                return;
                
            _isDisposed = true;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –±—É—Ñ–µ—Ä–∞
            try
            {
                FlushAsync().GetAwaiter().GetResult();
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ dispose
            }
            
            lock (_audioBuffer)
            {
                _audioBuffer.Clear();
                _textAccumulator.Clear();
            }
        }
        
        #endregion
    }

    #region Supporting Types
    
    public class AudioAnalysisResult
    {
        public float RmsLevel { get; set; }
        public float MaxAmplitude { get; set; }
        public float SpectralEnergy { get; set; }
        public float ClippingRate { get; set; }
        public int SampleCount { get; set; }
        public float DurationSeconds { get; set; }
        public bool IsActive { get; set; }
        
        public override string ToString()
        {
            return $"RMS: {RmsLevel:F6}, Max: {MaxAmplitude:F3}, Spectral: {SpectralEnergy:F6}, " +
                   $"Clipping: {ClippingRate:P1}, Duration: {DurationSeconds:F2}s, Active: {IsActive}";
        }
    }
    
    public class AggregatorStatistics
    {
        public int ProcessedSegments { get; set; }
        public int DroppedSilentSegments { get; set; }
        public float AverageRms { get; set; }
        public int BufferSamples { get; set; }
        public float BufferDurationSeconds { get; set; }
        public float ActivityRate { get; set; }
        
        public override string ToString()
        {
            return $"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {ProcessedSegments}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {DroppedSilentSegments}, " +
                   $"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ActivityRate:P1}, –ë—É—Ñ–µ—Ä: {BufferDurationSeconds:F2}—Å, –°—Ä.RMS: {AverageRms:F6}";
        }
    }
    
    #endregion
}