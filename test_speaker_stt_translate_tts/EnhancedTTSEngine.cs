using System.Speech.Synthesis;
using System.Diagnostics;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –£–ª—É—á—à–µ–Ω–Ω—ã–π TTS –∫–ª–∞—Å—Å —Å –ª–æ–≥–∏–∫–æ–π –∏–∑ MORT –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å SmartAudioManager
    /// </summary>
    public class EnhancedTTSEngine : IDisposable
    {
        private SpeechSynthesizer? speechSynthesizer;
        private bool isTTSActive = false;
        private SmartAudioManager? audioManager;
        
        // –°–æ–±—ã—Ç–∏—è
        public event Action? TTSStarted;
        public event Action? TTSCompleted;
        public event Action<string>? TTSError;
        
        public bool IsTTSActive => isTTSActive;

        public EnhancedTTSEngine(SmartAudioManager? smartAudioManager = null)
        {
            audioManager = smartAudioManager;
            InitializeTTS();
        }

        private void InitializeTTS()
        {
            try
            {
                speechSynthesizer = new SpeechSynthesizer();
                speechSynthesizer.SetOutputToDefaultAudioDevice();
                
                // –°–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                speechSynthesizer.SpeakStarted += (s, e) => 
                {
                    isTTSActive = true;
                    audioManager?.NotifyTTSStarted(); // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
                    TTSStarted?.Invoke();
                    AudioAnalysisUtils.SafeDebugLog("üîä TTS –Ω–∞—á–∞—Ç");
                };
                
                speechSynthesizer.SpeakCompleted += (s, e) => 
                {
                    isTTSActive = false;
                    audioManager?.NotifyTTSCompleted(); // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
                    TTSCompleted?.Invoke();
                    AudioAnalysisUtils.SafeDebugLog("‚úÖ TTS –∑–∞–≤–µ—Ä—à–µ–Ω");
                };
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                speechSynthesizer.Rate = 0; // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                speechSynthesizer.Volume = 80; // 80% –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                
                AudioAnalysisUtils.SafeDebugLog("‚úÖ TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                LogAvailableVoices();
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {ex.Message}");
                TTSError?.Invoke($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {ex.Message}");
            }
        }

        private void LogAvailableVoices()
        {
            try
            {
                if (speechSynthesizer == null) return;
                
                var voices = speechSynthesizer.GetInstalledVoices();
                AudioAnalysisUtils.SafeDebugLog($"üé§ –ù–∞–π–¥–µ–Ω–æ {voices.Count} –≥–æ–ª–æ—Å–æ–≤ TTS:");
                
                foreach (var voice in voices)
                {
                    var info = voice.VoiceInfo;
                    AudioAnalysisUtils.SafeDebugLog($"  - {info.Name} ({info.Culture.Name}) - {info.Gender}");
                }
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è TTS —Å –ª–æ–≥–∏–∫–æ–π –∏–∑ MORT
        /// </summary>
        public async Task<bool> SpeakTextAsync(string text, string? targetLanguage = null)
        {
            try
            {
                if (speechSynthesizer == null)
                {
                    TTSError?.Invoke("TTS –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                    return false;
                }

                if (string.IsNullOrWhiteSpace(text))
                {
                    AudioAnalysisUtils.SafeDebugLog("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è TTS");
                    return false;
                }

                // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
                if (AudioAnalysisUtils.IsAudioPlaceholder(text))
                {
                    AudioAnalysisUtils.SafeDebugLog($"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ TTS –∑–∞–≥–ª—É—à–∫–∞: {text}");
                    return false;
                }

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                if (text.Length > 300)
                {
                    text = text.Substring(0, 300) + "...";
                    AudioAnalysisUtils.SafeDebugLog($"‚ö†Ô∏è –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
                bool isEnglish = AudioAnalysisUtils.IsEnglishText(text);
                if (!string.IsNullOrEmpty(targetLanguage))
                {
                    isEnglish = targetLanguage.ToLower().Contains("en");
                }

                AudioAnalysisUtils.SafeDebugLog($"üîä TTS –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ({(isEnglish ? "EN" : "RU")}): '{text}'");

                // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ–ª–æ—Å
                SelectBestVoice(isEnglish);

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π TTS –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
                if (isTTSActive)
                {
                    speechSynthesizer.SpeakAsyncCancelAll();
                    await Task.Delay(100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º TTS –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                await Task.Run(() =>
                {
                    try
                    {
                        speechSynthesizer.Speak(text);
                    }
                    catch (Exception ex)
                    {
                        AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è TTS: {ex.Message}");
                        throw;
                    }
                });

                return true;
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ TTS: {ex.Message}");
                TTSError?.Invoke($"–û—à–∏–±–∫–∞ TTS: {ex.Message}");
                isTTSActive = false;
                return false;
            }
        }

        /// <summary>
        /// –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≥–æ–ª–æ—Å–∞ –¥–ª—è —è–∑—ã–∫–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ MORT)
        /// </summary>
        private void SelectBestVoice(bool isEnglish)
        {
            try
            {
                if (speechSynthesizer == null) return;

                var voices = speechSynthesizer.GetInstalledVoices()
                    .Where(v => v.Enabled)
                    .Select(v => v.VoiceInfo)
                    .ToList();

                VoiceInfo? selectedVoice = null;

                if (isEnglish)
                {
                    // –ò—â–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
                    selectedVoice = voices.FirstOrDefault(v => 
                        v.Culture.Name.StartsWith("en", StringComparison.OrdinalIgnoreCase)) ??
                        voices.FirstOrDefault(v => 
                            v.Name.Contains("David", StringComparison.OrdinalIgnoreCase) ||
                            v.Name.Contains("Zira", StringComparison.OrdinalIgnoreCase) ||
                            v.Name.Contains("Mark", StringComparison.OrdinalIgnoreCase));
                }
                else
                {
                    // –ò—â–µ–º —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
                    selectedVoice = voices.FirstOrDefault(v => 
                        v.Culture.Name.StartsWith("ru", StringComparison.OrdinalIgnoreCase)) ??
                        voices.FirstOrDefault(v => 
                            v.Name.Contains("Irina", StringComparison.OrdinalIgnoreCase) ||
                            v.Name.Contains("Pavel", StringComparison.OrdinalIgnoreCase));
                }

                if (selectedVoice != null)
                {
                    speechSynthesizer.SelectVoice(selectedVoice.Name);
                    AudioAnalysisUtils.SafeDebugLog($"‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {selectedVoice.Name} ({selectedVoice.Culture.Name})");
                }
                else
                {
                    AudioAnalysisUtils.SafeDebugLog($"‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ–ª–æ—Å –¥–ª—è —è–∑—ã–∫–∞ {(isEnglish ? "EN" : "RU")} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                }
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ TTS
        /// </summary>
        public void StopSpeaking()
        {
            try
            {
                if (speechSynthesizer != null && isTTSActive)
                {
                    speechSynthesizer.SpeakAsyncCancelAll();
                    isTTSActive = false;
                    AudioAnalysisUtils.SafeDebugLog("üõë TTS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS: {ex.Message}");
            }
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ TTS
        /// </summary>
        public void SetTTSParameters(int rate = 0, int volume = 80)
        {
            try
            {
                if (speechSynthesizer == null) return;

                speechSynthesizer.Rate = Math.Max(-10, Math.Min(10, rate));
                speechSynthesizer.Volume = Math.Max(0, Math.Min(100, volume));
                
                AudioAnalysisUtils.SafeDebugLog($"üîß TTS –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —Å–∫–æ—Ä–æ—Å—Ç—å={speechSynthesizer.Rate}, –≥—Ä–æ–º–∫–æ—Å—Ç—å={speechSynthesizer.Volume}");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TTS: {ex.Message}");
            }
        }

        public void Dispose()
        {
            try
            {
                StopSpeaking();
                speechSynthesizer?.Dispose();
                speechSynthesizer = null;
                AudioAnalysisUtils.SafeDebugLog("üóëÔ∏è EnhancedTTSEngine —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ TTS: {ex.Message}");
            }
        }
    }
}