using System.Speech.Synthesis;
using System.Threading.Channels;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Text;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –ï–¥–∏–Ω—ã–π TTS –≤–æ—Ä–∫–µ—Ä —Å –æ—á–µ—Ä–µ–¥—å—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ–∑–≤—É—á–∫–∏ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    /// </summary>
    public class StableTtsEngine : IDisposable
    {
        #region Configuration
        
        private const int QUEUE_CAPACITY = 32;
        private const int MAX_TEXT_LENGTH = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ TTS
        private const int MIN_TEXT_LENGTH = 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏
        private const int SPEECH_RATE = 0; // –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (-10 to 10)
        private const int SPEECH_VOLUME = 100; // –ì—Ä–æ–º–∫–æ—Å—Ç—å (0 to 100)
        
        // –¢–∞–π–º–∞—É—Ç—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
        private const int SYNTHESIS_TIMEOUT_MS = 10000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ç–µ–∑–∞
        private const int QUEUE_PROCESSING_DELAY_MS = 50; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ—á–µ—Ä–µ–¥–∏
        
        #endregion

        #region Private Fields
        
        private readonly SpeechSynthesizer _synthesizer;
        private readonly Channel<TtsRequest> _ttsQueue;
        private readonly CancellationTokenSource _cancellationTokenSource = new();
        
        private Task? _processingTask;
        private bool _isDisposed = false;
        private bool _isInitialized = false;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        private int _processedRequests = 0;
        private int _failedRequests = 0;
        private int _queuedRequests = 0;
        private DateTime _lastSpeechTime = DateTime.UtcNow;
        
        // –ö–µ—à –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        private readonly Dictionary<string, VoiceInfo> _voiceCache = new();
        private string _currentLanguage = "en-US";
        private VoiceInfo? _currentVoice;
        
        #endregion

        #region Events
        
        public event Action<string>? OnSpeechStarted;
        public event Action<string>? OnSpeechCompleted;
        public event Action<string>? OnSpeechFailed;
        public event Action<string>? OnStatusChanged;
        public event Action<TtsStatistics>? OnStatisticsUpdated;
        
        #endregion

        public StableTtsEngine()
        {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞
            _synthesizer = new SpeechSynthesizer();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
            _synthesizer.SpeakStarted += OnSynthesizerSpeakStarted;
            _synthesizer.SpeakCompleted += OnSynthesizerSpeakCompleted;
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å backpressure
            var queueOptions = new BoundedChannelOptions(QUEUE_CAPACITY)
            {
                SingleWriter = false,
                SingleReader = true,
                FullMode = BoundedChannelFullMode.DropOldest // –î—Ä–æ–ø–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
            };
            
            _ttsQueue = Channel.CreateBounded<TtsRequest>(queueOptions);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤
            InitializeVoices();
            
            // –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
            StartProcessing();
            
            OnStatusChanged?.Invoke("üé§ TTS Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        #region Public Methods
        
        /// <summary>
        /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–∑–≤—É—á–∫–∏
        /// </summary>
        public async Task<bool> SpeakAsync(string text, string? language = null, CancellationToken ct = default)
        {
            if (_isDisposed || string.IsNullOrWhiteSpace(text))
                return false;
                
            try
            {
                // –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                var cleanedText = CleanTextForSynthesis(text);
                if (string.IsNullOrWhiteSpace(cleanedText) || cleanedText.Length < MIN_TEXT_LENGTH)
                {
                    OnStatusChanged?.Invoke($"üö´ –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è TTS: '{text}'");
                    return false;
                }
                
                // –†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
                var textParts = SplitTextIntoChunks(cleanedText, MAX_TEXT_LENGTH);
                
                foreach (var part in textParts)
                {
                    var request = new TtsRequest
                    {
                        Text = part,
                        Language = language ?? _currentLanguage,
                        Priority = TtsPriority.Normal,
                        RequestId = Guid.NewGuid(),
                        Timestamp = DateTime.UtcNow
                    };
                    
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
                    try
                    {
                        await _ttsQueue.Writer.WriteAsync(request, ct);
                        _queuedRequests++;
                        OnStatusChanged?.Invoke($"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å TTS: '{part.Substring(0, Math.Min(part.Length, 50))}...' [{_queuedRequests} –≤ –æ—á–µ—Ä–µ–¥–∏]");
                    }
                    catch (Exception)
                    {
                        OnSpeechFailed?.Invoke($"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å: {part}");
                        return false;
                    }
                }
                
                return true;
            }
            catch (Exception ex)
            {
                OnSpeechFailed?.Invoke($"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ TTS: {ex.Message}");
                return false;
            }
        }
        
        /// <summary>
        /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–Ω—Ç–µ–∑–æ–≤
        /// </summary>
        public bool SetLanguage(string language)
        {
            if (_voiceCache.TryGetValue(language, out var voice))
            {
                _currentLanguage = language;
                _currentVoice = voice;
                OnStatusChanged?.Invoke($"üåê –Ø–∑—ã–∫ TTS –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {language} ({voice.Name})");
                return true;
            }
            
            OnStatusChanged?.Invoke($"‚ùå –Ø–∑—ã–∫ TTS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {language}");
            return false;
        }
        
        /// <summary>
        /// –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ TTS
        /// </summary>
        public async Task ClearQueueAsync()
        {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            while (_ttsQueue.Reader.TryRead(out _))
            {
                _queuedRequests = Math.Max(0, _queuedRequests - 1);
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–Ω—Ç–µ–∑
            try
            {
                _synthesizer.SpeakAsyncCancelAll();
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã
            }
            
            OnStatusChanged?.Invoke("üóëÔ∏è –û—á–µ—Ä–µ–¥—å TTS –æ—á–∏—â–µ–Ω–∞");
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã TTS
        /// </summary>
        public TtsStatistics GetStatistics()
        {
            return new TtsStatistics
            {
                ProcessedRequests = _processedRequests,
                FailedRequests = _failedRequests,
                QueuedRequests = _queuedRequests,
                LastSpeechTime = _lastSpeechTime,
                CurrentLanguage = _currentLanguage,
                AvailableLanguages = _voiceCache.Keys.ToArray(),
                IsProcessing = _processingTask?.Status == TaskStatus.Running,
                QueueCapacity = QUEUE_CAPACITY
            };
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
        /// </summary>
        public string[] GetSupportedLanguages()
        {
            return _voiceCache.Keys.ToArray();
        }
        
        #endregion

        #region Private Methods - Initialization
        
        private void InitializeVoices()
        {
            try
            {
                foreach (var voice in _synthesizer.GetInstalledVoices())
                {
                    if (voice.Enabled && voice.VoiceInfo != null)
                    {
                        var culture = voice.VoiceInfo.Culture.Name;
                        if (!_voiceCache.ContainsKey(culture))
                        {
                            _voiceCache[culture] = voice.VoiceInfo;
                            OnStatusChanged?.Invoke($"üé≠ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≥–æ–ª–æ—Å: {culture} - {voice.VoiceInfo.Name}");
                        }
                    }
                }
                
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
                if (_voiceCache.ContainsKey("en-US"))
                {
                    SetLanguage("en-US");
                }
                else if (_voiceCache.ContainsKey("ru-RU"))
                {
                    SetLanguage("ru-RU");
                }
                else if (_voiceCache.Any())
                {
                    SetLanguage(_voiceCache.Keys.First());
                }
                
                _isInitialized = true;
                OnStatusChanged?.Invoke($"‚úÖ TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ —è–∑—ã–∫–æ–≤: {_voiceCache.Count}");
            }
            catch (Exception ex)
            {
                OnSpeechFailed?.Invoke($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {ex.Message}");
            }
        }
        
        private void StartProcessing()
        {
            _processingTask = Task.Run(async () => await ProcessTtsQueueAsync(_cancellationTokenSource.Token));
        }
        
        #endregion

        #region Private Methods - Queue Processing
        
        private async Task ProcessTtsQueueAsync(CancellationToken ct)
        {
            Thread.CurrentThread.Priority = ThreadPriority.AboveNormal;
            OnStatusChanged?.Invoke("üîÑ TTS –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—É—â–µ–Ω");
            
            try
            {
                await foreach (var request in _ttsQueue.Reader.ReadAllAsync(ct))
                {
                    try
                    {
                        _queuedRequests = Math.Max(0, _queuedRequests - 1);
                        await ProcessSingleRequestAsync(request, ct);
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–Ω—Ç–µ–∑–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        if (!ct.IsCancellationRequested)
                        {
                            await Task.Delay(QUEUE_PROCESSING_DELAY_MS, ct);
                        }
                    }
                    catch (OperationCanceledException)
                    {
                        break;
                    }
                    catch (Exception ex)
                    {
                        _failedRequests++;
                        OnSpeechFailed?.Invoke($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TTS –∑–∞–ø—Ä–æ—Å–∞: {ex.Message}");
                    }
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    OnStatisticsUpdated?.Invoke(GetStatistics());
                }
            }
            catch (OperationCanceledException)
            {
                OnStatusChanged?.Invoke("‚èπÔ∏è TTS –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                OnSpeechFailed?.Invoke($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TTS –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {ex.Message}");
            }
        }
        
        private async Task ProcessSingleRequestAsync(TtsRequest request, CancellationToken ct)
        {
            if (string.IsNullOrWhiteSpace(request.Text))
                return;
                
            try
            {
                // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (request.Language != _currentLanguage && _voiceCache.ContainsKey(request.Language))
                {
                    SetLanguage(request.Language);
                }
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞
                ConfigureSynthesizer();
                
                OnSpeechStarted?.Invoke(request.Text);
                
                // –°–∏–Ω—Ç–µ–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                using var timeoutCts = CancellationTokenSource.CreateLinkedTokenSource(ct);
                timeoutCts.CancelAfter(SYNTHESIS_TIMEOUT_MS);
                
                await SynthesizeWithTimeoutAsync(request.Text, timeoutCts.Token);
                
                _processedRequests++;
                _lastSpeechTime = DateTime.UtcNow;
                
                OnSpeechCompleted?.Invoke(request.Text);
            }
            catch (OperationCanceledException)
            {
                _synthesizer.SpeakAsyncCancelAll();
                OnStatusChanged?.Invoke($"‚è∏Ô∏è TTS —Å–∏–Ω—Ç–µ–∑ –æ—Ç–º–µ–Ω–µ–Ω: {request.Text.Substring(0, Math.Min(request.Text.Length, 50))}...");
            }
            catch (Exception ex)
            {
                _failedRequests++;
                OnSpeechFailed?.Invoke($"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ '{request.Text}': {ex.Message}");
            }
        }
        
        private void ConfigureSynthesizer()
        {
            try
            {
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–∞
                if (_currentVoice != null)
                {
                    _synthesizer.SelectVoice(_currentVoice.Name);
                }
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                _synthesizer.Rate = SPEECH_RATE;
                _synthesizer.Volume = SPEECH_VOLUME;
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                _synthesizer.SetOutputToDefaultAudioDevice();
            }
            catch (Exception ex)
            {
                OnStatusChanged?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞: {ex.Message}");
            }
        }
        
        private async Task SynthesizeWithTimeoutAsync(string text, CancellationToken ct)
        {
            var tcs = new TaskCompletionSource<bool>();
            
            EventHandler<SpeakCompletedEventArgs>? completedHandler = null;
            completedHandler = (s, e) =>
            {
                _synthesizer.SpeakCompleted -= completedHandler;
                if (e.Error != null)
                {
                    tcs.SetException(e.Error);
                }
                else if (e.Cancelled)
                {
                    tcs.SetCanceled();
                }
                else
                {
                    tcs.SetResult(true);
                }
            };
            
            try
            {
                _synthesizer.SpeakCompleted += completedHandler;
                
                // –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞
                _synthesizer.SpeakAsync(text);
                
                // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
                await tcs.Task.WaitAsync(ct);
            }
            finally
            {
                _synthesizer.SpeakCompleted -= completedHandler;
            }
        }
        
        #endregion

        #region Private Methods - Text Processing
        
        private string CleanTextForSynthesis(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return string.Empty;
                
            // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            text = text.Trim();
            
            // –£–¥–∞–ª–µ–Ω–∏–µ URL –∏ email
            text = Regex.Replace(text, @"http[s]?://[^\s]+", "", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, @"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b", "", RegexOptions.IgnoreCase);
            
            // –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ TTS
            text = text.Replace("&", " –∏ ");
            text = text.Replace("@", " at ");
            text = text.Replace("#", " –Ω–æ–º–µ—Ä ");
            text = text.Replace("$", " –¥–æ–ª–ª–∞—Ä ");
            text = text.Replace("%", " –ø—Ä–æ—Ü–µ–Ω—Ç ");
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            text = Regex.Replace(text, @"\s+", " ");
            
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
            text = Regex.Replace(text, @"\[.*?\]", "", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, @"\(.*?\)", "", RegexOptions.IgnoreCase);
            
            return text.Trim();
        }
        
        private List<string> SplitTextIntoChunks(string text, int maxLength)
        {
            var chunks = new List<string>();
            
            if (text.Length <= maxLength)
            {
                chunks.Add(text);
                return chunks;
            }
            
            // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            var sentences = Regex.Split(text, @"(?<=[.!?])\s+", RegexOptions.Multiline);
            
            var currentChunk = new StringBuilder();
            
            foreach (var sentence in sentences)
            {
                // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if (sentence.Length > maxLength)
                {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π chunk –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (currentChunk.Length > 0)
                    {
                        chunks.Add(currentChunk.ToString().Trim());
                        currentChunk.Clear();
                    }
                    
                    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º
                    var longSentenceParts = SplitLongSentence(sentence, maxLength);
                    chunks.AddRange(longSentenceParts);
                }
                else
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π chunk
                    if (currentChunk.Length + sentence.Length + 1 > maxLength)
                    {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π chunk –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                        if (currentChunk.Length > 0)
                        {
                            chunks.Add(currentChunk.ToString().Trim());
                            currentChunk.Clear();
                        }
                    }
                    
                    if (currentChunk.Length > 0)
                    {
                        currentChunk.Append(" ");
                    }
                    currentChunk.Append(sentence);
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π chunk
            if (currentChunk.Length > 0)
            {
                chunks.Add(currentChunk.ToString().Trim());
            }
            
            return chunks.Where(c => !string.IsNullOrWhiteSpace(c)).ToList();
        }
        
        private List<string> SplitLongSentence(string sentence, int maxLength)
        {
            var parts = new List<string>();
            
            // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç—ã–º
            var commaParts = sentence.Split(',');
            var currentPart = new StringBuilder();
            
            foreach (var part in commaParts)
            {
                if (currentPart.Length + part.Length + 1 > maxLength)
                {
                    if (currentPart.Length > 0)
                    {
                        parts.Add(currentPart.ToString().Trim());
                        currentPart.Clear();
                    }
                    
                    // –ï—Å–ª–∏ —á–∞—Å—Ç—å –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                    if (part.Length > maxLength)
                    {
                        parts.AddRange(SplitByWords(part, maxLength));
                    }
                    else
                    {
                        currentPart.Append(part);
                    }
                }
                else
                {
                    if (currentPart.Length > 0)
                    {
                        currentPart.Append(", ");
                    }
                    currentPart.Append(part);
                }
            }
            
            if (currentPart.Length > 0)
            {
                parts.Add(currentPart.ToString().Trim());
            }
            
            return parts.Where(p => !string.IsNullOrWhiteSpace(p)).ToList();
        }
        
        private List<string> SplitByWords(string text, int maxLength)
        {
            var parts = new List<string>();
            var words = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var currentPart = new StringBuilder();
            
            foreach (var word in words)
            {
                if (currentPart.Length + word.Length + 1 > maxLength)
                {
                    if (currentPart.Length > 0)
                    {
                        parts.Add(currentPart.ToString().Trim());
                        currentPart.Clear();
                    }
                    
                    // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–∞–º–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞–µ–º
                    if (word.Length > maxLength)
                    {
                        parts.Add(word.Substring(0, maxLength));
                    }
                    else
                    {
                        currentPart.Append(word);
                    }
                }
                else
                {
                    if (currentPart.Length > 0)
                    {
                        currentPart.Append(" ");
                    }
                    currentPart.Append(word);
                }
            }
            
            if (currentPart.Length > 0)
            {
                parts.Add(currentPart.ToString().Trim());
            }
            
            return parts.Where(p => !string.IsNullOrWhiteSpace(p)).ToList();
        }
        
        #endregion

        #region Event Handlers
        
        private void OnSynthesizerSpeakStarted(object? sender, SpeakStartedEventArgs e)
        {
            OnStatusChanged?.Invoke($"üîä –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ç–µ–∑–∞ TTS");
        }
        
        private void OnSynthesizerSpeakCompleted(object? sender, SpeakCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                OnStatusChanged?.Invoke($"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e.Error.Message}");
            }
            else if (e.Cancelled)
            {
                OnStatusChanged?.Invoke($"‚è∏Ô∏è –°–∏–Ω—Ç–µ–∑ –æ—Ç–º–µ–Ω–µ–Ω");
            }
            else
            {
                OnStatusChanged?.Invoke($"‚úÖ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
        }
        
        #endregion

        #region IDisposable
        
        public void Dispose()
        {
            if (_isDisposed)
                return;
                
            _isDisposed = true;
            
            OnStatusChanged?.Invoke("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TTS Engine...");
            
            // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            _cancellationTokenSource.Cancel();
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞
            try
            {
                _synthesizer.SpeakAsyncCancelAll();
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ dispose
            }
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—á–µ—Ä–µ–¥–∏
            _ttsQueue.Writer.TryComplete();
            
            // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try
            {
                _processingTask?.Wait(TimeSpan.FromSeconds(2));
            }
            catch
            {
                // –¢–∞–π–º–∞—É—Ç - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            }
            
            // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            _synthesizer.Dispose();
            _cancellationTokenSource.Dispose();
            
            OnStatusChanged?.Invoke("‚úÖ TTS Engine –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
        
        #endregion
    }

    #region Supporting Types
    
    public class TtsRequest
    {
        public string Text { get; set; } = string.Empty;
        public string Language { get; set; } = "en-US";
        public TtsPriority Priority { get; set; } = TtsPriority.Normal;
        public Guid RequestId { get; set; }
        public DateTime Timestamp { get; set; }
    }
    
    public enum TtsPriority
    {
        Low,
        Normal,
        High,
        Urgent
    }
    
    public class TtsStatistics
    {
        public int ProcessedRequests { get; set; }
        public int FailedRequests { get; set; }
        public int QueuedRequests { get; set; }
        public DateTime LastSpeechTime { get; set; }
        public string CurrentLanguage { get; set; } = string.Empty;
        public string[] AvailableLanguages { get; set; } = Array.Empty<string>();
        public bool IsProcessing { get; set; }
        public int QueueCapacity { get; set; }
        
        public double SuccessRate => ProcessedRequests + FailedRequests > 0 ? 
            (double)ProcessedRequests / (ProcessedRequests + FailedRequests) : 1.0;
            
        public TimeSpan TimeSinceLastSpeech => DateTime.UtcNow - LastSpeechTime;
        
        public override string ToString()
        {
            return $"TTS: {ProcessedRequests} —É—Å–ø–µ—à–Ω–æ, {FailedRequests} –æ—à–∏–±–æ–∫, {QueuedRequests} –≤ –æ—á–µ—Ä–µ–¥–∏, " +
                   $"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {SuccessRate:P1}, –Ø–∑—ã–∫: {CurrentLanguage}";
        }
    }
    
    #endregion
}