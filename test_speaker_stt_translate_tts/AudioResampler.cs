using NAudio.Wave;
using NAudio.Wave.SampleProviders;
using System.Diagnostics;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å—ç–º–ø–ª–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç Whisper (16kHz –º–æ–Ω–æ)
    /// </summary>
    public class AudioResampler : IDisposable
    {
        #region Constants
        
        private const int TARGET_SAMPLE_RATE = 16000;
        private const int TARGET_CHANNELS = 1;
        private const int BUFFER_SIZE = 4096;
        
        #endregion

        #region Private Fields
        
        private readonly int sourceSampleRate;
        private readonly int sourceChannels;
        private readonly double resampleRatio;
        
        private MediaFoundationResampler? resampler;
        private WaveFormat sourceFormat;
        private WaveFormat targetFormat;
        
        private readonly float[] tempBuffer = new float[BUFFER_SIZE * 2]; // –ë—É—Ñ–µ—Ä —Å –∑–∞–ø–∞—Å–æ–º
        private bool isDisposed = false;
        
        #endregion

        #region Constructor
        
        public AudioResampler(int sourceSampleRate, int sourceChannels)
        {
            this.sourceSampleRate = sourceSampleRate;
            this.sourceChannels = sourceChannels;
            this.resampleRatio = (double)TARGET_SAMPLE_RATE / sourceSampleRate;
            
            sourceFormat = new WaveFormat(sourceSampleRate, 32, sourceChannels); // Float32
            targetFormat = new WaveFormat(TARGET_SAMPLE_RATE, 32, TARGET_CHANNELS);
            
            InitializeResampler();
            
            Debug.WriteLine($"üîß AudioResampler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:");
            Debug.WriteLine($"   –ò—Å—Ç–æ—á–Ω–∏–∫: {sourceSampleRate}Hz, {sourceChannels}ch");
            Debug.WriteLine($"   –¶–µ–ª—å: {TARGET_SAMPLE_RATE}Hz, {TARGET_CHANNELS}ch");
            Debug.WriteLine($"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {resampleRatio:F3}");
        }
        
        #endregion

        #region Initialization
        
        private void InitializeResampler()
        {
            try
            {
                if (sourceSampleRate == TARGET_SAMPLE_RATE && sourceChannels == TARGET_CHANNELS)
                {
                    Debug.WriteLine("‚úÖ –†–µ—Å—ç–º–ø–ª–∏–Ω–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º MediaFoundation —Ä–µ—Å—ç–º–ø–ª–µ—Ä –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                // MediaFoundationResampler —Ç—Ä–µ–±—É–µ—Ç IWaveProvider, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥
                resampler = null; // –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LinearResampler
                
                Debug.WriteLine("‚úÖ –õ–∏–Ω–µ–π–Ω—ã–π —Ä–µ—Å—ç–º–ø–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (fallback)");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—ç–º–ø–ª–µ—Ä–∞: {ex.Message}");
                // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥—É
                resampler = null;
            }
        }
        
        #endregion

        #region Public Methods
        
        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å–µ–º–ø–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç Whisper (16kHz –º–æ–Ω–æ)
        /// </summary>
        public float[] Resample(float[] inputSamples)
        {
            if (isDisposed || inputSamples == null || inputSamples.Length == 0)
                return Array.Empty<float>();

            try
            {
                // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç—ã —É–∂–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
                if (sourceSampleRate == TARGET_SAMPLE_RATE && sourceChannels == TARGET_CHANNELS)
                {
                    return (float[])inputSamples.Clone();
                }
                
                // –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                float[] monoSamples = ConvertToMono(inputSamples);
                
                // –ó–∞—Ç–µ–º —Ä–µ—Å—ç–º–ø–ª–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (sourceSampleRate != TARGET_SAMPLE_RATE)
                {
                    return ResampleFrequency(monoSamples);
                }
                
                return monoSamples;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–∞: {ex.Message}");
                return Array.Empty<float>();
            }
        }
        
        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç byte[] –≤ float[] —Å —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–æ–º
        /// </summary>
        public float[] ResampleFromBytes(byte[] audioBytes, WaveFormat inputFormat)
        {
            if (isDisposed || audioBytes == null || audioBytes.Length == 0)
                return Array.Empty<float>();

            try
            {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ float –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                float[] floatSamples = ConvertBytesToFloat(audioBytes, inputFormat);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                if (inputFormat.SampleRate != sourceSampleRate || inputFormat.Channels != sourceChannels)
                {
                    UpdateFormat(inputFormat.SampleRate, inputFormat.Channels);
                }
                
                return Resample(floatSamples);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ bytes: {ex.Message}");
                return Array.Empty<float>();
            }
        }
        
        #endregion

        #region Private Methods
        
        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–µ—Ä–µ–æ/–º—É–ª—å—Ç–∏-–∫–∞–Ω–∞–ª –≤ –º–æ–Ω–æ
        /// </summary>
        private float[] ConvertToMono(float[] inputSamples)
        {
            if (sourceChannels == 1)
                return inputSamples;
            
            int outputLength = inputSamples.Length / sourceChannels;
            float[] monoSamples = new float[outputLength];
            
            for (int i = 0; i < outputLength; i++)
            {
                float sum = 0;
                for (int ch = 0; ch < sourceChannels; ch++)
                {
                    sum += inputSamples[i * sourceChannels + ch];
                }
                monoSamples[i] = sum / sourceChannels;
            }
            
            return monoSamples;
        }
        
        /// <summary>
        /// –ò–∑–º–µ–Ω—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        /// </summary>
        private float[] ResampleFrequency(float[] inputSamples)
        {
            if (resampler != null)
            {
                return ResampleWithMediaFoundation(inputSamples);
            }
            else
            {
                return ResampleLinear(inputSamples);
            }
        }
        
        /// <summary>
        /// –†–µ—Å—ç–º–ø–ª–∏–Ω–≥ —á–µ—Ä–µ–∑ MediaFoundation (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        /// </summary>
        private float[] ResampleWithMediaFoundation(float[] inputSamples)
        {
            try
            {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ byte array
                byte[] inputBytes = new byte[inputSamples.Length * 4];
                Buffer.BlockCopy(inputSamples, 0, inputBytes, 0, inputBytes.Length);
                
                // –†–µ—Å—ç–º–ø–ª–∏—Ä—É–µ–º
                byte[] outputBytes = new byte[(int)(inputBytes.Length * resampleRatio) + 1024]; // –ë—É—Ñ–µ—Ä —Å –∑–∞–ø–∞—Å–æ–º
                int outputLength = resampler!.Read(outputBytes, 0, outputBytes.Length);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ float
                float[] outputSamples = new float[outputLength / 4];
                Buffer.BlockCopy(outputBytes, 0, outputSamples, 0, outputLength);
                
                return outputSamples;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ MediaFoundation —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–∞: {ex.Message}");
                return ResampleLinear(inputSamples);
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥ (fallback)
        /// </summary>
        private float[] ResampleLinear(float[] inputSamples)
        {
            int outputLength = (int)(inputSamples.Length * resampleRatio);
            float[] outputSamples = new float[outputLength];
            
            for (int i = 0; i < outputLength; i++)
            {
                double sourceIndex = i / resampleRatio;
                int index1 = (int)sourceIndex;
                int index2 = Math.Min(index1 + 1, inputSamples.Length - 1);
                
                double fraction = sourceIndex - index1;
                outputSamples[i] = (float)(inputSamples[index1] * (1 - fraction) + inputSamples[index2] * fraction);
            }
            
            return outputSamples;
        }
        
        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç byte array –≤ float array –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        /// </summary>
        private float[] ConvertBytesToFloat(byte[] audioBytes, WaveFormat format)
        {
            switch (format.BitsPerSample)
            {
                case 16:
                    return ConvertInt16ToFloat(audioBytes);
                case 24:
                    return ConvertInt24ToFloat(audioBytes);
                case 32:
                    if (format.Encoding == WaveFormatEncoding.IeeeFloat)
                        return ConvertFloat32ToFloat(audioBytes);
                    else
                        return ConvertInt32ToFloat(audioBytes);
                default:
                    throw new ArgumentException($"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format.BitsPerSample} –±–∏—Ç");
            }
        }
        
        private float[] ConvertInt16ToFloat(byte[] bytes)
        {
            float[] samples = new float[bytes.Length / 2];
            for (int i = 0; i < samples.Length; i++)
            {
                short sample = BitConverter.ToInt16(bytes, i * 2);
                samples[i] = sample / 32768f;
            }
            return samples;
        }
        
        private float[] ConvertInt24ToFloat(byte[] bytes)
        {
            float[] samples = new float[bytes.Length / 3];
            for (int i = 0; i < samples.Length; i++)
            {
                int sample = bytes[i * 3] | (bytes[i * 3 + 1] << 8) | (bytes[i * 3 + 2] << 16);
                if ((sample & 0x800000) != 0) sample |= unchecked((int)0xFF000000); // Sign extension
                samples[i] = sample / 8388608f;
            }
            return samples;
        }
        
        private float[] ConvertInt32ToFloat(byte[] bytes)
        {
            float[] samples = new float[bytes.Length / 4];
            for (int i = 0; i < samples.Length; i++)
            {
                int sample = BitConverter.ToInt32(bytes, i * 4);
                samples[i] = sample / 2147483648f;
            }
            return samples;
        }
        
        private float[] ConvertFloat32ToFloat(byte[] bytes)
        {
            float[] samples = new float[bytes.Length / 4];
            Buffer.BlockCopy(bytes, 0, samples, 0, bytes.Length);
            return samples;
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–µ—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
        /// </summary>
        private void UpdateFormat(int newSampleRate, int newChannels)
        {
            if (newSampleRate == sourceSampleRate && newChannels == sourceChannels)
                return;
                
            Debug.WriteLine($"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞: {newSampleRate}Hz, {newChannels}ch");
            
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ä–µ—Å—ç–º–ø–ª–µ—Ä —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            resampler?.Dispose();
            resampler = null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–Ω–µ–π–Ω—ã–π —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥
        }
        
        #endregion

        #region IDisposable
        
        public void Dispose()
        {
            if (isDisposed) return;
            
            resampler?.Dispose();
            isDisposed = true;
            
            Debug.WriteLine("‚úÖ AudioResampler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
        
        #endregion
    }
}