using System.Buffers;
using System.Threading.Channels;
using System.Runtime.CompilerServices;
using System.Diagnostics;

namespace test_speaker_stt_translate_tts
{
    public sealed class ChannelByteBuffer
    {
        public byte[] Buffer { get; }
        public int Length { get; }
        public long EnqueuedAtTicks { get; } = Stopwatch.GetTimestamp();
        
        private int _returned = 0; // 0=active, 1=returned
        
        public ChannelByteBuffer(byte[] buffer, int length)
        {
            Buffer = buffer;
            Length = length;
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Return()
        {
            if (Interlocked.Exchange(ref _returned, 1) == 1)
            {
#if DEBUG
                Debug.Fail($"üö® DOUBLE RETURN on ChannelByteBuffer: {Buffer?.Length ?? -1} bytes");
#endif
                return; // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ - –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑
            }
            ArrayPoolAudioBuffer.ReturnByteBuffer(Buffer);
        }

#if DEBUG
        ~ChannelByteBuffer()
        {
            // –î–µ—Ç–µ–∫—Ç–æ—Ä —É—Ç–µ—á–µ–∫ - –µ—Å–ª–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ Return()
            if (Volatile.Read(ref _returned) == 0)
            {
                Debug.Fail($"üî¥ LEAKED ChannelByteBuffer: {Buffer?.Length ?? -1} bytes (Return() not called)");
            }
        }
#endif
    }
    
    public sealed class ChannelFloatBuffer
    {
        public float[] Buffer { get; }
        public int Length { get; }
        public long EnqueuedAtTicks { get; } = Stopwatch.GetTimestamp();
        
        private int _returned = 0; // 0=active, 1=returned
        
        public ChannelFloatBuffer(float[] buffer, int length)
        {
            Buffer = buffer;
            Length = length;
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Return()
        {
            if (Interlocked.Exchange(ref _returned, 1) == 1)
            {
#if DEBUG
                Debug.Fail($"üö® DOUBLE RETURN on ChannelFloatBuffer: {Buffer?.Length ?? -1} samples");
#endif
                return; // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ - –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑
            }
            ArrayPoolAudioBuffer.ReturnFloatBuffer(Buffer);
        }

#if DEBUG
        ~ChannelFloatBuffer()
        {
            // –î–µ—Ç–µ–∫—Ç–æ—Ä —É—Ç–µ—á–µ–∫ - –µ—Å–ª–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ Return()
            if (Volatile.Read(ref _returned) == 0)
            {
                Debug.Fail($"üî¥ LEAKED ChannelFloatBuffer: {Buffer?.Length ?? -1} samples (Return() not called)");
            }
        }
#endif
    }
}
