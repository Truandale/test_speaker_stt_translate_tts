using NAudio.Wave;
using System.Diagnostics;
using System.Collections.Concurrent;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –ü–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∞—É–¥–∏–æ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ STT –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
    /// –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª–æ–≥–∏–∫–µ MORT —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    /// </summary>
    public class StreamingAudioProcessor : IDisposable
    {
        private readonly ConcurrentQueue<AudioChunk> processingQueue = new();
        private readonly List<byte> streamBuffer = new();
        private readonly SemaphoreSlim processingSemaphore = new(3); // –ú–∞–∫—Å–∏–º—É–º 3 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        private bool isProcessing = false;
        private bool isTTSPlaying = false;
        private int chunkCounter = 0;
        private DateTime lastProcessedTime = DateTime.Now;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        private int streamChunkSizeMs = 3000; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        private int overlapMs = 500; // –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —á–∞–Ω–∫–æ–≤ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
        private float voiceThreshold = 0.05f;
        private int minChunkSizeBytes = 24000; // –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (~0.5 —Å–µ–∫)
        
        // –°–æ–±—ã—Ç–∏—è
        public event Func<byte[], int, Task<string>>? ChunkReadyForSTT;
        public event Action<string, int>? StreamingResultReceived; // —Ç–µ–∫—Å—Ç, –Ω–æ–º–µ—Ä —á–∞–Ω–∫–∞
        public event Action<string>? StatusUpdated;
        public event Action<bool>? TTSStateChanged;
        
        public bool IsProcessing => isProcessing;
        public bool IsTTSPlaying 
        { 
            get => isTTSPlaying; 
            set 
            { 
                isTTSPlaying = value;
                TTSStateChanged?.Invoke(value);
            } 
        }
        
        public int StreamChunkSizeMs 
        { 
            get => streamChunkSizeMs; 
            set => streamChunkSizeMs = Math.Max(1000, Math.Min(10000, value)); 
        }
        
        public float VoiceThreshold 
        { 
            get => voiceThreshold; 
            set => voiceThreshold = Math.Max(0.001f, Math.Min(1.0f, value)); 
        }

        private struct AudioChunk
        {
            public byte[] Data;
            public int ChunkNumber;
            public DateTime Timestamp;
            public float AudioLevel;
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        /// </summary>
        public async Task ProcessStreamingAudio(byte[] buffer, int bytesRecorded, float audioLevel)
        {
            try
            {
                // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è TTS (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —ç—Ö–∞)
                if (isTTSPlaying)
                {
                    return;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ç–æ–∫–æ–≤—ã–π –±—É—Ñ–µ—Ä
                streamBuffer.AddRange(buffer.Take(bytesRecorded));

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                bool shouldProcessChunk = ShouldProcessCurrentBuffer(audioLevel);
                
                if (shouldProcessChunk && streamBuffer.Count >= minChunkSizeBytes)
                {
                    await ProcessBufferAsChunk();
                }

                // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                if (streamBuffer.Count > 1_000_000) // 1MB –ª–∏–º–∏—Ç
                {
                    AudioAnalysisUtils.SafeDebugLog("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞");
                    int keepSize = streamBuffer.Count / 2;
                    streamBuffer.RemoveRange(0, streamBuffer.Count - keepSize);
                }
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä
        /// </summary>
        private bool ShouldProcessCurrentBuffer(float audioLevel)
        {
            var timeSinceLastProcess = DateTime.Now - lastProcessedTime;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ò–õ–ò –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            bool timeThreshold = timeSinceLastProcess.TotalMilliseconds >= streamChunkSizeMs;
            bool sizeThreshold = streamBuffer.Count >= (streamChunkSizeMs * 44100 * 4 / 1000); // ~—Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            bool hasVoice = audioLevel > voiceThreshold;
            
            return (timeThreshold || sizeThreshold) && hasVoice;
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –∫–∞–∫ —á–∞–Ω–∫
        /// </summary>
        private async Task ProcessBufferAsChunk()
        {
            try
            {
                chunkCounter++;
                lastProcessedTime = DateTime.Now;
                
                // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
                int chunkSize = streamBuffer.Count;
                int overlapSize = Math.Min(overlapMs * 44100 * 4 / 1000, streamBuffer.Count / 4);
                
                byte[] chunkData = new byte[chunkSize];
                streamBuffer.CopyTo(chunkData);
                
                // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                var chunk = new AudioChunk
                {
                    Data = chunkData,
                    ChunkNumber = chunkCounter,
                    Timestamp = DateTime.Now,
                    AudioLevel = CalculateAverageLevel(chunkData)
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processingQueue.Enqueue(chunk);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                _ = Task.Run(() => ProcessChunkAsync(chunk));
                
                // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                if (streamBuffer.Count > overlapSize)
                {
                    streamBuffer.RemoveRange(0, streamBuffer.Count - overlapSize);
                }
                
                AudioAnalysisUtils.SafeDebugLog($"üîÑ –ß–∞–Ω–∫ #{chunkCounter} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É ({chunkSize} –±–∞–π—Ç)");
                StatusUpdated?.Invoke($"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ #{chunkCounter}...");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞
        /// </summary>
        private async Task ProcessChunkAsync(AudioChunk chunk)
        {
            await processingSemaphore.WaitAsync();
            
            try
            {
                if (ChunkReadyForSTT == null) return;
                
                AudioAnalysisUtils.SafeDebugLog($"üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ #{chunk.ChunkNumber}");
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º STT –¥–ª—è —á–∞–Ω–∫–∞
                string result = await ChunkReadyForSTT(chunk.Data, chunk.ChunkNumber);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (!string.IsNullOrWhiteSpace(result) && !AudioAnalysisUtils.IsAudioPlaceholder(result))
                {
                    AudioAnalysisUtils.SafeDebugLog($"‚úÖ –ß–∞–Ω–∫ #{chunk.ChunkNumber}: '{result}'");
                    StreamingResultReceived?.Invoke(result, chunk.ChunkNumber);
                }
                else
                {
                    AudioAnalysisUtils.SafeDebugLog($"üö´ –ß–∞–Ω–∫ #{chunk.ChunkNumber} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: '{result}'");
                }
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ #{chunk.ChunkNumber}: {ex.Message}");
            }
            finally
            {
                processingSemaphore.Release();
            }
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ—á–∏)
        /// </summary>
        public async Task FlushCurrentBuffer()
        {
            if (streamBuffer.Count > minChunkSizeBytes)
            {
                AudioAnalysisUtils.SafeDebugLog("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞");
                await ProcessBufferAsChunk();
            }
        }

        /// <summary>
        /// –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä–µ
        /// </summary>
        private float CalculateAverageLevel(byte[] buffer)
        {
            if (buffer.Length < 4) return 0f;
            
            float sum = 0f;
            int sampleCount = 0;
            
            for (int i = 0; i < buffer.Length - 3; i += 4)
            {
                float sample = Math.Abs(BitConverter.ToSingle(buffer, i));
                sum += sample;
                sampleCount++;
            }
            
            return sampleCount > 0 ? sum / sampleCount : 0f;
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        public void ConfigureStreaming(int chunkSizeMs = 3000, int overlapMs = 500, float threshold = 0.05f)
        {
            this.streamChunkSizeMs = Math.Max(1000, Math.Min(10000, chunkSizeMs));
            this.overlapMs = Math.Max(100, Math.Min(2000, overlapMs));
            this.voiceThreshold = Math.Max(0.001f, Math.Min(1.0f, threshold));
            
            AudioAnalysisUtils.SafeDebugLog($"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞: —á–∞–Ω–∫={this.streamChunkSizeMs}–º—Å, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ={this.overlapMs}–º—Å, –ø–æ—Ä–æ–≥={this.voiceThreshold}");
        }

        /// <summary>
        /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        /// </summary>
        public void Reset()
        {
            try
            {
                streamBuffer.Clear();
                while (processingQueue.TryDequeue(out _)) { }
                chunkCounter = 0;
                lastProcessedTime = DateTime.Now;
                isProcessing = false;
                
                AudioAnalysisUtils.SafeDebugLog("üîÑ –ü–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–±—Ä–æ—à–µ–Ω");
                StatusUpdated?.Invoke("üîÑ –ì–æ—Ç–æ–≤ –∫ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        public string GetProcessingStats()
        {
            return $"–ß–∞–Ω–∫–æ–≤: {chunkCounter}, –ë—É—Ñ–µ—Ä: {streamBuffer.Count} –±–∞–π—Ç, –û—á–µ—Ä–µ–¥—å: {processingQueue.Count}";
        }

        public void Dispose()
        {
            try
            {
                Reset();
                processingSemaphore?.Dispose();
                AudioAnalysisUtils.SafeDebugLog("üóëÔ∏è StreamingAudioProcessor —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
            }
        }
    }
}