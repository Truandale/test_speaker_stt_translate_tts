using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace test_speaker_stt_translate_tts
{
    /// <summary>
    /// –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–º—ã—Å–ª–∞
    /// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –ª–æ–≥–∏–∫–∏ MAS (MORT Audio Settings)
    /// </summary>
    public static class SmartTextSplitter
    {
        /// <summary>
        /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        /// </summary>
        private const int MAX_SENTENCE_LENGTH = 200;

        /// <summary>
        /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        private const int MIN_SENTENCE_LENGTH = 5;

        /// <summary>
        /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ª–∏–∫–æ–º
        /// </summary>
        private const int MAX_TEXT_LENGTH = 300;

        /// <summary>
        /// –ó–Ω–∞–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static readonly char[] SENTENCE_ENDINGS = { '.', '!', '?' };

        /// <summary>
        /// –ó–Ω–∞–∫–∏ –ø–∞—É–∑—ã –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        /// </summary>
        private static readonly char[] PAUSE_MARKS = { ',', ';', ':', '-', '‚Äì', '‚Äî' };

        /// <summary>
        /// –°–æ–∫—Ä–∞—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private static readonly HashSet<string> ABBREVIATIONS = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            "Mr", "Mrs", "Ms", "Dr", "Prof", "Sr", "Jr", "Ltd", "Inc", "Corp", "Co",
            "vs", "etc", "i.e", "e.g", "a.m", "p.m", "U.S", "U.K", "EU", "USA", "UK",
            "–≥-–Ω", "–≥-–∂–∞", "–¥—Ä", "–ø—Ä–æ—Ñ", "—Å–º", "—Å—Ç—Ä", "–≥–ª", "—Ç.–¥", "—Ç.–ø", "—Ç.–∫", "—Ç.–µ"
        };

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        public static List<string> SplitIntoSentences(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return new List<string>();

            text = text.Trim();

            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if (text.Length <= MAX_TEXT_LENGTH)
            {
                return new List<string> { text };
            }

            AudioAnalysisUtils.SafeDebugLog($"üîÑ –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {text.Length} —Å–∏–º–≤–æ–ª–æ–≤");

            var sentences = SplitWithContextAwareness(text);

            // –ï—Å–ª–∏ —É–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ
            if (sentences.Count <= 1)
            {
                sentences = SplitSimple(text);
            }

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = MergeShortSentences(sentences);

            // –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = SplitLongSentences(sentences);

            AudioAnalysisUtils.SafeDebugLog($"üìù –ü–æ–ª—É—á–∏–ª–æ—Å—å {sentences.Count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");

            return sentences.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
        }

        /// <summary>
        /// –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π Whisper.NET
        /// </summary>
        private static List<string> SplitWithContextAwareness(string text)
        {
            var sentences = new List<string>();
            var currentSentence = new StringBuilder();

            // Whisper.NET —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            // –ú—ã –¥–æ–ª–∂–Ω—ã –¥–æ–≤–µ—Ä—è—Ç—å —ç—Ç–∏–º –∑–Ω–∞–∫–∞–º –∏ –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            for (int i = 0; i < text.Length; i++)
            {
                char c = text[i];
                currentSentence.Append(c);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∑–Ω–∞–∫–∏ –æ—Ç Whisper –Ω–∞–¥–µ–∂–Ω—ã)
                if (SENTENCE_ENDINGS.Contains(c))
                {
                    // Whisper.NET –∑–Ω–∞–µ—Ç –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –¥–æ–≤–µ—Ä—è–µ–º –µ–º—É
                    if (IsValidWhisperSentenceEnd(text, i, currentSentence.ToString()))
                    {
                        string sentence = currentSentence.ToString().Trim();
                        if (sentence.Length >= MIN_SENTENCE_LENGTH)
                        {
                            sentences.Add(sentence);
                            currentSentence.Clear();
                        }
                    }
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (currentSentence.Length > 0)
            {
                string lastSentence = currentSentence.ToString().Trim();
                if (lastSentence.Length >= MIN_SENTENCE_LENGTH)
                {
                    sentences.Add(lastSentence);
                }
            }

            return sentences;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ü–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç Whisper
        /// </summary>
        private static bool IsValidWhisperSentenceEnd(string text, int position, string currentSentence)
        {
            char currentChar = text[position];
            
            // Whisper —Å—Ç–∞–≤–∏—Ç —Ç–æ—á–∫—É, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            // –ú—ã –¥–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ–º—É, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ)
            if (currentChar == '.' && IsCommonAbbreviation(currentSentence))
                return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            if (position + 1 < text.Length)
            {
                char nextChar = text[position + 1];
                
                // –ü–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –∏–¥–µ—Ç –ø—Ä–æ–±–µ–ª –∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
                // –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
                if (char.IsWhiteSpace(nextChar))
                {
                    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ-–ø—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                    for (int j = position + 1; j < text.Length; j++)
                    {
                        if (!char.IsWhiteSpace(text[j]))
                        {
                            // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã - —ç—Ç–æ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                            return char.IsUpper(text[j]) || char.IsDigit(text[j]);
                        }
                    }
                    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - —ç—Ç–æ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
                    return true;
                }
                
                // –ï—Å–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –∏–¥–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
                return char.IsUpper(nextChar);
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            return true;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        /// </summary>
        private static bool IsCommonAbbreviation(string text)
        {
            if (string.IsNullOrEmpty(text)) return false;
            
            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π
            var words = text.Trim().Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            if (words.Length == 0) return false;
            
            string lastWord = words[words.Length - 1].TrimEnd('.');
            
            // –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
            var commonAbbreviations = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
            {
                "mr", "mrs", "ms", "dr", "prof", "inc", "ltd", "corp", "co",
                "etc", "vs", "ie", "eg", "cf", "et", "al", "ca", "approx",
                "–≥", "–≥—Ä", "—Ç–æ–≤", "–∏–º", "—É–ª", "–¥", "–∫–≤", "—Å—Ç—Ä", "–∫–æ—Ä–ø"
            };
            
            return commonAbbreviations.Contains(lastWord);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ü–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        /// </summary>
        private static bool IsActualSentenceEnd(string text, int position, string currentSentence)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            if (IsAbbreviation(currentSentence))
                return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª
            if (position + 1 < text.Length)
            {
                char nextChar = text[position + 1];

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
                int nextNonSpacePos = position + 1;
                while (nextNonSpacePos < text.Length && char.IsWhiteSpace(text[nextNonSpacePos]))
                {
                    nextNonSpacePos++;
                }

                if (nextNonSpacePos < text.Length)
                {
                    char nextNonSpaceChar = text[nextNonSpacePos];

                    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∏–ª–∏ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    return char.IsUpper(nextNonSpaceChar) || char.IsDigit(nextNonSpaceChar);
                }
            }

            return true; // –ö–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º
        /// </summary>
        private static bool IsAbbreviation(string sentence)
        {
            if (string.IsNullOrEmpty(sentence) || sentence.Length < 2)
                return false;

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π
            var words = sentence.TrimEnd('.', '!', '?').Split(new char[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            if (words.Length == 0)
                return false;

            string lastWord = words[words.Length - 1];

            return ABBREVIATIONS.Contains(lastWord);
        }

        /// <summary>
        /// –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        /// </summary>
        private static List<string> SplitSimple(string text)
        {
            var sentences = new List<string>();
            var parts = text.Split(SENTENCE_ENDINGS, StringSplitOptions.RemoveEmptyEntries);

            foreach (var part in parts)
            {
                string trimmed = part.Trim();
                if (trimmed.Length >= MIN_SENTENCE_LENGTH)
                {
                    sentences.Add(trimmed);
                }
            }

            return sentences;
        }

        /// <summary>
        /// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏
        /// </summary>
        private static List<string> MergeShortSentences(List<string> sentences)
        {
            var merged = new List<string>();

            for (int i = 0; i < sentences.Count; i++)
            {
                string current = sentences[i];

                // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
                if (current.Length < MIN_SENTENCE_LENGTH * 2 && i + 1 < sentences.Count)
                {
                    string next = sentences[i + 1];
                    if (current.Length + next.Length < MAX_SENTENCE_LENGTH)
                    {
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º
                        merged.Add($"{current} {next}");
                        i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                        continue;
                    }
                }

                merged.Add(current);
            }

            return merged;
        }

        /// <summary>
        /// –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ
        /// </summary>
        private static List<string> SplitLongSentences(List<string> sentences)
        {
            var result = new List<string>();

            foreach (string sentence in sentences)
            {
                if (sentence.Length <= MAX_SENTENCE_LENGTH)
                {
                    result.Add(sentence);
                    continue;
                }

                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º –ø–∞—É–∑—ã
                var parts = SplitByPauseMarks(sentence);
                if (parts.Count > 1)
                {
                    result.AddRange(parts);
                }
                else
                {
                    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                    result.AddRange(SplitByWords(sentence));
                }
            }

            return result;
        }

        /// <summary>
        /// –†–∞–∑–±–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–Ω–∞–∫–∞–º –ø–∞—É–∑—ã (–∑–∞–ø—è—Ç—ã–µ, —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –∏ —Ç.–¥.)
        /// </summary>
        private static List<string> SplitByPauseMarks(string sentence)
        {
            var parts = new List<string>();
            var currentPart = new StringBuilder();

            foreach (char c in sentence)
            {
                currentPart.Append(c);

                if (PAUSE_MARKS.Contains(c) && currentPart.Length >= MIN_SENTENCE_LENGTH * 2)
                {
                    parts.Add(currentPart.ToString().Trim());
                    currentPart.Clear();
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            if (currentPart.Length > 0)
            {
                string remaining = currentPart.ToString().Trim();
                if (remaining.Length >= MIN_SENTENCE_LENGTH)
                {
                    parts.Add(remaining);
                }
                else if (parts.Count > 0)
                {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç—å—é –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
                    parts[parts.Count - 1] += " " + remaining;
                }
            }

            return parts;
        }

        /// <summary>
        /// –†–∞–∑–±–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        /// </summary>
        private static List<string> SplitByWords(string sentence)
        {
            var parts = new List<string>();
            var words = sentence.Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            var currentPart = new StringBuilder();

            foreach (string word in words)
            {
                if (currentPart.Length + word.Length + 1 > MAX_SENTENCE_LENGTH && currentPart.Length > 0)
                {
                    parts.Add(currentPart.ToString().Trim());
                    currentPart.Clear();
                }

                if (currentPart.Length > 0)
                    currentPart.Append(" ");
                currentPart.Append(word);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if (currentPart.Length > 0)
            {
                parts.Add(currentPart.ToString().Trim());
            }

            return parts;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
        /// </summary>
        public static bool ShouldSplit(string text)
        {
            return !string.IsNullOrWhiteSpace(text) && text.Length > MAX_TEXT_LENGTH;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// </summary>
        public static int GetOptimalChunkSize(string text, int maxChunks = 5)
        {
            if (string.IsNullOrWhiteSpace(text))
                return MAX_SENTENCE_LENGTH;

            int optimalSize = Math.Max(MIN_SENTENCE_LENGTH * 4, text.Length / maxChunks);
            return Math.Min(optimalSize, MAX_SENTENCE_LENGTH);
        }

        /// <summary>
        /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        /// </summary>
        public static class SplitStats
        {
            public static void LogSplitResults(string originalText, List<string> sentences)
            {
                if (sentences.Count <= 1) return;

                AudioAnalysisUtils.SafeDebugLog($"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è:");
                AudioAnalysisUtils.SafeDebugLog($"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {originalText.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                AudioAnalysisUtils.SafeDebugLog($"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {sentences.Count}");
                AudioAnalysisUtils.SafeDebugLog($"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {sentences.Average(s => s.Length):F1} —Å–∏–º–≤–æ–ª–æ–≤");
                AudioAnalysisUtils.SafeDebugLog($"   –ú–∏–Ω/–ú–∞–∫—Å: {sentences.Min(s => s.Length)}/{sentences.Max(s => s.Length)} —Å–∏–º–≤–æ–ª–æ–≤");
            }
        }

        /// <summary>
        /// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è JSON –æ—à–∏–±–æ–∫
        /// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ MORT MegaAudioSettings.TranslateLongTextInParts
        /// </summary>
        public static async Task<string> TranslateLongTextInParts(string longText, 
            Func<string, string, string, Task<string>> translateFunction,
            string sourceLanguage, string targetLanguage)
        {
            try
            {
                AudioAnalysisUtils.SafeDebugLog($"üîÑ [SmartSplitter] –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {longText.Length} —Å–∏–º–≤–æ–ª–æ–≤");

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É–º–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É
                var sentences = SplitIntoSentences(longText);

                AudioAnalysisUtils.SafeDebugLog($"üìù [SmartSplitter] –ü–æ–ª—É—á–∏–ª–æ—Å—å {sentences.Count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞");

                // üéØ –£–õ–£–ß–®–ï–ù–ò–ï: –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–ª–æ (2-3), –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ü–µ–ª–∏–∫–æ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if (sentences.Count <= 3 && longText.Length < 800)
                {
                    AudioAnalysisUtils.SafeDebugLog($"üìù [SmartSplitter] –ú–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ({sentences.Count}), –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ü–µ–ª–∏–∫–æ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞");
                    return await translateFunction(longText, sourceLanguage, targetLanguage);
                }

                if (sentences.Count <= 1)
                {
                    // –ï—Å–ª–∏ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                    AudioAnalysisUtils.SafeDebugLog($"üìù [SmartSplitter] –û–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞, –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {longText.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                    return await translateFunction(longText, sourceLanguage, targetLanguage);
                }

                // üîó –£–õ–£–ß–®–ï–ù–ò–ï: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                var contextualGroups = GroupSentencesForContext(sentences);
                AudioAnalysisUtils.SafeDebugLog($"üìù [SmartSplitter] –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {contextualGroups.Count} –≥—Ä—É–ø–ø –ø–æ–ª–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π");

                var translatedParts = new List<string>();

                // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –æ—Ç–¥–µ–ª—å–Ω–æ
                for (int i = 0; i < contextualGroups.Count; i++)
                {
                    string group = contextualGroups[i];
                    string preview = group.Length > 80 ? group.Substring(0, 77) + "..." : group;

                    AudioAnalysisUtils.SafeDebugLog($"üîÑ [SmartSplitter] –ü–µ—Ä–µ–≤–æ–¥–∏–º –≥—Ä—É–ø–ø—É {i + 1}/{contextualGroups.Count}: '{preview}'");

                    try
                    {
                        string partResult = await translateFunction(group, sourceLanguage, targetLanguage);
                        
                        if (!string.IsNullOrEmpty(partResult) && !partResult.Contains("[–û—à–∏–±–∫–∞]"))
                        {
                            translatedParts.Add(partResult.Trim());
                            string resultPreview = partResult.Length > 80 ? partResult.Substring(0, 77) + "..." : partResult;
                            AudioAnalysisUtils.SafeDebugLog($"‚úÖ [SmartSplitter] –ì—Ä—É–ø–ø–∞ {i + 1} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞: '{resultPreview}'");
                        }
                        else
                        {
                            AudioAnalysisUtils.SafeDebugLog($"‚ùå [SmartSplitter] –ì—Ä—É–ø–ø–∞ {i + 1} –Ω–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª");
                            translatedParts.Add(group); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
                        }

                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
                        await Task.Delay(150);
                    }
                    catch (Exception partEx)
                    {
                        AudioAnalysisUtils.SafeDebugLog($"‚ùå [SmartSplitter] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã {i + 1}: {partEx.Message}");
                        translatedParts.Add(group); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    }
                }

                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
                string finalResult = string.Join(" ", translatedParts);

                string finalPreview = finalResult.Length > 100 ? finalResult.Substring(0, 97) + "..." : finalResult;
                AudioAnalysisUtils.SafeDebugLog($"‚úÖ [SmartSplitter] –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –ø–æ —á–∞—Å—Ç—è–º: '{finalPreview}' ({finalResult.Length} —Å–∏–º–≤–æ–ª–æ–≤)");
                
                return finalResult;
            }
            catch (Exception ex)
            {
                AudioAnalysisUtils.SafeDebugLog($"‚ùå [SmartSplitter] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {ex.Message}");
                return $"[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞] {longText}";
            }
        }

        /// <summary>
        /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ
        /// </summary>
        private static List<string> GroupSentencesForContext(List<string> sentences)
        {
            var groups = new List<string>();
            var currentGroup = new List<string>();
            int currentLength = 0;
            
            foreach (var sentence in sentences)
            {
                var trimmedSentence = sentence.Trim();
                if (string.IsNullOrEmpty(trimmedSentence)) continue;
                
                // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç –≤ 800 —Å–∏–º–≤–æ–ª–æ–≤
                // –∏–ª–∏ —Ç–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                if ((currentLength + trimmedSentence.Length > 800 && currentGroup.Count > 0) 
                    || currentGroup.Count >= 3)
                {
                    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
                    if (currentGroup.Count > 0)
                    {
                        groups.Add(string.Join(" ", currentGroup));
                        currentGroup.Clear();
                        currentLength = 0;
                    }
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
                currentGroup.Add(trimmedSentence);
                currentLength += trimmedSentence.Length + 1; // +1 –¥–ª—è –ø—Ä–æ–±–µ–ª–∞
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
            if (currentGroup.Count > 0)
            {
                groups.Add(string.Join(" ", currentGroup));
            }
            
            AudioAnalysisUtils.SafeDebugLog($"üìù [SmartSplitter] –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {sentences.Count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ‚Üí {groups.Count} –≥—Ä—É–ø–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π");
            
            // –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for (int i = 0; i < groups.Count; i++)
            {
                string groupPreview = groups[i].Length > 60 ? groups[i].Substring(0, 57) + "..." : groups[i];
                AudioAnalysisUtils.SafeDebugLog($"  üìã –ì—Ä—É–ø–ø–∞ {i + 1}: {groups[i].Length} —Å–∏–º–≤–æ–ª–æ–≤ - '{groupPreview}'");
            }
            
            return groups;
        }
    }
}